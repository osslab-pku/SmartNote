Changes between v0.14.0 and v0.14.1
================================================================================

COMMITS
--------------------------------------------------------------------------------

Commit: a6fde1059c8a413b353d4f39581b09b296cd6b9a
Author: Fran√ßois Mockers
Date: 2024-07-07 19:54:53+00:00
Message: EmptyPathStream is only used in android/wasm32 (#14200)

# Objective

- `EmptyPathStream` is only used in android and wasm32
- This now makes rust nightly warn

## Solution

- flag the struct to only be present when needed
- also change how `MorphTargetNames` is used because that makes rust
happier?
----------------------------------------

Commit: 4275669b07492ea66d5cf09fbd0c94c8833dafac
Author: Brandon Reinhart
Date: 2024-07-08 01:00:04+00:00
Message: impl Reflect + Clone for StateScoped (#14156)

# Objective

- Expand the flexibilty of StateScoped by adding Reflect and Clone
- This lets StateScoped be used in Clone Bundles, for example

```rust
#[derive(Component, Reflect, Clone)]
pub struct StateScoped<S: States>(pub S);
```

Notes:
- States are already Clone.
- Type registration is up to the user, but this is commonly the case
with reflected generic types.

## Testing

- Ran the examples.
----------------------------------------

Commit: c6b80c56644a35faad6aa7452102fa289f53ece4
Author: Mike
Date: 2024-07-08 01:01:47+00:00
Message: add entity to error message (#14163)

# Objective

- There was a new warning added about having an unstyled child in the ui
hierarchy. Debugging the new error is pretty hard without any info about
which entity is.

## Solution

- Add the entity id to the warning.

```text
// Before
2024-07-05T19:40:59.904014Z  WARN bevy_ui::layout::ui_surface: Unstyled child in a UI entity hierarchy. You are using an entity without UI components as a child of an entity with UI components, results may be unexpected.

//After
2024-07-05T19:40:59.904014Z  WARN bevy_ui::layout::ui_surface: Unstyled child `3v1` in a UI entity hierarchy. You are using an entity without UI components as a child of an entity with UI components, results may be unexpected.
```

## Changelog

- add entity id to ui surface warning
----------------------------------------

Commit: 7ed1f6a9b6b24224052ae2284d01239b11824c3f
Author: Mike
Date: 2024-07-08 01:03:27+00:00
Message: use Display for entity id in log_components (#14164)

# Objective

- Cleanup a doubled `Entity` in log components

```
// Before
2024-07-05T19:54:09.082773Z  INFO bevy_ecs::system::commands: Entity Entity { index: 2, generation: 1 }: ["bevy_transform::components::transform::Transform"]

// After
2024-07-05T19:54:09.082773Z  INFO bevy_ecs::system::commands: Entity 2v1: ["bevy_transform::components::transform::Transform"]
```

---------

Co-authored-by: Jan Hohenheim <jan@hohenheim.ch>
----------------------------------------

Commit: e941264b6f3f44af865e0e1642e93d34e8afee65
Author: Jan Hohenheim
Date: 2024-07-08 01:05:09+00:00
Message: Optimize unnecessary normalizations for `Transform::local_{xyz}` (#14171)

Note that `GlobalTransform` already does it like this for `right`,
`left`, etc. so I didn't have to touch that one
----------------------------------------

Commit: 5d9e44b9dce73ef35670212a399955988e28ccec
Author: Litttle_fish
Date: 2024-07-08 01:07:03+00:00
Message: disable gpu preprocessing on android with Adreno 730 GPU and earilier (#14176)

# Objective

Fix #14146 

## Solution

Expansion of #13323 , excluded Adreno 730 and earlier.

## Testing

Tested on android device(Adreno 730) that used to crash
----------------------------------------

Commit: 1bc5ecda9b1a1828b61af30149bcd40a8cde82c7
Author: Torstein Grindvik
Date: 2024-07-08 01:09:07+00:00
Message: bevy_input: allow use without bevy_reflect (#14167)

Allow use of `bevy_input` types without needing `bevy_reflect`.

Make `bevy_reflect` within `bevy_input` optional. It's compiled in by
default.
Turn on reflect in dependencies as well when this feature is on.

- Did you test these changes? If so, how?

I did a `cargo hack -p bevy_input --each-feature build`.

Signed-off-by: Torstein Grindvik <torstein.grindvik@muybridge.com>
Co-authored-by: Torstein Grindvik <torstein.grindvik@muybridge.com>
----------------------------------------

Commit: 0e1858bc4f1a9e7664898c27d41ad19e9c651c31
Author: IQuick 143
Date: 2024-07-10 16:00:19+00:00
Message: fix: Possible NaN due to denormalised quaternions in AABB implementations for round shapes. (#14240)

# Objective

With an unlucky denormalised quaternion (or just a regular very
denormalised quaternion), it's possible to obtain NaN values for AABB's
in shapes which rely on an AABB for a disk.

## Solution

Add an additional `.max(Vec3::ZERO)` clamp to get rid of negative values
arising due to numerical errors.
Fixup some unnecessary calculations and improve variable names in
relevant code, aiming for consistency.

## Discussion

These two (nontrivial) lines of code are repeated at least 5 times,
maybe they could be their own method.
----------------------------------------

Commit: 4bd56b6da1362f503203b66941bdbec742ec3cd7
Author: MiniaczQ
Date: 2024-07-14 16:47:28+00:00
Message: Dirty fix for App hanging when windows are invisible on WindowsOS (#14155)

# Objective

- Fixes #14135 

## Solution

- If no windows are visible, app updates will run regardless of redraw
call result.

This a relatively dirty fix, a more robust solution is desired in the
long run:
https://github.com/bevyengine/bevy/issues/1343#issuecomment-770091684

https://discord.com/channels/691052431525675048/1253771396832821270/1258805997011730472
The solution would disconnect rendering from app updates.

## Testing

- `window_settings` now works

## Other platforms

Not a problem on Linux:
https://discord.com/channels/691052431525675048/692572690833473578/1259526650622640160
Not a problem on MacOS:
https://discord.com/channels/691052431525675048/692572690833473578/1259563986148659272
----------------------------------------

Commit: d0583c8b5444660049a6a397604389f16323be97
Author: Matty
Date: 2024-07-14 17:00:41+00:00
Message: Fix swapped docs for `Rot2::rotation_to/from_y` (#14307)

# Objective

Fixes #14301 

## Solution

Swap them so that they are no longer swapped.
----------------------------------------

Commit: 7f3fea9a5bb86a7f6a64dc45723b5c6b25a8f2e0
Author: Periwink
Date: 2024-07-15 14:59:12+00:00
Message: Allow observer systems to have outputs (#14159)

Fixes https://github.com/bevyengine/bevy/issues/14157

- Update the ObserverSystem traits to accept an `Out` parameter

- Added a test where an observer system has a non-empty output which is
piped into another system

Co-authored-by: Alice Cecile <alice.i.cecile@gmail.com>
----------------------------------------

Commit: 524fb01457378096bf08e6bc90b085816cd24844
Author: MiniaczQ
Date: 2024-07-15 15:08:54+00:00
Message: Make initial `StateTransition` run before `PreStartup` (#14208)

# Objective

- Fixes #14206 

## Solution

- Run initial `StateTransition` as a startup schedule before
`PreStartup`, instead of running it inside `Startup` as an exclusive
system.

Related discord discussion:

https://discord.com/channels/691052431525675048/692572690833473578/1259543775668207678

## Testing

Reproduction now works correctly:

```rs
use bevy::prelude::*;

#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Hash, States)]
enum AppState {
    #[default]
    Menu,
    InGame,
}

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .init_state::<AppState>()
        .add_systems(Startup, setup)
        .add_systems(OnEnter(AppState::Menu), enter_menu_state)
        .run();
}

fn setup(mut next_state: ResMut<NextState<AppState>>) {
    next_state.set(AppState::Menu);
}

fn enter_menu_state() {
    println!("Entered menu state");
}
```


![image](https://github.com/bevyengine/bevy/assets/13040204/96d7a533-c439-4c0b-8f15-49f620903ce1)


---

## Changelog

- Initial `StateTransition` runs before `PreStartup` instead of inside
`Startup`.
----------------------------------------

Commit: 728c5b98d4d1530ff86801cfb521af5e4c4dd246
Author: Alix Bott
Date: 2024-07-15 15:50:36+00:00
Message: Fix overflow in `RenderLayers::iter_layers` (#14264)

# Objective

- Fixes overflow when calling `RenderLayers::iter_layers` on layers of
the form `k * 64 - 1`
- Causes a panic in debug mode, and an infinite iterator in release mode

## Solution

- Use `u64::checked_shr` instead of `>>=`

## Testing

- Added a test case for this: `render_layer_iter_no_overflow`
----------------------------------------

Commit: 70a0c211ffcb6df7afd8ce645c43712c1d20d2e7
Author: BD103
Date: 2024-07-15 16:00:49+00:00
Message: Fix `bevy_window` failing with `serialize` feature (#14298)

# Objective

- [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy) found an
issue where `bevy_window` would fail to build when its `serialize`
feature is enabled.
- See
[here](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/9924187577/job/27415224405)
for the specific log.

## Solution

- Turns out it was failing because the `bevy_ecs/serialize` feature was
not enabled. This error can be fixed by adding the flag as a dependency.

## Testing

```bash
cargo check -p bevy_window -F serialize
# Or if you're very cool...
flag-frenzy --manifest-path path/to/bevy/Cargo.toml --config config -p bevy_window
```
----------------------------------------

Commit: 42412f35006607db0036f16829f3e4e4d4067042
Author: Lura
Date: 2024-07-15 23:40:39+00:00
Message: Fix error/typo in SMAA shader (#14338)

# Objective

- Actually use the value assigned to `d_xz`, like in [the original SMAA
implementation](https://github.com/iryoku/smaa/blob/master/SMAA.hlsl#L960).
This not already being the case was likely a mistake when converting
from HLSL to WGSL

## Solution

- Use `d_xz.x` and `d_xz.y` instead of `d.x` and `d.z`

## Testing

- Quickly tested on Windows 11, `x86_64-pc-windows-gnu` `1.79.0` with
the latest NVIDIA drivers. App runs with SMAA enabled and everything
seems to work as intended
- I didn't observe any major visual difference between this and the
previous version, though this should be more correct as it matches the
original SMAA implementation
----------------------------------------

Commit: 420ca6c43c2d65d822b2f2c7da5e2808af867f4c
Author: Sludge
Date: 2024-07-20 14:18:12+00:00
Message: Make `Viewport::default()` return a 1x1 viewport (#14372)

# Objective

- The current default viewport crashes bevy due to a wgpu validation
error, this PR fixes that
- Fixes https://github.com/bevyengine/bevy/issues/14355

## Solution

- `Viewport::default()` now returns a 1x1 viewport

## Testing

- I modified the `3d_viewport_to_world` example to use
`Viewport::default()`, and it works as expected (only the top-left pixel
is rendered)
----------------------------------------

Commit: 295ed1fdb4c0779da7c784b41ccc7996801eda0a
Author: Fran√ßois Mockers
Date: 2024-07-20 17:55:25+00:00
Message: fix building cargo_gltf with feature dds (#14360)

# Objective

- Building bevy_gltf with feature dds fails:
```
> cargo build -p bevy_gltf --features dds
   Compiling bevy_core_pipeline v0.15.0-dev (crates/bevy_core_pipeline)
error[E0061]: this function takes 7 arguments but 6 arguments were supplied
   --> crates/bevy_core_pipeline/src/tonemapping/mod.rs:442:5
    |
442 |     Image::from_buffer(
    |     ^^^^^^^^^^^^^^^^^^
...
445 |         bytes,
    |         ----- an argument of type `std::string::String` is missing
    |
note: associated function defined here
   --> crates/bevy_render/src/texture/image.rs:709:12
    |
709 |     pub fn from_buffer(
    |            ^^^^^^^^^^^
help: provide the argument
    |
442 |     Image::from_buffer(/* std::string::String */, bytes, image_type, CompressedImageFormats::NONE, false, image_sampler, RenderAssetUsages::RENDER_WORLD)
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more information about this error, try `rustc --explain E0061`.
error: could not compile `bevy_core_pipeline` (lib) due to 1 previous error
```
- If you're fixing a specific issue, say "Fixes #X".

## Solution

- enable dds feature in bevy_core_pipeline

## Testing

- `cargo build -p bevy_gltf --features dds`
----------------------------------------

Commit: df3fcbd116fb38bdd8ee6cde2740a98290a61c86
Author: Sou1gh0st
Date: 2024-07-22 18:25:54+00:00
Message: Fix incorrect function calls to hsv_to_rgb in render debug code. (#14260)

# Objective

- Fixes https://github.com/bevyengine/bevy/issues/14139

## Solution

- correct the input parameters at these call sites.

## Testing

1. Use a 3D scene example with PBR lighting and shadows enabled, such as
the `shadow_caster_receiver` and `load_gltf` example, for testing.
2. Enable relevant shader defines in crates/bevy_pbr/src/pbr_material.rs
for the StandardMaterial.
```rust
impl Material for StandardMaterial {
    // ...
    fn specialize(
            _pipeline: &MaterialPipeline<Self>,
            descriptor: &mut RenderPipelineDescriptor,
            _layout: &MeshVertexBufferLayoutRef,
            key: MaterialPipelineKey<Self>,
        ) -> Result<(), SpecializedMeshPipelineError> {
            // ...
            // shader_defs.push("CLUSTERED_FORWARD_DEBUG_Z_SLICES".into());
            // shader_defs.push("CLUSTERED_FORWARD_DEBUG_CLUSTER_COHERENCY".into());
            shader_defs.push("DIRECTIONAL_LIGHT_SHADOW_MAP_DEBUG_CASCADES".into());
            // ...
    }
}
``` 

## Showcase
### CLUSTERED_FORWARD_DEBUG_Z_SLICES
- example: examples/3d/shadow_caster_receiver.rs

![Screenshot2024_07_10_143150](https://github.com/bevyengine/bevy/assets/6300263/fbd12712-5cb9-489d-a7d1-ed55f72fb234)

### CLUSTERED_FORWARD_DEBUG_CLUSTER_COHERENCY
- example: examples/3d/shadow_caster_receiver.rs

![Screenshot2024_07_10_143312](https://github.com/bevyengine/bevy/assets/6300263/8eca5d7a-27b6-4ff5-9f8d-d10b49b3f990)

### DIRECTIONAL_LIGHT_SHADOW_MAP_DEBUG_CASCADES
For this one, we need to use a large scene and modity the
`CascadeShadowConfigBuilder`, here is a simple patch for the `load_gltf`
example:
```
diff --git a/examples/3d/load_gltf.rs b/examples/3d/load_gltf.rs
index 358446238..9403aa288 100644
--- a/examples/3d/load_gltf.rs
+++ b/examples/3d/load_gltf.rs
@@ -18,7 +18,7 @@ fn main() {
 fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
     commands.spawn((
         Camera3dBundle {
-            transform: Transform::from_xyz(0.7, 0.7, 1.0)
+            transform: Transform::from_xyz(0.7, 0.7, 2.0)
                 .looking_at(Vec3::new(0.0, 0.3, 0.0), Vec3::Y),
             ..default()
         },
@@ -39,30 +39,40 @@ fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
         // We also adjusted the shadow map to be larger since we're
         // only using a single cascade.
         cascade_shadow_config: CascadeShadowConfigBuilder {
-            num_cascades: 1,
-            maximum_distance: 1.6,
+            num_cascades: 5,
+            maximum_distance: 20.0,
             ..default()
         }
         .into(),
         ..default()
     });
+
     commands.spawn(SceneBundle {
         scene: asset_server
             .load(GltfAssetLabel::Scene(0).from_asset("models/FlightHelmet/FlightHelmet.gltf")),
         ..default()
     });
+
+    for i in 1..=10 {
+        commands.spawn(SceneBundle {
+            scene: asset_server
+                .load(GltfAssetLabel::Scene(0).from_asset("models/FlightHelmet/FlightHelmet.gltf")),
+            transform: Transform::from_xyz(i as f32 * 0.5, 0.0, i as f32 * -2.0),
+            ..default()
+        });
+    }
 }
 
 fn animate_light_direction(
     time: Res<Time>,
     mut query: Query<&mut Transform, With<DirectionalLight>>,
 ) {
-    for mut transform in &mut query {
-        transform.rotation = Quat::from_euler(
-            EulerRot::ZYX,
-            0.0,
-            time.elapsed_seconds() * PI / 5.0,
-            -FRAC_PI_4,
-        );
-    }
+    // for mut transform in &mut query {
+    //     transform.rotation = Quat::from_euler(
+    //         EulerRot::ZYX,
+    //         0.0,
+    //         time.elapsed_seconds() * PI / 5.0,
+    //         -FRAC_PI_4,
+    //     );
+    // }
 }
``` 

![Screenshot2024_07_10_145737](https://github.com/bevyengine/bevy/assets/6300263/c5c71894-f9f7-45fa-9b4f-598e324b42d0)

---------

Co-authored-by: ickshonpe <david.curthoys@googlemail.com>
----------------------------------------

Commit: 6882420c7fc674742ac1161d52198a07fdf0e444
Author: Peter Hayman
Date: 2024-07-22 18:24:10+00:00
Message: Add some missing reflect attributes (#14259)

# Objective

- Some types are missing reflection attributes, which means we can't use
them in scene serialization etc.
- Effected types
   - `BorderRadius`
   - `AnimationTransitions`
   - `OnAdd`
   - `OnInsert`
   - `OnRemove`
- My use-case for `OnAdd` etc to derive reflect is 'Serializable
Observer Components'. Add the component, save the scene, then the
observer is re-added on scene load.

```rust
#[derive(Reflect)]
struct MySerializeableObserver<T: Event>(#[reflect(ignore)]PhantomData<T>);

impl<T: Event> Component for MySerializeableObserver<T> {
  const STORAGE_TYPE: StorageType  = StorageType::Table;
    fn register_component_hooks(hooks: &mut ComponentHooks) {
      hooks.on_add(|mut world, entity, _| {
        world
          .commands()
          .entity(entity)
          .observe(|_trigger: Trigger<T>| {
            println!("it triggered etc.");
          });
    });
  }
}
```

## Solution

- Add the missing traits

---
----------------------------------------

Commit: 2e577bcdc9c09f18f4d06fe5f580e7ce26ff37dc
Author: Al M.
Date: 2024-07-22 18:44:27+00:00
Message: Fix single keyframe animations. (#14344)

# Objective

For clips with more than one curve, only the first was being applied if
there is only one keyframe in it.

## Solution

Continue!
----------------------------------------

Commit: 2870d89d5ca28a1d3580d67630ee9659969cc11c
Author: BD103
Date: 2024-07-26 17:11:38+00:00
Message: Fix `bevy_gltf` PBR features not enabling corresponding `bevy_pbr` flags (#14486)

# Objective

- `bevy_gltf` does not build with only the
`pbr_multi_layer_material_textures` or `pbr_anisotropy_texture`
features.
- Caught by [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy)
in [this
run](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/10087486444/job/27891723948).

## Solution

- This error was due to the feature not enabling the corresponding
feature in `bevy_pbr`. Adding these flags as a dependency fixes this
error.

## Testing

The following commands fail on `main`, but pass with this PR:

```bash
cargo check -p bevy_gltf --no-default-features -F pbr_multi_layer_material_textures
cargo check -p bevy_gltf --no-default-features -F pbr_anisotropy_texture
```
----------------------------------------

Commit: 9daf16bb870ff4ae4f50a8dda9cef350bef2a791
Author: NiseVoid
Date: 2024-07-26 21:53:36+00:00
Message: Handle 0 height in prepare_bloom_textures (#14423)

# Objective

- Fix a confusing panic when the viewport width is non-zero and the
height is 0, `prepare_bloom_textures` tries to create a `4294967295x1`
texture.

## Solution

- Avoid dividing by zero
- Apps still crash after this, but now on a more reasonable error about
the zero-size viewport

## Testing

- I isolated and tested the math. A height of 0 sets `mip_height_ratio`
to `inf`, causing the width to explode if it isn't also 0
----------------------------------------

Commit: c4ea4776c419a44bfa49ad3e7f13a675d28d8d1a
Author: BD103
Date: 2024-07-26 22:05:36+00:00
Message: Fix `bevy_winit` not building with `serialize` feature (#14469)

# Objective

- `bevy_winit` fails to build with just the `serialize` feature.
- Caught by [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy)
in [this
run](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/10087486444/job/27891723948),
using the new, nuanced configuration system!

## Solution

- It was failing because `bevy_winit` did not pass the `serialize` flag
to two of its dependencies: `bevy_input` and `bevy_window`.
- To fix this, add these crates to the feature flag.

## Testing

```bash
# On Linux, you must also specify a backend: `x11` or `wayland`.
# You can do this with `-F serialize,x11`, etc.
cargo check -p bevy_winit --no-default-features -F serialize
```
----------------------------------------

Commit: 680c994100db29ab77b183ee8f6539d6fe6473d6
Author: Brian Reavis
Date: 2024-07-27 13:16:27+00:00
Message: Fix TextureCache memory leak and add is_empty() method (#14480)

# Objective

Fix a memory leak in `TextureCache` caused by the internal HashMap never
having unused entries cleared.

This isn't a giant memory leak, given the unused entries are simply
empty vectors. Though, if someone goes and resizes a window a bunch, it
can lead to hundreds/thousands of TextureDescriptor keys adding up in
the hashmap ‚Äì which isn't ideal.

## Solution

- Only retain hashmap entries that still have textures.
- I also added an `is_empty()` method to `TextureCache`, which is useful
for 3rd-party higher-level caches that might have individual caches by
view entity or texture type, for example.

## Testing

- Verified the examples still work (this is a trivial change)
----------------------------------------

Commit: 27cafdae9b4dd31b45e234279f9b4d3857721c7f
Author: charlotte
Date: 2024-07-21 21:27:07+00:00
Message: Fix breaking image 0.25.2 release. (#14421)

Deprecated item breaking ci:
https://github.com/image-rs/image/releases/tag/v0.25.2. See
https://github.com/bevyengine/bevy/actions/runs/10030764981/job/27720434072?pr=14419
for example.
----------------------------------------

Commit: 587cffdcde0377a8c0191d41349f6cc26b5de372
Author: Giacomo Stevanato
Date: 2024-07-28 15:48:51+00:00
Message: Fix `bevy_render`'s `image` dependency version (#14505)

# Objective

- `bevy_render` depends on `image 0.25` but uses `image::ImageReader`
which was added only in `image 0.25.2`
- users that have `image 0.25` in their `Cargo.lock` and update to the
latest `bevy_render` may thus get a compilation due to this (at least I
did)

## Solution

- Properly set the correct minimum version of `image` that `bevy_render`
depends on.
----------------------------------------

Commit: 0886e6a302e8d74254fd3ec6ede5fd483e0220b7
Author: Sarthak Singh
Date: 2024-07-29 23:40:39+00:00
Message: Disabled usage of the POLYGON_MODE_LINE gpu feature in the examples (#14402)

Fixes #14353
Fixes #14371

---------

Signed-off-by: Sarthak Singh <sarthak.singh99@gmail.com>
Co-authored-by: Alice Cecile <alice.i.cecile@gmail.com>
Co-authored-by: BD103 <59022059+BD103@users.noreply.github.com>
----------------------------------------

Commit: ebfe545f796a8d5073ad25d1832a6d983cb0e9e8
Author: Tam√°s Kiss
Date: 2024-07-29 23:42:56+00:00
Message: fix issue with phantom ui node children (#14490)

# Objective

The `ui_layout_system` relies on change detection to sync parent-child
relation to taffy. The children need to by synced before node removal to
avoid trying to set deleted nodes as children (due to how the different
queries collect entities). This however may leave nodes that were
removed set as children to other nodes in special cases.

Fixes #11385

## Solution

The solution is simply to re-sync the changed children after the nodes
are removed.

## Testing

Tested with `sickle_ui` where docking zone highlights would end up
glitched when docking was done in a certain manner:
- run the `docking_zone_splits` example
- pop out a tab from the top
- dock the floating panel in the center right
- grab another tab and try to hover the original static docking zone:
the highlight is semi-stuck
- (NOTE: sometimes it worked even without the fix due to scheduling
order not producing the bugged query results)

After the fix, the issue is no longer present.

NOTE: The performance impact should be minimal, as the child sync relies
on change detection. The change detection was also the reason the parent
nodes remained "stuck" with the phantom children if no other update were
done to them.
----------------------------------------

Commit: 3a6176b6cbf0952435cb3fc47f5e21215cfb95e0
Author: Brezak
Date: 2024-08-01 16:15:28+00:00
Message: Properly handle repeated window close requests (#14573)

# Objective

Spamming the window close button on window may trigger a panic.

```
thread 'main' panicked at <Bevy repo>\crates\bevy_ecs\src\system\commands\mod.rs:1320:13:
error[B0003]: Could not insert a bundle (of type `bevy_window::window::ClosingWindow`) for entity 0v1#4294967296 because it doesn't exist in this World. See: https://bevyengine.org/learn/errors/b0003
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
Encountered a panic when applying buffers for system `bevy_window::system::close_when_requested`!
2024-08-01T15:00:29.742612Z  WARN bevy_ecs::world::command_queue: CommandQueue has un-applied commands being dropped. Did you forget to call SystemState::apply?
Encountered a panic in system `bevy_app::main_schedule::Main::run_main`!
error: process didn't exit successfully: `target\debug\bevy.exe` (exit code: 101)
```

## Solution

Don't panic when trying to insert the `ClosingWindow` component into a
entity.

## Testing

Found and tested on windows. I haven't checked if this bug happens on
linux or macos.
For testing I ran this code:

```rust
use std::{thread, time::Duration};

use bevy::prelude::*;

fn lag() {
    thread::sleep(Duration::from_millis(300));
}

fn main() -> AppExit {
    App::new()
        .add_plugins(DefaultPlugins)
        .add_systems(Update, lag)
        .run()
}
```

Then spammed the window close button. The panic no longer occurs.
----------------------------------------

Commit: d8886408bf1af50d4eff660e07063a5541f31bb4
Author: JJJimbo1
Date: 2024-08-01 20:03:23+00:00
Message: fix asymmetrical 9-slicing (#14148)

# Objective

Fixes #14147.

## Solution

Modify the slicing checks and algorithm to fully allow asymmetrical
textures to work.
Some opinionated code cleanup.

## Testing

Tested using the ui_texture_slice example and a custom asymmetrical
texture.

Before:

![asymmetrical_texture_slice_before](https://github.com/bevyengine/bevy/assets/88861660/00dafce1-904a-41ac-b5d9-faaf087b0681)

After:

![asymmetrical_texture_slice_after](https://github.com/bevyengine/bevy/assets/88861660/f3d742f3-6157-4d35-b383-aee4b8f6e7d0)

---------

Co-authored-by: Alice Cecile <alice.i.cecile@gmail.com>
----------------------------------------

Commit: 833ee3f577e973a9d4c40c23c9c3ff1aee94b4c7
Author: James O'Brien
Date: 2024-08-02 00:15:42+00:00
Message: Skip batching for phase items from other pipelines (#14296)

# Objective

- Fix #14295

## Solution

- Early out when `GFBD::get_index_and_compare_data` returns None.

## Testing

- Tested on a selection of examples including `many_foxes` and
`3d_shapes`.
- Resolved the original issue in `bevy_vector_shapes`.
----------------------------------------

Commit: 61c683fb6a10240424f0905598ed94e1547a8492
Author: Alessio Marchi
Date: 2024-06-20 01:02:16+00:00
Message: feat: add insert_after and insert_startup_before (#13941)

# Objective

Fixes #13866 

## Solution

Add `insert_before` in **FixedMainScheduleOrder** and
**MainScheduleOrder**, add `insert_startup_before` in
**MainScheduleOrder**, applying the same logic as `insert_after`, except
for parameters naming and insertion index.
----------------------------------------

Commit: c217238c5e239cb7ac4d82a462c37fd24b084abf
Author: Fran√ßois
Date: 2024-08-02 17:55:29+00:00
Message: clippy happy
----------------------------------------

Commit: d65eb39277c4f85749ba27460b8398f815ef3802
Author: Fran√ßois
Date: 2024-08-02 17:28:30+00:00
Message: Release 0.14.1
----------------------------------------


PULL REQUESTS
--------------------------------------------------------------------------------

PR #14387: Deprecate `is_playing_animation`
Author: FastestMolasses
Merged at: 2024-07-19 11:44:00+00:00
URL: https://github.com/bevyengine/bevy/pull/14387
Description:
# Objective

Fixes #14386

## Solution

- Added the `#[deprecate]` attribute to the `is_playing_animation` function.

## Testing

The project successfully builds.

---

## Migration Guide

The user will just need to replace functions named `is_playing_animation` with `animation_is_playing`.

----------------------------------------

PR #14219: Bump Version after Release
Author: github-actions[bot]
Merged at: 2024-07-08 13:12:49+00:00
URL: https://github.com/bevyengine/bevy/pull/14219
Description:
Bump version after release
This PR has been auto-generated
----------------------------------------

PR #14316: Fast renormalize
Author: IQuick143
Merged at: 2024-07-22 19:04:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14316
Description:
# Objective

- Addresses part of #14302 .

## Solution

- Add a fast_remormalize method to Dir2/Dir3/Dir3A and Rot2.

## Testing

- Added tests too

----------------------------------------

PR #13889: Make `Task`s functional on WASM
Author: JoJoJet
Merged at: 2024-07-16 01:31:15+00:00
URL: https://github.com/bevyengine/bevy/pull/13889
Description:
# Objective

Right not bevy's task pool abstraction is kind of useless on wasm, since it returns a `FakeTask` which can't be interacted with. This is only good for fire-and-forget it tasks, and isn't even that useful since it's just a thin wrapper around `wasm-bindgen-futures::spawn_local`

## Solution

Add a simple `Task<T>` handler type to wasm targets that allow waiting for a task's output or periodically checking for its completion. This PR aims to give the wasm version of these tasks feature parity with the native, multi-threaded version of the task

## Testing

- Did you test these changes? *Not yet*


----------------------------------------

PR #14034: Track source location in change detection
Author: aevyrie
Merged at: 2024-07-30 12:17:46+00:00
URL: https://github.com/bevyengine/bevy/pull/14034
Description:
# Objective

- Make it possible to know *what* changed your component or resource.
- Common need when debugging, when you want to know the last code location that mutated a value in the ECS.
- This feature would be very useful for the editor alongside system stepping.

## Solution

- Adds the caller location to column data.
- Mutations now `track_caller` all the way up to the public API.
- Commands that invoke these functions immediately call `Location::caller`, and pass this into the functions, instead of the functions themselves attempting to get the caller. This would not work for commands which are deferred, as the commands are executed by the scheduler, not the user's code.

## Testing

- The `component_change_detection` example now shows where the component was mutated: 

```
2024-07-28T06:57:48.946022Z  INFO component_change_detection: Entity { index: 1, generation: 1 }: New value: MyComponent(0.0)
2024-07-28T06:57:49.004371Z  INFO component_change_detection: Entity { index: 1, generation: 1 }: New value: MyComponent(1.0)
2024-07-28T06:57:49.012738Z  WARN component_change_detection: Change detected!
        -> value: Ref(MyComponent(1.0))
        -> added: false
        -> changed: true
        -> changed by: examples/ecs/component_change_detection.rs:36:23
```

- It's also possible to inspect change location from a debugger:
<img width="608" alt="image" src="https://github.com/user-attachments/assets/c90ecc7a-0462-457a-80ae-42e7f5d346b4">


---

## Changelog

- Added source locations to ECS change detection behind the `track_change_detection` flag.

## Migration Guide

- Added `changed_by` field to many internal ECS functions used with change detection when the `track_change_detection` feature flag is enabled. Use Location::caller() to provide the source of the function call.

----------------------------------------

PR #13014: Dedicated `Reflect` implementation for `Set`-like things
Author: RobWalt
Merged at: 2024-07-24 19:59:26+00:00
URL: https://github.com/bevyengine/bevy/pull/13014
Description:
# Objective

I just wanted to inspect `HashSet`s in `bevy-inspector-egui` but I noticed that it didn't work for some reason. A few minutes later I found myself looking into the bevy reflect impls noticing that `HashSet`s have been covered only rudimentary up until now.

## Solution

I'm not sure if this is overkill (especially the first bullet), but here's a list of the changes:

- created a whole new trait and enum variants for `ReflectRef` and the like called `Set`
- mostly oriented myself at the `Map` trait and made the necessary changes until RA was happy
- create macro `impl_reflect_for_hashset!` and call it on `std::HashSet` and `hashbrown::HashSet`

Extra notes:

- no `get_mut` or `get_mut_at` mirroring the `std::HashSet`
- `insert[_boxed]` and `remove` return `bool` mirroring `std::HashSet`, additionally that bool is reflect as I thought that would be how we handle things in bevy reflect, but I'm not sure on this
- ser/de are handled via `SeqAccess`
- I'm not sure about the general deduplication property of this impl of `Set` that is generally expected? I'm also not sure yet if `Map` does provide this. This mainly refers to the `Dynamic[...]` structs
- I'm not sure if there are other methods missing from the `trait`, I felt like `contains` or the set-operations (union/diff/...) could've been helpful, but I wanted to get out the bare minimum for feedback first

---

## Changelog

### Added
- `Set` trait for `bevy_reflect`

### Changed
- `std::collections::HashSet` and `bevy_utils::hashbrown::HashSet` now implement a more complete set of reflect functionalities instead of "just" `reflect_value`
- `TypeInfo` contains a new variant `Set` that contains `SetInfo`
- `ReflectKind` contains a new variant `Set`
- `ReflectRef` contains a new variant `Set`
- `ReflectMut` contains a new variant `Set`
- `ReflectOwned` contains a new variant `Set`

## Migration Guide

- The new `Set` variants on the enums listed in the change section should probably be considered by people working with this level of the lib
### Help wanted! 

I'm not sure if this change is able to break code. From my understanding it shouldn't since we just add functionality but I'm not sure yet if theres anything missing from my impl that would be normally provided by `impl_reflect_value!`

----------------------------------------

PR #14106: Cyclic splines
Author: mweatherley
Merged at: 2024-07-17 13:19:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14106
Description:
# Objective

Fill a gap in the functionality of our curve constructions by allowing users to easily build cyclic curves from control data.

## Solution

Here I opted for something lightweight and discoverable. There is a new `CyclicCubicGenerator` trait with a method `to_curve_cyclic` which uses splines' control data to create curves that are cyclic. For now, its signature is exactly like that of `CubicGenerator` ‚Äî `to_curve_cyclic` just yields a `CubicCurve`:
```rust
/// Implement this on cubic splines that can generate a cyclic cubic curve from their spline parameters.
///
/// This makes sense only when the control data can be interpreted cyclically.
pub trait CyclicCubicGenerator<P: VectorSpace> {
    /// Build a cyclic [`CubicCurve`] by computing the interpolation coefficients for each curve segment.
    fn to_curve_cyclic(&self) -> CubicCurve<P>;
}
```

This trait has been implemented for `CubicHermite`, `CubicCardinalSpline`, `CubicBSpline`, and `LinearSpline`:

<img width="753" alt="Screenshot 2024-07-01 at 8 58 27 PM" src="https://github.com/bevyengine/bevy/assets/2975848/69ae0802-3b78-4fb9-b73a-6f842cf3b33c">
<img width="628" alt="Screenshot 2024-07-01 at 9 00 14 PM" src="https://github.com/bevyengine/bevy/assets/2975848/2992175a-a96c-40fc-b1a1-5206c3572cde">
<img width="606" alt="Screenshot 2024-07-01 at 8 59 36 PM" src="https://github.com/bevyengine/bevy/assets/2975848/9e99eb3a-dbe6-42da-886c-3d3e00410d03">
<img width="603" alt="Screenshot 2024-07-01 at 8 59 01 PM" src="https://github.com/bevyengine/bevy/assets/2975848/d037bc0c-396a-43af-ab5c-fad9a29417ef">

(Each type pictured respectively with the control points rendered as green spheres; tangents not pictured in the case of the Hermite spline.)

These curves are all parametrized so that the output of `to_curve` and the output of `to_curve_cyclic` are similar. For instance, in `CubicCardinalSpline`, the first output segment is a curve segment joining the first and second control points in each, although it is constructed differently. In the other cases, the segments from `to_curve` are a subset of those in `to_curve_cyclic`, with the new segments appearing at the end. 

## Testing

I rendered cyclic splines from control data and made sure they looked reasonable. Existing tests are intact for splines where previous code was modified. (Note that the coefficient computation for cyclic spline segments is almost verbatim identical to that of their non-cyclic counterparts.)

The Bezier benchmarks also look fine.

---

## Changelog

- Added `CyclicCubicGenerator` trait to `bevy_math::cubic_splines` for creating cyclic curves from control data.
- Implemented `CyclicCubicGenerator` for `CubicHermite`, `CubicCardinalSpline`, `CubicBSpline`, and `LinearSpline`.
- `bevy_math` now depends on `itertools`.

---

## Discussion

### Design decisions

The biggest thing here is just the approach taken in the first place: namely, the cyclic constructions use new methods on the same old structs. This choice was made to reduce friction and increase discoverability but also because creating new ones just seemed unnecessary: the underlying data would have been the same, so creating something like "`CyclicCubicBSpline`" whose internally-held control data is regarded as cyclic in nature doesn't really accomplish much ‚Äî the end result for the user is basically the same either way.

Similarly, I don't presently see a pressing need for `to_curve_cyclic` to output something other than a `CubicCurve`, although changing this in the future may be useful. See below.

A notable omission here is that `CyclicCubicGenerator` is not implemented for `CubicBezier`. This is not a gap waiting to be filled ‚Äî `CubicBezier` just doesn't have enough data to join its start with its end without just making up the requisite control points wholesale. In all the cases where `CyclicCubicGenerator` has been implemented here, the fashion in which the ends are connected is quite natural and follows the semantics of the associated spline construction.

### Future direction

There are two main things here:
1. We should investigate whether we should do something similar for NURBS. I just don't know that much about NURBS at the moment, so I regarded this as out of scope for the PR.
2. We may eventually want to change the output type of `CyclicCubicGenerator::to_curve_cyclic` to a type which reifies the cyclic nature of the curve output. This wasn't done in this PR because I'm unsure how much value a type-level guarantee of cyclicity actually has, but if some useful features make sense only in the case of cyclic curves, this might be worth pursuing. 
----------------------------------------

PR #14257: Pack multiple vertex and index arrays together into growable buffers.
Author: pcwalton
Merged at: 2024-07-16 20:50:06+00:00
URL: https://github.com/bevyengine/bevy/pull/14257
Description:
This commit uses the [`offset-allocator`] crate to combine vertex and index arrays from different meshes into single buffers. Since the primary source of `wgpu` overhead is from validation and synchronization when switching buffers, this significantly improves Bevy's rendering performance on many scenes.

This patch is a more flexible version of #13218, which also used slabs. Unlike #13218, which used slabs of a fixed size, this commit implements slabs that start small and can grow. In addition to reducing memory usage, supporting slab growth reduces the number of vertex and index buffer switches that need to happen during rendering, leading to improved performance. To prevent pathological fragmentation behavior, slabs are capped to a maximum size, and mesh arrays that are too large get their own dedicated slabs.

As an additional improvement over #13218, this commit allows the application to customize all allocator heuristics. The `MeshAllocatorSettings` resource contains values that adjust the minimum and maximum slab sizes, the cutoff point at which meshes get their own dedicated slabs, and the rate at which slabs grow. Hopefully-sensible defaults have been chosen for each value.

Unfortunately, WebGL 2 doesn't support the *base vertex* feature, which is necessary to pack vertex arrays from different meshes into the same buffer. `wgpu` represents this restriction as the downlevel flag `BASE_VERTEX`. This patch detects that bit and ensures that all vertex buffers get dedicated slabs on that platform. Even on WebGL 2, though, we can combine all *index* arrays into single buffers to reduce buffer changes, and we do so.

The following measurements are on Bistro:

Overall frame time improves from 8.74 ms to 5.53 ms (1.58x speedup):
![Screenshot 2024-07-09 163521](https://github.com/bevyengine/bevy/assets/157897/5d83c824-c0ee-434c-bbaf-218ff7212c48)

Render system time improves from 6.57 ms to 3.54 ms (1.86x speedup):
![Screenshot 2024-07-09 163559](https://github.com/bevyengine/bevy/assets/157897/d94e2273-c3a0-496a-9f88-20d394129610)

Opaque pass time improves from 4.64 ms to 2.33 ms (1.99x speedup):
![Screenshot 2024-07-09 163536](https://github.com/bevyengine/bevy/assets/157897/e4ef6e48-d60e-44ae-9a71-b9a731c99d9a)

## Migration Guide

### Changed

* Vertex and index buffers for meshes may now be packed alongside other buffers, for performance.
* `GpuMesh` has been renamed to `RenderMesh`, to reflect the fact that it no longer directly stores handles to GPU objects.
* Because meshes no longer have their own vertex and index buffers, the responsibility for the buffers has moved from `GpuMesh` (now called `RenderMesh`) to the `MeshAllocator` resource. To access the vertex data for a mesh, use `MeshAllocator::mesh_vertex_slice`. To access the index data for a mesh, use `MeshAllocator::mesh_index_slice`.

[`offset-allocator`]: https://github.com/pcwalton/offset-allocator
----------------------------------------

PR #14099: Allow volumetric fog to be localized to specific, optionally voxelized, regions.
Author: pcwalton
Merged at: 2024-07-16 03:30:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14099
Description:
Currently, volumetric fog is global and affects the entire scene uniformly. This is inadequate for many use cases, such as local smoke effects. To address this problem, this commit introduces *fog volumes*, which are axis-aligned bounding boxes (AABBs) that specify fog parameters inside their boundaries. Such volumes can also specify a *density texture*, a 3D texture of voxels that specifies the density of the fog at each point.

To create a fog volume, add a `FogVolume` component to an entity (which is included in the new `FogVolumeBundle` convenience bundle). Like light probes, a fog volume is conceptually a 1√ó1√ó1 cube centered on the origin; a transform can be used to position and resize this region. Many of the fields on the existing `VolumetricFogSettings` have migrated to the new `FogVolume` component. `VolumetricFogSettings` on a camera is still needed to enable volumetric fog. However, by itself `VolumetricFogSettings` is no longer sufficient to enable volumetric fog; a `FogVolume` must be present. Applications that wish to retain the old global fog behavior can simply surround the scene with a large fog volume.

By way of implementation, this commit converts the volumetric fog shader from a full-screen shader to one applied to a mesh. The strategy is different depending on whether the camera is inside or outside the fog volume. If the camera is inside the fog volume, the mesh is simply a plane scaled to the viewport, effectively falling back to a full-screen pass. If the camera is outside the fog volume, the mesh is a cube transformed to coincide with the boundaries of the fog volume's AABB. Importantly, in the latter case, only the front faces of the cuboid are rendered. Instead of treating the boundaries of the fog as a sphere centered on the camera position, as we did prior to this patch, we raytrace the far planes of the AABB to determine the portion of each ray contained within the fog volume. We then raymarch in shadow map space as usual. If a density texture is present, we modulate the fixed density value with the trilinearly-interpolated value from that texture.

Furthermore, this patch introduces optional jitter to fog volumes, intended for use with TAA. This modifies the position of the ray from frame to frame using interleaved gradient noise, in order to reduce aliasing artifacts. Many implementations of volumetric fog in games use this technique. Note that this patch makes no attempt to write a motion vector; this is because when a view ray intersects multiple voxels there's no single direction of motion. Consequently, fog volumes can have ghosting artifacts, but because fog is "ghostly" by its nature, these artifacts are less objectionable than they would be for opaque objects.

A new example, `fog_volumes`, has been added. It demonstrates a single fog volume containing a voxelized representation of the Stanford bunny. The existing `volumetric_fog` example has been updated to use the new local volumetrics API.

## Changelog

### Added

* Local `FogVolume`s are now supported, to localize fog to specific regions. They can optionally have 3D density voxel textures for precise control over the distribution of the fog.

### Changed

* `VolumetricFogSettings` on a camera no longer enables volumetric fog; instead, it simply enables the processing of `FogVolume`s within the scene.

## Migration Guide

* A `FogVolume` is now necessary in order to enable volumetric fog, in addition to `VolumetricFogSettings` on the camera. Existing uses of volumetric fog can be migrated by placing a large `FogVolume` surrounding the scene.

----------------------------------------

PR #14212: Component Lifecycle Hook & Observer Trigger for replaced values
Author: BigWingBeat
Merged at: 2024-07-15 15:38:28+00:00
URL: https://github.com/bevyengine/bevy/pull/14212
Description:
# Objective

Fixes #14202

## Solution

Add `on_replaced` component hook and `OnReplaced` observer trigger

## Testing

- Did you test these changes? If so, how?
  - Updated & added unit tests

---

## Changelog

- Added new `on_replaced` component hook and `OnReplaced` observer trigger for performing cleanup on component values when they are overwritten with `.insert()`
----------------------------------------

PR #13695: Start a built-in postprocessing stack, and implement chromatic aberration in it.
Author: pcwalton
Merged at: 2024-07-15 14:14:06+00:00
URL: https://github.com/bevyengine/bevy/pull/13695
Description:
This commit creates a new built-in postprocessing shader that's designed to hold miscellaneous postprocessing effects, and starts it off with chromatic aberration. Possible future effects include vignette, film grain, and lens distortion.

[Chromatic aberration] is a common postprocessing effect that simulates lenses that fail to focus all colors of light to a single point. It's often used for impact effects and/or horror games. This patch uses the technique from *Inside* ([Gj√∏l & Svendsen 2016]), which allows the developer to customize the particular color pattern to achieve different effects. Unity HDRP uses the same technique, while Unreal has a hard-wired fixed color pattern.

A new example, `post_processing`, has been added, in order to demonstrate the technique. The existing `post_processing` shader has been renamed to `custom_post_processing`, for clarity.

[Chromatic aberration]: https://en.wikipedia.org/wiki/Chromatic_aberration

[Gj√∏l & Svendsen 2016]: https://github.com/playdeadgames/publications/blob/master/INSIDE/rendering_inside_gdc2016.pdf

![Screenshot 2024-06-04 180304](https://github.com/bevyengine/bevy/assets/157897/3631c64f-a615-44fe-91ca-7f04df0a54b2)

![Screenshot 2024-06-04 180743](https://github.com/bevyengine/bevy/assets/157897/ee055cbf-4314-49c5-8bfa-8d8a17bd52bb)

## Changelog

### Added

* Chromatic aberration is now available as a built-in postprocessing effect. To use it, add `ChromaticAberration` to your camera.
----------------------------------------

PR #13991: Minimal Bubbling Observers
Author: NthTensor
Merged at: 2024-07-15 13:55:34+00:00
URL: https://github.com/bevyengine/bevy/pull/13991
Description:
# Objective

Add basic bubbling to observers, modeled off `bevy_eventlistener`.

## Solution

- Introduce a new `Traversal` trait for components which point to other entities.
- Provide a default `TraverseNone: Traversal` component which cannot be constructed.
- Implement `Traversal` for `Parent`.
- The `Event` trait now has an associated `Traversal` which defaults to `TraverseNone`.
- Added a field `bubbling: &mut bool` to `Trigger` which can be used to instruct the runner to bubble the event to the entity specified by the event's traversal type.
- Added an associated constant `SHOULD_BUBBLE` to `Event` which configures the default bubbling state.
- Added logic to wire this all up correctly.

Introducing the new associated information directly on `Event` (instead of a new `BubblingEvent` trait) lets us dispatch both bubbling and non-bubbling events through the same api.

## Testing

I have added several unit tests to cover the common bugs I identified during development. Running the unit tests should be enough to validate correctness. The changes effect unsafe portions of the code, but should not change any of the safety assertions. 

## Changelog

Observers can now bubble up the entity hierarchy! To create a bubbling event, change your `Derive(Event)` to something like the following:

```rust
#[derive(Component)]
struct MyEvent;

impl Event for MyEvent {
    type Traverse = Parent; // This event will propagate up from child to parent.
    const AUTO_PROPAGATE: bool = true; // This event will propagate by default.
}
```

You can dispatch a bubbling event using the normal `world.trigger_targets(MyEvent, entity)`. 

Halting an event mid-bubble can be done using `trigger.propagate(false)`. Events with `AUTO_PROPAGATE = false` will not propagate by default, but you can enable it using `trigger.propagate(true)`.

If there are multiple observers attached to a target, they will all be triggered by bubbling. They all share a bubbling state, which can be accessed mutably using `trigger.propagation_mut()` (`trigger.propagate` is just sugar for this). 

You can choose to implement `Traversal` for your own types, if you want to bubble along a different structure than provided by `bevy_hierarchy`. Implementers must be careful never to produce loops, because this will cause bevy to hang. 

## Migration Guide
+ Manual implementations of `Event` should add associated type `Traverse = TraverseNone` and associated constant `AUTO_PROPAGATE = false`;
+ `Trigger::new` has new field `propagation: &mut Propagation` which provides the bubbling state.
+ `ObserverRunner` now takes the same `&mut Propagation` as a final parameter.

----------------------------------------

PR #14269: Basic isometry types
Author: mweatherley
Merged at: 2024-07-14 15:43:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14269
Description:
# Objective

Introduce isometry types for describing relative and absolute position in mathematical contexts.

## Solution

For the time being, this is a very minimal implementation. This implements the following faculties for two- and three-dimensional isometry types:
- Identity transformations
- Creation from translations and/or rotations
- Inverses
- Multiplication (composition) of isometries with each other
- Application of isometries to points (as vectors)
- Conversion of isometries to affine transformations

There is obviously a lot more that could be added, so I erred on the side of adding things that I knew would be useful, with the idea of expanding this in the near future as needed.

(I also fixed some random doc problems in `bevy_math`.)

---

## Design

One point of interest here is the matter of if/when to use aligned types. In the implementation of 3d isometries, I used `Vec3A` rather than `Vec3` because it has no impact on size/alignment, but I'm still not sure about that decision (although it is easily changed). 

For 2d isometries ‚Äî which are encoded by four floats ‚Äî the idea of shoving them into a single 128-bit buffer (`__m128` or whatever) sounds kind of enticing, but it's more involved and would involve writing unsafe code, so I didn't do that for now. 

## Future work

- Expand the API to include shortcuts like `inverse_mul` and `inverse_transform` for efficiency reasons.
- Include more convenience constructors and methods (e.g. `from_xy`, `from_xyz`).
- Refactor `bevy_math::bounding` to use the isometry types.
- Add conversions to/from isometries for `Transform`/`GlobalTransform` in `bevy_transform`.
----------------------------------------

PR #13818: Created an EventMutator for when you want to mutate an event before reading
Author: BobG1983
Merged at: 2024-07-08 15:10:07+00:00
URL: https://github.com/bevyengine/bevy/pull/13818
Description:
# Objective

- Often in games you will want to create chains of systems that modify some event. For example, a chain of damage systems that handle a DamageEvent and modify the underlying value before the health system finally consumes the event. Right now this requires either:

* Using a component added to the entity
* Consuming and refiring events

Neither is ideal when really all we want to do is read the events value, modify it, and write it back.

## Solution

- Create an EventMutator class similar to EventReader but with ResMut<T> and iterators that return &mut so that events can be mutated.

## Testing

- I replicated all the existing tests for EventReader to make sure behavior was the same (I believe) and added a number of tests specific to testing that 1) events can actually be mutated, and that 2) EventReader sees changes from EventMutator for events it hasn't already seen.

## Migration Guide

Users currently using `ManualEventReader` should use `EventCursor` instead. `ManualEventReader` will be removed in Bevy 0.16. Additionally, `Events::get_reader` has been replaced by `Events::get_cursor`.

Users currently directly accessing the `Events` resource for mutation should move to `EventMutator` if possible. 



----------------------------------------

PR #14071: Uniform mesh sampling
Author: mweatherley
Merged at: 2024-07-08 01:25:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14071
Description:
# Objective

Allow random sampling from the surfaces of triangle meshes.

## Solution

This has two parts.

Firstly, rendering meshes can now yield their collections of triangles through a method `Mesh::triangles`. This has signature
```rust
pub fn triangles(&self) -> Result<Vec<Triangle3d>, MeshTrianglesError> { //... }
```

and fails in a variety of cases ‚Äî the most obvious of these is that the mesh must have either the `TriangleList` or `TriangleStrip` topology, and the others correspond to malformed vertex or triangle-index data.

With that in hand, we have the second piece, which is `UniformMeshSampler`, which is a `Vec3`-valued [distribution](https://docs.rs/rand/latest/rand/distributions/trait.Distribution.html) that samples uniformly from collections of triangles. It caches the triangles' distribution of areas so that after its initial setup, sampling is allocation-free. It is constructed via `UniformMeshSampler::try_new`, which looks like this:
```rust
pub fn try_new<T: Into<Vec<Triangle3d>>>(triangles: T) -> Result<Self, ZeroAreaMeshError> { //... }
```

It fails if the collection of triangles has zero area. 

The sum of these parts means that you can sample random points from a mesh as follows:
```rust
let triangles = my_mesh.triangles().unwrap();
let mut rng = StdRng::seed_from_u64(8765309);
let distribution = UniformMeshSampler::try_new(triangles).unwrap();
// 10000 random points from the surface of my_mesh:
let sample_points: Vec<Vec3> = distribution.sample_iter(&mut rng).take(10000).collect();
```

## Testing

Tested by instantiating meshes and sampling as demonstrated above.

---

## Changelog

- Added `Mesh::triangles` method to get a collection of triangles from a mesh.
- Added `UniformMeshSampler` to `bevy_math::sampling`. This is a distribution which allows random sampling over collections of triangles (such as those provided through meshes).

---

## Discussion

### Design decisions

The main thing here was making sure to have a good separation between the parts of this in `bevy_render` and in `bevy_math`. Getting the triangles from a mesh seems like a reasonable step after adding `Triangle3d` to `bevy_math`, so I decided to make all of the random sampling operate at that level, with the fallible conversion to triangles doing most of the work.

Notably, the sampler could be called something else that reflects that its input is a collection of triangles, but if/when we add other kinds of meshes to `bevy_math` (e.g. half-edge meshes), the fact that `try_new` takes an `impl Into<Vec<Triangle3d>>` means that those meshes just need to satisfy that trait bound in order to work immediately with this sampling functionality. In that case, the result would just be something like this:
```rust
let dist = UniformMeshSampler::try_new(mesh).unwrap();
```
I think this highlights that most of the friction is really just from extracting data from `Mesh`. 

It's maybe worth mentioning also that "collection of triangles" (`Vec<Triangle3d>`) sits downstream of any other kind of triangle mesh, since the topology connecting the triangles has been effectively erased, which makes an `Into<Vec<Triangle3d>>` trait bound seem all the more natural to me.

----------------------------------------

PR #10193: Cosmic text
Author: TotalKrill
Merged at: 2024-07-04 20:57:56+00:00
URL: https://github.com/bevyengine/bevy/pull/10193
Description:
# Replace ab_glyph with the more capable cosmic-text

Fixes #7616.

Cosmic-text is a more mature text-rendering library that handles scripts and ligatures better than ab_glyph, it can also handle system fonts which can be implemented in bevy in the future

Rebase of https://github.com/bevyengine/bevy/pull/8808

## Changelog

Replaces text renderer ab_glyph with cosmic-text

The definition of the font size has changed with the migration to cosmic text. The behavior is now consistent with other platforms (e.g. the web), where the font size in pixels measures the height of the font (the distance between the top of the highest ascender and the bottom of the lowest descender). Font sizes in your app need to be rescaled to approximately 1.2x smaller; for example, if you were using a font size of 60.0, you should now use a font size of 50.0.

## Migration guide

- `Text2dBounds` has been replaced with `TextBounds`, and it now accepts `Option`s to the bounds, instead of using `f32::INFINITY` to inidicate lack of bounds
- Textsizes should be changed, dividing the current size with 1.2 will result in the same size as before.
- `TextSettings` struct is removed
- Feature `subpixel_alignment` has been removed since cosmic-text already does this automatically
- TextBundles and things rendering texts requires the `CosmicBuffer` Component on them as well

## Suggested followups:

- TextPipeline: reconstruct byte indices for keeping track of eventual cursors in text input
- TextPipeline: (future work) split text entities into section entities
- TextPipeline: (future work) text editing
- Support line height as an option. Unitless `1.2` is the default used in browsers (1.2x font size).
- Support System Fonts and font families
- Example showing of animated text styles. Eg. throbbing hyperlinks 

----------------------------------------

PR #14317: remove rounded_borders and merge with borders example
Author: ChristopherBiscardi
Merged at: 2024-07-15 17:10:47+00:00
URL: https://github.com/bevyengine/bevy/pull/14317
Description:
# Objective

The borders example is separate from the rounded borders example. If you find the borders example, you may miss the rounded borders example.

## Solution

Merge the examples in a basic way, since there is enough room to show all options at the same time.

I also considered renaming the borders and rounded borders examples so that they would be located next to each other in repo and UI, but it felt like having a singular example was better.

## Testing

```
cargo run --example borders
```

---

## Showcase

The merged example looks like this:

![screenshot-2024-07-14-at-13 40 10@2x](https://github.com/user-attachments/assets/0f49cc46-1ca0-40d0-abec-020cbf0fb205)

----------------------------------------

PR #14155: Dirty fix for App hanging when windows are invisible on WindowsOS
Author: MiniaczQ
Merged at: 2024-07-14 17:02:42+00:00
URL: https://github.com/bevyengine/bevy/pull/14155
Description:
# Objective

- Fixes #14135 

## Solution

- If no windows are visible, app updates will run regardless of redraw call result.

This a relatively dirty fix, a more robust solution is desired in the long run:
https://github.com/bevyengine/bevy/issues/1343#issuecomment-770091684
https://discord.com/channels/691052431525675048/1253771396832821270/1258805997011730472
The solution would disconnect rendering from app updates.

## Testing

- `window_settings` now works

## Other platforms

Not a problem on Linux: https://discord.com/channels/691052431525675048/692572690833473578/1259526650622640160
Not a problem on MacOS: https://discord.com/channels/691052431525675048/692572690833473578/1259563986148659272

----------------------------------------

PR #14543: Fix lints in nightly
Author: richchurcher
Merged at: 2024-07-31 01:51:26+00:00
URL: https://github.com/bevyengine/bevy/pull/14543
Description:
# Objective

Similar to #14537 , this fixes a minor lint issue causing CI failures when using nightly toolchain.

## Solution

Add `#[allow(dead_code)]` to unused sample code.

## Testing

`cargo run -p ci -- lints` using 1.82 toolchain.
----------------------------------------

PR #14544: time_system is ambiguous_with event_update_system
Author: richchurcher
Merged at: 2024-07-31 12:29:54+00:00
URL: https://github.com/bevyengine/bevy/pull/14544
Description:
# Objective

Resolve possible ambiguity detection panic between `time_system` and `event_update_system`.

Fixes #14524

## Solution

Sets `.ambiguous_with(event_update_system)` on `time_system`. This is slightly new territory for me, so please treat with scepticism.

## Testing

As described in the issue, added
```
        .configure_schedules(ScheduleBuildSettings {
            ambiguity_detection: LogLevel::Error,
            ..default()
        })
```
to the `time` example and ran it.
----------------------------------------

PR #14287: Set scissor on upscale to match camera viewport
Author: tychedelia
Merged at: 2024-07-20 17:02:20+00:00
URL: https://github.com/bevyengine/bevy/pull/14287
Description:
# Objective

When the user renders multiple cameras to the same output texture, it can sometimes be confusing what `ClearColorConfig` is necessary for each camera to avoid overwriting the previous camera's output. This is particular true in cases where the user uses mixed HDR cameras, which means that their scene is being rendered to different internal textures.

## Solution

When a view has a configured viewport, set the GPU scissor in the upscaling node so we don't overwrite areas that were written to by other cameras.

## Testing

Ran the `split_screen` example.

----------------------------------------

PR #14534: Remove deprecated `bevy_dynamic_plugin`
Author: BD103
Merged at: 2024-07-30 15:46:48+00:00
URL: https://github.com/bevyengine/bevy/pull/14534
Description:
# Objective

- Dynamic plugins were deprecated in #13080 due to being unsound. The plan was to deprecate them in 0.14 and remove them in 0.15.

## Solution

- Remove all dynamic plugin functionality.
- Update documentation to reflect this change.

---

## Migration Guide

Dynamic plugins were deprecated in 0.14 for being unsound, and they have now been fully removed. Please consider using the alternatives listed in the `bevy_dynamic_plugin` crate documentation, or worst-case scenario you may copy the code from 0.14.
----------------------------------------

PR #14574: Don‚Äôt prepare lights (and shadow map textures) for 2D cameras
Author: brianreavis
Merged at: 2024-08-01 19:44:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14574
Description:
# Objective

When running the Metal debugger I noticed that 2D cameras have shadow map textures from `bevy_pbr` built for them. For a 2560x1440 2D camera, this PR saves about 40mb of texture memory.

![image](https://github.com/user-attachments/assets/925e9392-2721-41bb-83e9-25c84fd563cd)

![image](https://github.com/user-attachments/assets/0cc3c0a9-cbf7-431c-b444-952c28d4e9d0)


## Solution

- Added `With<Camera3d>` filter to the appropriate view queries.

## Testing

- This is a trivial fix (the examples still work)

----------------------------------------

PR #14198: Remove need for EventLoopProxy to be NonSend
Author: hymm
Merged at: 2024-07-16 07:13:47+00:00
URL: https://github.com/bevyengine/bevy/pull/14198
Description:
# Objective

- Continue to pare down the uses on NonSend resources in the engine. In this case, EventLoopProxy used to be `!Sync`, but is now `Sync` in the latest version of winit.

## Solution

- New type `EventLoopProxy` as `EventLoopProxyWrapper` to make it into a normal resource.
- Update the `custom_user_event` example as it no longer needs to indirectly access the `EventLoopProxy` through a static variable anymore.

## Testing

- Ran the example. The resource exists just for users to use, so there aren't any in engine uses for it currently.

---

## Changelog

- make EventLoopProxy into a regular resource. 

## Migration Guide

`EventLoopProxy` has been renamed to `EventLoopProxyWrapper` and is now `Send`, making it an ordinary resource.

Before:
```rust
event_loop_system(event_loop: NonSend<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
```

After:
```rust
event_loop_system(event_loop: Res<EventLoopProxy<MyEvent>>) {
    event_loop.send_event(MyEvent);
}
```
----------------------------------------

PR #14164: use Display for entity id in log_components
Author: hymm
Merged at: 2024-07-08 01:25:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14164
Description:
# Objective

- Cleanup a doubled `Entity` in log components

```
// Before
2024-07-05T19:54:09.082773Z  INFO bevy_ecs::system::commands: Entity Entity { index: 2, generation: 1 }: ["bevy_transform::components::transform::Transform"]

// After
2024-07-05T19:54:09.082773Z  INFO bevy_ecs::system::commands: Entity 2v1: ["bevy_transform::components::transform::Transform"]
```
----------------------------------------

PR #14163: add entity to error message
Author: hymm
Merged at: 2024-07-08 01:25:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14163
Description:
# Objective

- There was a new warning added about having an unstyled child in the ui hierarchy. Debugging the new error is pretty hard without any info about which entity is.

## Solution

- Add the entity id to the warning.

```text
// Before
2024-07-05T19:40:59.904014Z  WARN bevy_ui::layout::ui_surface: Unstyled child in a UI entity hierarchy. You are using an entity without UI components as a child of an entity with UI components, results may be unexpected.

//After
2024-07-05T19:40:59.904014Z  WARN bevy_ui::layout::ui_surface: Unstyled child `3v1` in a UI entity hierarchy. You are using an entity without UI components as a child of an entity with UI components, results may be unexpected.
```

## Changelog

- add entity id to ui surface warning
----------------------------------------

PR #14590: Add `depth_ndc_to_view_z` for cpu-side
Author: DasLixou
Merged at: 2024-08-02 15:54:19+00:00
URL: https://github.com/bevyengine/bevy/pull/14590
Description:
# Objective

I want to get the visual depth (after view proj matrix stuff) of the object beneath my cursor.
Even when having a write-back of the depth texture, you would still need to convert the NDC depth to a logical value.

## Solution

This is done on shader-side by [this function](https://github.com/bevyengine/bevy/blob/e6261b0f5f1124ffa67b8fe9a2d24a2047795192/crates/bevy_pbr/src/render/view_transformations.wgsl#L151), which I ported over to the cpu-side.

I also added `world_to_viewport_with_depth` to get a `Vec3` instead of `Vec2`.

---

If anyone knows a smarter solution to get the visual depth instead of going `screen -> viewport ray -> screen`, please let me know :>
----------------------------------------

PR #14546: Make `AnimationPlayer::start` and `::play` work accordingly to documentation
Author: DasLixou
Merged at: 2024-07-31 14:23:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14546
Description:
# Objective

While scrolling through the animation crate, I was confused by the docs and code for the two methods. One does nothing for resetting an animation, the other just resets the weights for whatever reason.

## Solution

Made the functions work accordingly to their documentation.
`start` now replays the animation.
And `play` doesn't reset the weight anymore. I have no clue why it should. `play` is there to don't do anything to an already existing animation.

## Testing

I tested the current 0.14 code with bevy playground in the Animated Fox exampled and changed it such that on pressing space, either `play` or `start` would be called. Neither changed anything.
I then inlined the function for start there and it restarted the animation, so it should work.

---

## Migration Guide

`AnimationPlayer::start` now correspondingly to its docs restarts a running animation.
`AnimationPlayer::play` doesn't reset the weight anymore.
----------------------------------------

PR #14411: Fix repeated animation transition bug
Author: Dentosal
Merged at: 2024-07-22 19:38:10+00:00
URL: https://github.com/bevyengine/bevy/pull/14411
Description:
# Objective

Fixes #13910

When a transition is over, the animation is stopped. There was a race condition; if an animation was started while it also had an active transition, the transition ending would then incorrectly stop the newly added animation.

## Solution

When starting an animation, cancel any previous transition for the same animation.

## Testing

The changes were tested manually, mainly by using the `animated_fox` example. I also tested with changes from https://github.com/bevyengine/bevy/pull/13909.

I'd like to have an unit test for this as well, but it seems quite complex to do, as I'm not sure how I would detect an incorrectly paused animation.

Reviewers can follow the instructions in #13910 to reproduce.

Tested on macos 14.4 (M3 processor) Should be platform-independent, though.
----------------------------------------

PR #14539: Fix Entity Debug Format
Author: Zeenobit
Merged at: 2024-07-31 01:53:31+00:00
URL: https://github.com/bevyengine/bevy/pull/14539
Description:
# Objective

Fixes #12139

## Solution

See this comment on original issue for my proposal:
https://github.com/bevyengine/bevy/issues/12139#issuecomment-2241915791

This PR is an implementation of this proposal.

I modified the implementation of `fmt::Debug` to instead display `0v0#12345` to ensure entity index, generation, and raw bits are all present in the output for debug purposes while still keeping log message concise.

`fmt::Display` remains as is (`0v0`) to offer an even shorter output.

To me, this is the most non-intrusive fix for this issue.

## Testing

Add `fn entity_debug` test

----------------------------------------

PR #14468: Fix hue mixing for `Lcha` and `Oklcha`
Author: benfrankel
Merged at: 2024-07-25 20:00:36+00:00
URL: https://github.com/bevyengine/bevy/pull/14468
Description:
# Objective

Fix erroneous hue mixing in `Lcha` and `Oklcha`. Purple + Red == Green is the current behavior (expected a reddish-purple).

## Solution

Use `crate::color_ops::lerp_hue` to handle the wrap-around at 360 degrees like `Hsla`, `Hsva`, and `Hwba` do.

## Testing

Game jamming, but tested that the workaround below produces correct-looking colors in my jam game.
----------------------------------------

PR #14421: Fix breaking image 0.25.2 release.
Author: tychedelia
Merged at: 2024-07-21 21:44:32+00:00
URL: https://github.com/bevyengine/bevy/pull/14421
Description:
Deprecated item breaking ci: https://github.com/image-rs/image/releases/tag/v0.25.2. See https://github.com/bevyengine/bevy/actions/runs/10030764981/job/27720434072?pr=14419 for example.
----------------------------------------

PR #14594: Add `with_child` to simplify spawning when there will only be one child
Author: rparrett
Merged at: 2024-08-02 15:54:19+00:00
URL: https://github.com/bevyengine/bevy/pull/14594
Description:
# Objective

This idea came up in the context of a hypothetical "text sections as entities" where text sections are children of a text bundle.

```rust
commands
    .spawn(TextBundle::default())
    .with_children(|parent| {
        parent.spawn(TextSection::from("Hello"));
    });
```

This is a bit cumbersome (but powerful and probably the way things are headed). [`bsn!`](https://github.com/bevyengine/bevy/discussions/14437) will eventually make this nicer, but in the mean time, this might improve ergonomics for the common case where there is only one `TextSection`.

## Solution

Add a `with_child` method to the `BuildChildren` trait that spawns a single bundle and adds it as a child to the entity.

```rust
commands
    .spawn(TextBundle::default())
    .with_child(TextSection::from("Hello"));
```

## Testing

I added some tests, and modified the `button` example to use the new method.

If any potential co-authors want to improve the tests, that would be great.

## Alternatives

- Some sort of macro. See https://github.com/tigregalis/bevy_spans_ent/blob/main/examples/macro.rs#L20. I don't love this, personally, and it would probably be obsoleted by `bsn!`.
- Wait for `bsn!`
- Add `with_children_batch` that takes an `Into<Iterator>` of bundles.
  ```rust
  with_children_batch(vec![TextSection::from("Hello")])
  ```
  This is maybe not as useful as it sounds -- it only works with homogeneous bundles, so no marker components or styles.
- If this doesn't seem valuable, doing nothing is cool with me.
----------------------------------------

PR #14588: Reflection for `DepthOfFieldSettings`
Author: DasLixou
Merged at: 2024-08-02 15:53:17+00:00
URL: https://github.com/bevyengine/bevy/pull/14588
Description:
# Objective

I can't mutate the dof settings via tools like `bevy_inspector_egui`

## Solution

Add `Reflect` for `DepthOfFieldSettings` and `DepthOfFieldMode`
----------------------------------------

PR #14587: Add `Dir2::from_xy_unchecked` and `Dir3::from_xyz_unchecked`
Author: Jondolf
Merged at: 2024-08-02 13:26:11+00:00
URL: https://github.com/bevyengine/bevy/pull/14587
Description:
# Objective

Bevy's direction types have `new` and `new_unchecked` constructors, but no unchecked variant for the `Dir2::from_xy` and `Dir3::from_xyz` methods.

For me, this has several times lead to constructing directions like this, in cases where the components of the direction are already known to be normalized:

```rust
let normal = Dir2::new_unchecked(Vec2::new(-ray.direction.x.signum(), 0.0));
```

```rust
segment.direction =
    Dir2::new_unchecked(Vec2::new(-segment.direction.x, segment.direction.y));
```

For consistency and ergonomics, it would be nice to have unchecked variants of `Dir2::from_xy` and `Dir3::from_xyz`:

```rust
let normal = Dir2::from_xy_unchecked(-ray.direction.x.signum(), 0.0);
```

```rust
segment.direction = Dir2::from_xy_unchecked(-segment.direction.x, segment.direction.y);
```

## Solution

Add `Dir2::from_xy_unchecked` and `Dir3::from_xyz_unchecked`.
----------------------------------------

PR #14296: Skip batching for phase items from other pipelines
Author: james-j-obrien
Merged at: 2024-08-02 00:34:12+00:00
URL: https://github.com/bevyengine/bevy/pull/14296
Description:
# Objective

- Fix #14295

## Solution

- Early out when `GFBD::get_index_and_compare_data` returns None.

## Testing

- Tested on a selection of examples including `many_foxes` and `3d_shapes`.
- Resolved the original issue in `bevy_vector_shapes`.

----------------------------------------

PR #14148: fix asymmetrical 9-slicing
Author: JJJimbo1
Merged at: 2024-08-01 20:20:03+00:00
URL: https://github.com/bevyengine/bevy/pull/14148
Description:
# Objective

Fixes #14147.

## Solution

Modify the slicing checks and algorithm to fully allow asymmetrical textures to work.
Some opinionated code cleanup.

## Testing

Tested using the ui_texture_slice example and a custom asymmetrical texture.

Before:
![asymmetrical_texture_slice_before](https://github.com/bevyengine/bevy/assets/88861660/00dafce1-904a-41ac-b5d9-faaf087b0681)

After:
![asymmetrical_texture_slice_after](https://github.com/bevyengine/bevy/assets/88861660/f3d742f3-6157-4d35-b383-aee4b8f6e7d0)

----------------------------------------

PR #14573: Properly handle repeated window close requests
Author: Brezak
Merged at: 2024-08-01 16:32:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14573
Description:
# Objective

Spamming the window close button on window may trigger a panic.

```
thread 'main' panicked at <Bevy repo>\crates\bevy_ecs\src\system\commands\mod.rs:1320:13:
error[B0003]: Could not insert a bundle (of type `bevy_window::window::ClosingWindow`) for entity 0v1#4294967296 because it doesn't exist in this World. See: https://bevyengine.org/learn/errors/b0003
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
Encountered a panic when applying buffers for system `bevy_window::system::close_when_requested`!
2024-08-01T15:00:29.742612Z  WARN bevy_ecs::world::command_queue: CommandQueue has un-applied commands being dropped. Did you forget to call SystemState::apply?
Encountered a panic in system `bevy_app::main_schedule::Main::run_main`!
error: process didn't exit successfully: `target\debug\bevy.exe` (exit code: 101)
```

## Solution

Don't panic when trying to insert the `ClosingWindow` component into a entity.

## Testing

Found and tested on windows. I haven't checked if this bug happens on linux or macos.
For testing I ran this code:

```rust
use std::{thread, time::Duration};

use bevy::prelude::*;

fn lag() {
    thread::sleep(Duration::from_millis(300));
}

fn main() -> AppExit {
    App::new()
        .add_plugins(DefaultPlugins)
        .add_systems(Update, lag)
        .run()
}
```

Then spammed the window close button. The panic no longer occurs.
----------------------------------------

PR #14553: Add freebsd support for sysinfo
Author: GuillaumeGomez
Merged at: 2024-07-31 21:57:40+00:00
URL: https://github.com/bevyengine/bevy/pull/14553
Description:
I'm not sure if bevy works on FreeBSD or not. But in case it does, better allow `sysinfo` to be used as well if users want.
----------------------------------------

PR #14556: B0003: Print caller
Author: SpecificProtagonist
Merged at: 2024-08-01 00:30:44+00:00
URL: https://github.com/bevyengine/bevy/pull/14556
Description:
# Objective

B0003 indicates that you tried to act upon a nonexistant entity, but does not mention where the error occured:
```
2024-07-31T15:46:25.954840Z  WARN bevy_ecs::world: error[B0003]: Could not despawn entity Entity { index: 4294967295, generation: 1 } because it doesn't exist in this World. See: https://bevyengine.org/learn/errors/b0003
```

## Solution

Include caller location:

```
2024-07-31T15:46:25.954840Z  WARN bevy_ecs::world: error[B0003]: src/main.rs:18:11: Could not despawn entity Entity { index: 4294967295, generation: 1 } because it doesn't exist in this World. See: https://bevyengine.org/learn/errors/b0003
```

Open question: What should the exact message format be?

## Testing

None, this doesn't change any logic.

----------------------------------------

PR #14564: remove changelog file
Author: mockersf
Merged at: 2024-07-31 22:41:33+00:00
URL: https://github.com/bevyengine/bevy/pull/14564
Description:
# Objective

- Remove CHANGELOG.md
- it's redundant with the release blog / the git log
- it's an extra step that may be forgotten in the release process (it was not updated for the 0.14)
- it's an extra file at the root

## Solution

- Remove it

----------------------------------------

PR #14562: Fix common capitalization errors in documentation
Author: janhohenheim
Merged at: 2024-07-31 21:31:56+00:00
URL: https://github.com/bevyengine/bevy/pull/14562
Description:
WASM -> Wasm
MacOS -> macOS

Nothing important, just something that annoyed me for a while :)
----------------------------------------

PR #14370: Add example showing how to use SpecializedMeshPipeline
Author: IceSentry
Merged at: 2024-07-31 18:42:30+00:00
URL: https://github.com/bevyengine/bevy/pull/14370
Description:
# Objective

- A lot of mid-level rendering apis are hard to figure out because they don't have any examples
- SpecializedMeshPipeline can be really useful in some cases when you want more flexibility than a Material without having to go to low level apis.

## Solution

- Add an example showing how to make a custom `SpecializedMeshPipeline`.

## Testing

- Did you test these changes? If so, how?
- Are there any parts that need more testing?
- How can other people (reviewers) test your changes? Is there anything specific they need to know?
- If relevant, what platforms did you test these changes on, and are there any important ones you can't test?

---

## Showcase

The examples just spawns 3 triangles in a triangle pattern.

![image](https://github.com/user-attachments/assets/c3098758-94c4-4775-95e5-1d7c7fb9eb86)

----------------------------------------

PR #14402: Disabled usage of the POLYGON_MODE_LINE gpu feature in the examples
Author: SarthakSingh31
Merged at: 2024-07-29 23:55:48+00:00
URL: https://github.com/bevyengine/bevy/pull/14402
Description:
Fixes #14353
Fixes #14371

----------------------------------------

PR #14551: Update sysinfo version to 0.31.0
Author: GuillaumeGomez
Merged at: 2024-07-31 14:23:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14551
Description:
This release will likely remove a few dependencies in bevy since you only need the `system` feature.
----------------------------------------

PR #13620: Fix UI texture atlas with offset
Author: s-puig
Merged at: 2024-07-30 15:49:32+00:00
URL: https://github.com/bevyengine/bevy/pull/13620
Description:
# Objective

- Fixes #11219 

## Solution

- Scaling calculations use texture dimensions instead of layout dimensions. 

## Testing

- Did you test these changes? If so, how?

All UI examples look fine.

- How can other people (reviewers) test your changes? Is there anything specific they need to know?

Example in #11219

## Migration Guide

```diff
let ui_node = ExtractedUiNode {
                    stack_index,
                    transform,
                    color,
                    rect,
                    image,
-                   atlas_size: Some(atlas_size * scale_factor),      
+                   atlas_scaling: Some(Vec2::splat(scale_factor)),
                    clip,
                    flip_x,
                    flip_y,
                    camera_entity,
                    border,
                    border_radius,
                    node_type,
                },
```

```diff
let computed_slices = ComputedTextureSlices {
    slices,
-    image_size,
}
```

----------------------------------------

PR #14537: Fix rust beta lints
Author: BD103
Merged at: 2024-07-31 01:42:32+00:00
URL: https://github.com/bevyengine/bevy/pull/14537
Description:
# Objective

- Fixes #14517.

## Solution

- Replace two instances of `map()` with `inspect()`.
- `#[allow(dead_code)]` on `Bundle` derive macro tests.

## Testing

You need to install the beta toolchain, since these lints are not stable yet.

```bash
cargo +beta clippy --workspace
cargo +beta test --workspace
```

----------------------------------------

PR #13859: Change `SceneInstanceReady` to trigger an observer.
Author: komadori
Merged at: 2024-07-30 21:38:54+00:00
URL: https://github.com/bevyengine/bevy/pull/13859
Description:
# Objective

The `SceneInstanceReady` event would be more ergonomic (and potentially efficient) if it could be delivered to listeners attached to the scene entities becoming ready rather than into a World-global queue.

This is an evolution of @Shatur's work in #9313.

## Solution

The scene spawner is changed to trigger observers on the scene entity when it is ready rather than enqueue an event with `EventWriter`.

This addresses the two outstanding feature requests mentioned on #2218, that i) the events should be "scoped" in some way and ii) that the `InstanceId` should be included in the event. 

## Testing

Modified the `scene_spawner::tests::event` test to use the new mechanism.

---

## Changelog

- Changed `SceneInstanceReady` to trigger an entity observer rather than be written to an event queue.
- Changed `SceneInstanceReady` to carry the `InstanceId` of the scene.

## Migration Guide

If you have a system which read `SceneInstanceReady` events:

> ```fn ready_system(ready_events: EventReader<'_, '_, SceneInstanceReady>) {```

It must be rewritten as an observer:

> ```commands.observe(|trigger: Trigger<SceneInstanceReady>| {```

Or, if you were expecting the event in relation to a specific entity or entities, as an entity observer:

> ```commands.entity(entity).observe(|trigger: Trigger<SceneInstanceReady>| {```
----------------------------------------

PR #14527: Fix CI after #12965
Author: SkiFire13
Merged at: 2024-07-30 07:30:35+00:00
URL: https://github.com/bevyengine/bevy/pull/14527
Description:
# Objective

- In #12965 I broke CI (sorry!)
- The command was tested locally, but somehow the yaml formatting messed it up
- I hate yaml

## Solution

- It should now use the correct formatting
  - I hope
  - I wish there was a straightforward way to test github actions locally
----------------------------------------

PR #12965: Generate links to definition in source code pages on docs.rs and dev-docs.bevyengine.org
Author: SkiFire13
Merged at: 2024-07-29 23:26:22+00:00
URL: https://github.com/bevyengine/bevy/pull/12965
Description:
# Objective

- Fix issue #2611

## Solution

- Add `--generate-link-to-definition` to all the `rustdoc-args` arrays in the `Cargo.toml`s (for docs.rs)
- Add `--generate-link-to-definition` to the `RUSTDOCFLAGS` environment variable in the docs workflow (for dev-docs.bevyengine.org)
- Document all the workspace crates in the docs workflow (needed because otherwise only the source code of the `bevy` package will be included, making the argument useless)
  - I think this also fixes #3662, since it fixes the bug on dev-docs.bevyengine.org, while on docs.rs it has been fixed for a while on their side.

---

## Changelog

- The source code viewer on docs.rs now includes links to the definitions.
----------------------------------------

PR #14352: Add `FilteredAccess::empty` and simplify the implementatin of `update_component_access` for `AnyOf`/`Or`
Author: SkiFire13
Merged at: 2024-07-29 23:34:47+00:00
URL: https://github.com/bevyengine/bevy/pull/14352
Description:
# Objective

- The implementation of `update_component_access` for `AnyOf`/`Or` is kinda weird due to special casing the first filter, let's simplify it;
- Fundamentally we want to fold/reduce the various filters using an OR operation, however in order to do a proper fold we need a neutral element for the initial accumulator, which for OR is FALSE. However we didn't have a way to create a `FilteredAccess` value corresponding to FALSE and thus the only option was reducing, which special cases the first element as being the initial accumulator.

This is an alternative to https://github.com/bevyengine/bevy/pull/14026

## Solution

- Introduce `FilteredAccess::empty` as a way to create a `FilteredAccess` corresponding to the logical proposition FALSE;
- Use it as the initial accumulator for the above operations, allowing to handle all the elements to fold in the same way.

---

## Migration Guide

- The behaviour of `AnyOf<()>` and `Or<()>` has been changed to match no archetypes rather than all archetypes to naturally match the corresponding logical operation. Consider replacing them with `()` instead.
----------------------------------------

PR #14488: Use AccumulatedMouseMotion, AccumulatedMouseScroll in examples
Author: richchurcher
Merged at: 2024-07-29 23:55:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14488
Description:

# Objective

Use the new `AccumulatedMouseMotion` and `AccumulatedMouseScroll` resources in place of mouse event handling.

I left the `mouse_input_events` example alone, since by its nature it demonstrates event detection.

Fixes #14066 

## Testing

Ran each example locally before and after changes.

----------------------------------------

PR #14489: Add note on StatesPlugin requirement for state code
Author: richchurcher
Merged at: 2024-07-30 00:03:33+00:00
URL: https://github.com/bevyengine/bevy/pull/14489
Description:
# Objective

Clarify that `StatesPlugin` is a prerequisite for state code.

Closes #14329 .

Edit: am I missing a way to link `DefaultPlugins` correctly other than using the URL? I guess I expected to be able to refer to it with `bevy::prelude::DefaultPlugins` or some such :thinking: 
----------------------------------------

PR #14502: Optimize cloning for Access-related structs
Author: CrazyRoka
Merged at: 2024-07-30 00:10:09+00:00
URL: https://github.com/bevyengine/bevy/pull/14502
Description:
# Objective

Optimize the cloning process for Access-related structs in the ECS system, specifically targeting the `clone_from` method.

Previously, profiling showed that 1% of CPU time was spent in `FixedBitSet`'s `drop_in_place`, due to the default `clone_from` implementation:

```rust
fn clone_from(&mut self, source: &Self) {
    *self = source.clone()
}
```

This implementation causes unnecessary allocations and deallocations. However, [FixedBitSet provides a more optimized clone_from method](https://github.com/petgraph/fixedbitset/blob/master/src/lib.rs#L1445-L1465) that avoids these allocations and utilizes SIMD instructions for better performance.

This PR aims to leverage the optimized clone_from method of FixedBitSet and implement custom clone_from methods for Access-related structs to take full advantage of this optimization. By doing so, we expect to significantly reduce CPU time spent on cloning operations and improve overall system performance.


![image](https://github.com/user-attachments/assets/7526a5c5-c75b-4a9a-b8d2-891f64fd553b)


## Solution

- Implemented custom `clone` and `clone_from` methods for `Access`, `FilteredAccess`, `AccessFilters`, and `FilteredAccessSet` structs.
- Removed `#[derive(Clone)]` and manually implemented `Clone` trait to use optimized `clone_from` method from `FixedBitSet`.
- Added unit tests for cloning and `clone_from` methods to ensure correctness.

## Testing

- Conducted performance testing comparing the original and optimized versions.
- Measured CPU time consumption for the `clone_from` method:
  - Original version: 1.34% of CPU time
  - Optimized version: 0.338% of CPU time
- Compared FPS before and after the changes (results may vary depending on the run):

Before optimization:
```
2024-07-28T12:49:11.864019Z  INFO bevy diagnostic: fps        :  213.489463   (avg 214.502488)
2024-07-28T12:49:11.864037Z  INFO bevy diagnostic: frame_time :    4.704746ms (avg 4.682251ms)
2024-07-28T12:49:11.864042Z  INFO bevy diagnostic: frame_count: 7947.000000   (avg 7887.500000)
```

![image](https://github.com/user-attachments/assets/7865a365-0569-4b46-814a-964779d90973)

After optimization:
```
2024-07-28T12:29:42.705738Z  INFO bevy diagnostic: fps        :  220.273721   (avg 220.912227)
2024-07-28T12:29:42.705762Z  INFO bevy diagnostic: frame_time :    4.559127ms (avg 4.544905ms)
2024-07-28T12:29:42.705769Z  INFO bevy diagnostic: frame_count: 7596.000000   (avg 7536.500000)
```

![image](https://github.com/user-attachments/assets/8dd96908-86d0-4850-8e29-f80176a005d6)

---

Reviewers can test these changes by running `cargo run --release --example ssr`
----------------------------------------

PR #14382: Disallow empty cubic and rational curves
Author: mweatherley
Merged at: 2024-07-29 23:41:03+00:00
URL: https://github.com/bevyengine/bevy/pull/14382
Description:
# Objective

Previously, our cubic spline constructors would produce `CubicCurve`/`RationalCurve` output with no data when they themselves didn't hold enough control points to produce a well-formed curve. Attempting to sample the resulting empty "curves" (e.g. by calling `CubicCurve::position`) would crash the program (üòì). 

The objectives of this PR are: 
1. Ensure that the curve output of `bevy_math`'s spline constructions are never invalid as data.
2. Provide a type-level guarantee that `CubicCurve` and `RationalCurve` actually function as curves.

## Solution

This has a few pieces. Firstly, the curve generator traits `CubicGenerator`, `CyclicCubicGenerator`, and `RationalGenerator` are now fallible ‚Äî they have associated error types, and the curve-generation functions are allowed to fail:
```rust
/// Implement this on cubic splines that can generate a cubic curve from their spline parameters.
pub trait CubicGenerator<P: VectorSpace> {
    /// An error type indicating why construction might fail.
    type Error;

    /// Build a [`CubicCurve`] by computing the interpolation coefficients for each curve segment.
    fn to_curve(&self) -> Result<CubicCurve<P>, Self::Error>;
}
```

All existing spline constructions use this together with errors that indicate when they didn't have the right control data and provide curves which have at least one segment whenever they return an `Ok` variant.

Next, `CubicCurve` and `RationalCurve` have been blessed with a guarantee that their internal array of segments (`segments`) is never empty. In particular, this field is no longer public, so that invalid curves cannot be built using struct instantiation syntax. To compensate for this shortfall for users (in particular library authors who might want to implement their own generators), there is a new method `from_segments` on these for constructing a curve from a list of segments, failing if the list is empty:
```rust
/// Create a new curve from a collection of segments. If the collection of segments is empty,
/// a curve cannot be built and `None` will be returned instead.
pub fn from_segments(segments: impl Into<Vec<CubicSegment<P>>>) -> Option<Self> { //... }
```

All existing methods on `CyclicCurve` and `CubicCurve` maintain the invariant, so the direct construction of invalid values by users is impossible. 

## Testing

Run unit tests from `bevy_math::cubic_splines`. Additionally, run the `cubic_splines` example and try to get it to crash using small numbers of control points: it uses the fallible constructors directly, so if invalid data is ever constructed, it is basically guaranteed to crash. 

---

## Migration Guide

The `to_curve` method on Bevy's cubic splines is now fallible (returning a `Result`), meaning that any existing calls will need to be updated by handling the possibility of an error variant. 

Similarly, any custom implementation of `CubicGenerator` or `RationalGenerator` will need to be amended to include an `Error` type and be made fallible itself. 

Finally, the fields of `CubicCurve` and `RationalCurve` are now private, so any direct constructions of these structs from segments will need to be replaced with the new `CubicCurve::from_segments` and `RationalCurve::from_segments` methods. 

---

## Design

The main thing to justify here is the choice for the curve internals to remain the same. After all, if they were able to cause crashes in the first place, it's worth wondering why safeguards weren't put in place on the types themselves to prevent that.

My view on this is that the problem was really that the internals of these methods implicitly relied on the assumption that the value they were operating on was *actually a curve*, when this wasn't actually guaranteed. Now, it's possible to make a bunch of small changes inside the curve struct methods to account for that, but I think that's worse than just guaranteeing that the data is valid upstream ‚Äî sampling is about as hot a code path as we're going to get in this area, and hitting an additional branch every time it happens just to check that the struct contains valid data is probably a waste of resources. 

Another way of phrasing this is that even if we're only interested in solving the crashes, the curve's validity needs to be checked at some point, and it's almost certainly better to do this once at the point of construction than every time the curve is sampled.

In cases where the control data is supplied dynamically, users would already have to deal with empty curve outputs basically not working. Anecdotally, I ran into this while writing the `cubic_splines` example, and I think the diff illustrates the improvement pretty nicely ‚Äî the code no longer has to anticipate whether the output will be good or not; it just has to handle the `Result`. 

The cost of all this, of course, is that we have to guarantee that the new invariant is actually maintained whenever we extend the API. However, for the most part, I don't expect users to want to do much surgery on the internals of their curves anyway. 
----------------------------------------

PR #14485: Refactor Bounded2d/Bounded3d to use isometries
Author: mweatherley
Merged at: 2024-07-29 23:52:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14485
Description:
# Objective

Previously, this area of bevy_math used raw translation and rotations to encode isometries, which did not exist earlier. The goal of this PR is to make the codebase of bevy_math more harmonious by using actual isometries (`Isometry2d`/`Isometry3d`) in these places instead ‚Äî this will hopefully make the interfaces more digestible for end-users, in addition to facilitating conversions. 

For instance, together with the addition of #14478, this means that a bounding box for a collider with an isometric `Transform` can be computed as
```rust
collider.aabb_3d(collider_transform.to_isometry())
```
instead of using manual destructuring. 

## Solution

- The traits `Bounded2d` and `Bounded3d` now use `Isometry2d` and `Isometry3d` (respectively) instead of `translation` and `rotation` parameters; e.g.:
  ```rust
  /// A trait with methods that return 3D bounding volumes for a shape.
  pub trait Bounded3d {
      /// Get an axis-aligned bounding box for the shape translated and rotated by the given isometry.
      fn aabb_3d(&self, isometry: Isometry3d) -> Aabb3d;
      /// Get a bounding sphere for the shape translated and rotated by the given isometry.
      fn bounding_sphere(&self, isometry: Isometry3d) -> BoundingSphere;
  }
  ```
- Similarly, the `from_point_cloud` constructors for axis-aligned bounding boxes and bounding circles/spheres now take isometries instead of separate `translation` and `rotation`; e.g.:
  ```rust
    /// Computes the smallest [`Aabb3d`] containing the given set of points,
    /// transformed by the rotation and translation of the given isometry.
    ///
    /// # Panics
    ///
    /// Panics if the given set of points is empty.
    #[inline(always)]
    pub fn from_point_cloud(
        isometry: Isometry3d,
        points: impl Iterator<Item = impl Into<Vec3A>>,
    ) -> Aabb3d { //... }
  ```

This has a couple additional results:
1. The end-user no longer interacts directly with `Into<Vec3A>` or `Into<Rot2>` parameters; these conversions all happen earlier now, inside the isometry types.
2. Similarly, almost all intermediate `Vec3 -> Vec3A` conversions have been eliminated from the `Bounded3d` implementations for primitives. This probably has some performance benefit, but I have not measured it as of now. 

## Testing

Existing unit tests help ensure that nothing has been broken in the refactor. 

---

## Migration Guide

The `Bounded2d` and `Bounded3d` traits now take `Isometry2d` and `Isometry3d` parameters (respectively) instead of separate translation and rotation arguments. Existing calls to `aabb_2d`, `bounding_circle`, `aabb_3d`, and `bounding_sphere` will have to be changed to use isometries instead. A straightforward conversion is to refactor just by calling `Isometry2d/3d::new`, as follows:
```rust
// Old:
let aabb = my_shape.aabb_2d(my_translation, my_rotation);

// New:
let aabb = my_shape.aabb_2d(Isometry2d::new(my_translation, my_rotation));
```

However, if the old translation and rotation are 3d translation/rotations originating from a `Transform` or `GlobalTransform`, then `to_isometry` may be used instead. For example:
```rust
// Old:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.translation, shape_transform.rotation);

// New:
let bounding_sphere = my_shape.bounding_sphere(shape_transform.to_isometry());
```

This discussion also applies to the `from_point_cloud` construction method of `Aabb2d`/`BoundingCircle`/`Aabb3d`/`BoundingSphere`, which has similarly been altered to use isometries. 
----------------------------------------

PR #14500: Stop website examples from linking to old URL with multiple redirects
Author: TrialDragon
Merged at: 2024-07-30 00:07:10+00:00
URL: https://github.com/bevyengine/bevy/pull/14500
Description:
# Objective

Fixes https://github.com/bevyengine/bevy-website/issues/1558
Followup to #12348 

For the website pages extra link, it needs kebab case for the category name and a trailing forward slash to make the link for the Bevy website correct and not have unnecessary redirections.

## Solution

Changes the category name to kebab case for the extra link, and adds a trailing forward slash to the link.

## Testing

I have tested these changes.

Clone my fork with the changes in `bevy-website/generate-wasm-examples/` then `cd bevy && git switch bevy-website/1558_fix_beautify_example_links && cd ..` and then  `./generate_wasm_examples.sh` to generate examples. 

Afterwards runs `zola serve` and go to `http://127.0.0.1:1111/examples` and hover over or inspect the cards links / anchors to see that the link is now correct, click on any of the cards to see that there is no redirects.
----------------------------------------

PR #14490: fix issue with phantom ui node children
Author: eidloi
Merged at: 2024-07-30 00:04:36+00:00
URL: https://github.com/bevyengine/bevy/pull/14490
Description:
# Objective

The `ui_layout_system` relies on change detection to sync parent-child relation to taffy. The children need to by synced before node removal to avoid trying to set deleted nodes as children (due to how the different queries collect entities). This however may leave nodes that were removed set as children to other nodes in special cases.

Fixes #11385

## Solution

The solution is simply to re-sync the changed children after the nodes are removed.

## Testing

Tested with `sickle_ui` where docking zone highlights would end up glitched when docking was done in a certain manner:
- run the `docking_zone_splits` example
- pop out a tab from the top
- dock the floating panel in the center right
- grab another tab and try to hover the original static docking zone: the highlight is semi-stuck
- (NOTE: sometimes it worked even without the fix due to scheduling order not producing the bugged query results)

After the fix, the issue is no longer present.

NOTE: The performance impact should be minimal, as the child sync relies on change detection. The change detection was also the reason the parent nodes remained "stuck" with the phantom children if no other update were done to them.

----------------------------------------

PR #14450: Added serialize flag to bevy_math dep of bevy_ui
Author: TheDudeFromCI
Merged at: 2024-07-29 23:50:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14450
Description:
# Objective

When depending on the `bevy_ui` crate specifically and using the `serialize` feature flag, the compilation fails due to `bevy_math` not having the serialize flag enabled.

## Solution

Added the `serialize` flag to the `bevy_math` dependency when using that flag on `bevy_ui`.

## Testing

Tested by adding `bevy_math = { version = "0.14", features = ["serialize"] }` on a small Bevy library to ensure compilation was successful.
----------------------------------------

PR #14419: bevy_reflect: Adding support for Atomic values
Author: recatek
Merged at: 2024-07-29 23:48:05+00:00
URL: https://github.com/bevyengine/bevy/pull/14419
Description:
Fixes #14418

Note that this does not add AtomicPtr, which would need its own special casing support, just the regular value types.
Also, I was forced to be opinionated about which Ordering to use, so I chose SeqCst as the strictest by default.
----------------------------------------

PR #14420: Correct minimum range-alloc version
Author: JMS55
Merged at: 2024-07-29 22:27:28+00:00
URL: https://github.com/bevyengine/bevy/pull/14420
Description:
Fixes https://github.com/bevyengine/bevy/issues/14417
----------------------------------------

PR #14514: Bump crate-ci/typos from 1.23.2 to 1.23.5
Author: dependabot[bot]
Merged at: 2024-07-29 07:18:14+00:00
URL: https://github.com/bevyengine/bevy/pull/14514
Description:
Bumps [crate-ci/typos](https://github.com/crate-ci/typos) from 1.23.2 to 1.23.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/releases">crate-ci/typos's releases</a>.</em></p>
<blockquote>
<h2>v1.23.5</h2>
<h2>[1.23.5] - 2024-07-25</h2>
<h3>Features</h3>
<ul>
<li><em>(config)</em> Store config in <code>Cargo.toml</code></li>
</ul>
<h2>v1.23.4</h2>
<h2>[1.23.4] - 2024-07-25</h2>
<h3>Fixes</h3>
<ul>
<li>Don't correct <code>countr_one</code> in C++</li>
</ul>
<h2>v1.23.3</h2>
<h2>[1.23.3] - 2024-07-22</h2>
<h3>Fixes</h3>
<ul>
<li>Fix <code>Dockerfile</code></li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/blob/master/CHANGELOG.md">crate-ci/typos's changelog</a>.</em></p>
<blockquote>
<h2>[1.23.5] - 2024-07-25</h2>
<h3>Features</h3>
<ul>
<li><em>(config)</em> Store config in <code>Cargo.toml</code></li>
</ul>
<h2>[1.23.4] - 2024-07-25</h2>
<h3>Fixes</h3>
<ul>
<li>Don't correct <code>countr_one</code> in C++</li>
</ul>
<h2>[1.23.3] - 2024-07-22</h2>
<h3>Fixes</h3>
<ul>
<li>Fix <code>Dockerfile</code></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/crate-ci/typos/commit/c7af4712eda24dd1ef54bd8212973888489eb0ce"><code>c7af471</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/240053aa961fad798694e5775e9c9474b4591908"><code>240053a</code></a> docs: Update changelog</li>
<li><a href="https://github.com/crate-ci/typos/commit/d74fc5d53caa1187a75489373d0066b04f4bfffe"><code>d74fc5d</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1063">#1063</a> from epage/cargo</li>
<li><a href="https://github.com/crate-ci/typos/commit/d5453cc46cd302f57db956ba2aa078294cfcf5ec"><code>d5453cc</code></a> feat(config): Load config from Cargo.toml</li>
<li><a href="https://github.com/crate-ci/typos/commit/95f556a9185e31d2ea83ae7d69501b0db5ae5622"><code>95f556a</code></a> refactor(config): Be more direct</li>
<li><a href="https://github.com/crate-ci/typos/commit/626b4f71dbda8fcb3a40174785a53d48f2d1d639"><code>626b4f7</code></a> refactor(config): Centralize pyproject.toml value</li>
<li><a href="https://github.com/crate-ci/typos/commit/ba52e2886feff579e495447b325564c7cbcb3fd4"><code>ba52e28</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/4284499017961754af4aa0a5fd51cf9af3f5a55a"><code>4284499</code></a> docs: Update changelog</li>
<li><a href="https://github.com/crate-ci/typos/commit/7461343b85a167fe535c0ae29e89a6c97aab8d9f"><code>7461343</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1062">#1062</a> from epage/cpp</li>
<li><a href="https://github.com/crate-ci/typos/commit/5aa093dc25a6037583cf992a771e9ad099ac678a"><code>5aa093d</code></a> fix(dict): Don't correct countr_one</li>
<li>Additional commits viewable in <a href="https://github.com/crate-ci/typos/compare/v1.23.2...v1.23.5">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crate-ci/typos&package-manager=github_actions&previous-version=1.23.2&new-version=1.23.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>
----------------------------------------

PR #14505: Fix `bevy_render`'s `image` dependency version
Author: SkiFire13
Merged at: 2024-07-28 16:04:24+00:00
URL: https://github.com/bevyengine/bevy/pull/14505
Description:
# Objective

- `bevy_render` depends on `image 0.25` but uses `image::ImageReader` which was added only in `image 0.25.2`
- users that have `image 0.25` in their `Cargo.lock` and update to the latest `bevy_render` may thus get a compilation due to this (at least I did)

## Solution

- Properly set the correct minimum version of `image` that `bevy_render` depends on.
----------------------------------------

PR #14499: Don't debug `SystemId`'s entity field twice
Author: SkiFire13
Merged at: 2024-07-27 16:31:19+00:00
URL: https://github.com/bevyengine/bevy/pull/14499
Description:
# Objective

- `SystemId`'s `Debug` implementation includes its `entity` field twice.
- This was likely an oversight in #11019, since before that PR the second field was the `PhantomData` one.

## Solution

- Only include it once

Alternatively, this could be changed to match the struct representation of `SystemId`, thus instructing the formatter to print a named struct and including the `PhantomData` field.

----------------------------------------

PR #14492: Fix typo in `World::observe`
Author: thatchedroof
Merged at: 2024-07-27 14:10:22+00:00
URL: https://github.com/bevyengine/bevy/pull/14492
Description:
# Objective

- Fix a typo in the documentation for `World::observe`

## Solution

- Change `Spawn` to `Spawns` and `it's` to `its`

----------------------------------------

PR #14480: Fix TextureCache memory leak and add is_empty() method
Author: brianreavis
Merged at: 2024-07-27 13:31:23+00:00
URL: https://github.com/bevyengine/bevy/pull/14480
Description:
# Objective

Fix a memory leak in `TextureCache` caused by the internal HashMap never having unused entries cleared. 

This isn't a giant memory leak, given the unused entries are simply empty vectors. Though, if someone goes and resizes a window a bunch, it can lead to hundreds/thousands of TextureDescriptor keys adding up in the hashmap ‚Äì which isn't ideal.

## Solution

- Only retain hashmap entries that still have textures.
- I also added an `is_empty()` method to `TextureCache`, which is useful for 3rd-party higher-level caches that might have individual caches by view entity or texture type, for example.

## Testing

- Verified the examples still work (this is a trivial change)

----------------------------------------

PR #14486: Fix `bevy_gltf` PBR features not enabling corresponding `bevy_pbr` flags
Author: BD103
Merged at: 2024-07-26 17:30:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14486
Description:
# Objective

- `bevy_gltf` does not build with only the `pbr_multi_layer_material_textures` or `pbr_anisotropy_texture` features.
  - Caught by [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy) in [this run](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/10087486444/job/27891723948).

## Solution

- This error was due to the feature not enabling the corresponding feature in `bevy_pbr`. Adding these flags as a dependency fixes this error.

## Testing

The following commands fail on `main`, but pass with this PR:

```bash
cargo check -p bevy_gltf --no-default-features -F pbr_multi_layer_material_textures
cargo check -p bevy_gltf --no-default-features -F pbr_anisotropy_texture
```

----------------------------------------

PR #14469: Fix `bevy_winit` not building with `serialize` feature
Author: BD103
Merged at: 2024-07-26 22:22:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14469
Description:
# Objective

- `bevy_winit` fails to build with just the `serialize` feature.
  - Caught by [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy) in [this run](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/10087486444/job/27891723948), using the new, nuanced configuration system!

## Solution

- It was failing because `bevy_winit` did not pass the `serialize` flag to two of its dependencies: `bevy_input` and `bevy_window`.
- To fix this, add these crates to the feature flag.

## Testing

```bash
# On Linux, you must also specify a backend: `x11` or `wayland`.
# You can do this with `-F serialize,x11`, etc.
cargo check -p bevy_winit --no-default-features -F serialize
```
----------------------------------------

PR #14423: Handle 0 height in prepare_bloom_textures
Author: NiseVoid
Merged at: 2024-07-26 22:09:44+00:00
URL: https://github.com/bevyengine/bevy/pull/14423
Description:
# Objective

- Fix a confusing panic when the viewport width is non-zero and the height is 0, `prepare_bloom_textures` tries to create a `4294967295x1` texture.

## Solution

- Avoid dividing by zero
- Apps still crash after this, but now on a more reasonable error about the zero-size viewport

## Testing

- I isolated and tested the math. A height of 0 sets `mip_height_ratio`  to `inf`, causing the width to explode if it isn't also 0
----------------------------------------

PR #14439: Remove `#[cfg]` from the `From` impls of `TextSection`
Author: SludgePhD
Merged at: 2024-07-26 17:30:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14439
Description:
# Objective

- Not including bevy's default font shouldn't result in code not compiling anymore.
- Games may want to load their own default font into the default `Handle<Font>` and not include bevy's default font, but still use these convenience impls (https://github.com/bevyengine/bevy/issues/12192 currently makes this a bit inconvenient, but it does work).

## Solution

- Include these impls unconditionally.
- Slightly expand the comment on the `font` field to indicate that a custom font can be used to override the default font.
- (drive-by: add `#[reflect(Default)]` on `TextSection`, since it was missing a way to construct it via reflection)
----------------------------------------

PR #14482: Made ViewUniform fields public
Author: brianreavis
Merged at: 2024-07-26 17:30:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14482
Description:
# Objective

- Made `ViewUniform` fields public so that 3rd-parties can create this uniform. This is useful for custom pipelines that use custom views (e.g. views buffered by a particular amount, for example).
----------------------------------------

PR #14479: `ptr`: allow `Ptr` and `PtrMut` construction for references to values of `?Sized` types
Author: soqb
Merged at: 2024-07-25 23:30:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14479
Description:
# Objective

- Currently `bevy_ptr::{Ptr, PtrMut}` have `From` implementations from references.
- These implementations impose an implicit `Sized` bound so `bevy_ptr` types cannot be created from references to slices and trait objects.
- I ran into this trying to use `Ptr<'static>` as an untyped `&'static dyn Any`, and [had to work around it](https://github.com/soqb/perfect-reflect/blob/f32b41512c77ad2d7e0f126b0a0fdf388e3e4717/src/registry.rs#L214-L219). 

## Solution

- Relax the `Sized` bound on the relevant `From` implementations.

----------------------------------------

PR #14481: Don‚Äôt prepare 2D view bind groups for 3D cameras
Author: brianreavis
Merged at: 2024-07-25 20:53:38+00:00
URL: https://github.com/bevyengine/bevy/pull/14481
Description:
# Objective

- Before this fix, the view query in `prepare_mesh2d_view_bind_groups` matched all views ‚Äì leading to 2D view bind groups being prepared for 3D cameras. 

## Solution

- Added `With<Camera2d>` to the views query.

## Testing

- Verified the examples still work.
----------------------------------------

PR #14478: Conversions for Isometry3d ‚ü∑ Transform/GlobalTransform
Author: mweatherley
Merged at: 2024-07-25 20:40:12+00:00
URL: https://github.com/bevyengine/bevy/pull/14478
Description:
# Objective

Allow interoperation between `Isometry3d` and the transform types from bevy_transform. At least in the short term, the primary goal is to allow the extraction of isometries from transform components by users. 

## Solution

- Add explicit `from_isometry`/`to_isometry` methods to `Transform`.
- Add explicit `from_isometry`/`to_isometry` methods to `GlobalTransform`. The former is hidden (primarily for internal use), and the latter has the caveats originating in [`Affine3A::to_scale_rotation_translation`](https://docs.rs/glam/latest/glam/f32/struct.Affine3A.html#method.to_scale_rotation_translation).
- Implement the `TransformPoint` trait for `Isometry3d`. 

----------------------------------------

PR #14477: remove check-cfg job
Author: mockersf
Merged at: 2024-07-25 19:52:46+00:00
URL: https://github.com/bevyengine/bevy/pull/14477
Description:
# Objective

- Fixes #13268

## Solution

- Remove the job as it's now part of rust stable https://blog.rust-lang.org/2024/07/25/Rust-1.80.0.html#checked-cfg-names-and-values


----------------------------------------

PR #14471: fix meshlet example
Author: re0312
Merged at: 2024-07-25 15:38:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14471
Description:
# Objective

- meshlet example has broken since #14273

## Solution

- disable msaa in meshlet example


----------------------------------------

PR #14458: Add intradoc links for observer triggers
Author: dmyyy
Merged at: 2024-07-24 18:58:29+00:00
URL: https://github.com/bevyengine/bevy/pull/14458
Description:
# Objective

When using observers you might want to know what the difference is between `OnAdd` vs `OnReplace` vs `OnInsert` etc. It's not obvious where to look (`component_hooks.rs`). Added intradoc links for easier disambiguation.


----------------------------------------

PR #14457: Add BorderRadius field to ImageBundle
Author: BlakeBedford
Merged at: 2024-07-24 18:58:29+00:00
URL: https://github.com/bevyengine/bevy/pull/14457
Description:
# Objective

- Fixes #14453

## Solution

- Added BorderRadius to ImageBundle

## Testing

- Did you test these changes? If so, how?

- Tested on a random picture I found in the examples and it added a border radius.

- Are there any parts that need more testing?

- I don't fink so.

- How can other people (reviewers) test your changes? Is there anything specific they need to know?

- Apply a border radius to a random picture.
----------------------------------------

PR #14459: Require `&mut self` for `World::increment_change_tick`
Author: JoJoJet
Merged at: 2024-07-24 12:57:44+00:00
URL: https://github.com/bevyengine/bevy/pull/14459
Description:
# Objective

The method `World::increment_change_tick` currently takes `&self` as the method receiver, which is semantically strange. Even though the interior mutability is sound, the existence of this method is strange since we tend to think of `&World` as being a read-only snapshot of a world, not an aliasable reference to a world with mutability. For those purposes, we have `UnsafeWorldCell`.

## Solution

Change the method signature to take `&mut self`. Use exclusive access to remove the need for atomic adds, which makes the method slightly more efficient. Redirect users to [`UnsafeWorldCell::increment_change_tick`] if they need to increment the world's change tick from an aliased context.

In practice I don't think there will be many breakages, if any. In cases where you need to call `increment_change_tick`, you usually already have either `&mut World` or `UnsafeWorldCell`.

---

## Migration Guide

The method `World::increment_change_tick` now requires `&mut self` instead of `&self`. If you need to call this method but do not have mutable access to the world, consider using `world.as_unsafe_world_cell_readonly().increment_change_tick()`, which does the same thing, but is less efficient than the method on `World` due to requiring atomic synchronization.

```rust
fn my_system(world: &World) {
    // Before
    world.increment_change_tick();

    // After
    world.as_unsafe_world_cell_readonly().increment_change_tick();
}
```
----------------------------------------

PR #14446: fix examples after the switch for msaa to a component
Author: mockersf
Merged at: 2024-07-24 01:39:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14446
Description:
# Objective

- #14273 changed MSAA to a component, and broke some examples

- SSAO needs MSAA to be disabled
https://github.com/bevyengine/bevy/blob/f0ff7fb5445996e561d9ea336ee353544d79fef6/crates/bevy_pbr/src/ssao/mod.rs#L495

- `AlphaMode::AlphaToCoverage` needs MSAA to be not off to do something
https://github.com/bevyengine/bevy/blob/f0ff7fb5445996e561d9ea336ee353544d79fef6/examples/3d/transparency_3d.rs#L113-L117

# Solution

- change MSAA in those examples

----------------------------------------

PR #14416: feat: Add `World::get_reflect()` and `World::get_reflect_mut()`
Author: futile
Merged at: 2024-07-23 17:13:43+00:00
URL: https://github.com/bevyengine/bevy/pull/14416
Description:
# Objective

Sometimes one wants to retrieve a `&dyn Reflect` for an entity's component, which so far required multiple, non-obvious steps and `unsafe`-code.
The docs for [`MutUntyped`](https://docs.rs/bevy/latest/bevy/ecs/change_detection/struct.MutUntyped.html#method.map_unchanged) contain an example of the unsafe part.

## Solution

This PR adds the two methods:

```rust
// immutable variant
World::get_reflect(&self, entity: Entity, type_id: TypeId) -> Result<&dyn Reflect, GetComponentReflectError>

// mutable variant
World::get_reflect_mut(&mut self, entity: Entity, type_id: TypeId) -> Result<Mut<'_, dyn Reflect>, GetComponentReflectError>
```

which take care of the necessary steps, check required invariants etc., and contain the unsafety so the caller doesn't have to deal with it.

## Testing

- Did you test these changes? If so, how?
  - Added tests and a doc test, also (successfully) ran `cargo run -p ci`.
- Are there any parts that need more testing?
  - Could add tests for each individual error variant, but it's not required imo.
- How can other people (reviewers) test your changes? Is there anything specific they need to know?
  - Run `cargo test --doc --package bevy_ecs --all-features -- world::World::get_reflect --show-output` for the doctest
  - Run `cargo test --package bevy_ecs --lib --all-features -- world::tests::reflect_tests --show-output` for the unittests
- If relevant, what platforms did you test these changes on, and are there any important ones you can't test?
  - Don't think it's relevant, but tested on 64bit linux (only).

---

## Showcase

Copy of the doctest example which gives a good overview of what this enables:

```rust
use bevy_ecs::prelude::*;
use bevy_reflect::Reflect;
use std::any::TypeId;

// define a `Component` and derive `Reflect` for it
#[derive(Component, Reflect)]
struct MyComponent;

// create a `World` for this example
let mut world = World::new();

// Note: This is usually handled by `App::register_type()`, but this example can not use `App`.
world.init_resource::<AppTypeRegistry>();
world.get_resource_mut::<AppTypeRegistry>().unwrap().write().register::<MyComponent>();

// spawn an entity with a `MyComponent`
let entity = world.spawn(MyComponent).id();

// retrieve a reflected reference to the entity's `MyComponent`
let comp_reflected: &dyn Reflect = world.get_reflect(entity, TypeId::of::<MyComponent>()).unwrap();

// make sure we got the expected type
assert!(comp_reflected.is::<MyComponent>());
```

## Migration Guide

No breaking changes, but users can use the new methods if they did it manually before.

----------------------------------------

PR #14263: feature: Derive Hash for KeyboardInput.
Author: shanecelis
Merged at: 2024-07-23 12:55:08+00:00
URL: https://github.com/bevyengine/bevy/pull/14263
Description:
# Objective

Derive `Hash` for `KeyboardInput`.

## Problem

I was [writing code](https://github.com/joshka/bevy_ratatui/pull/13) to take `crossterm` events and republish them as bevy input events. One scenario requires I check if the same key press was happening repeatedly; in a regular terminal we don't get key released events, so I was simulating them. 

I was surprised to find that I couldn't put `KeyboardInput` into a `HashSet`. 

## Work Around

My work around was to add a new type that implemented Hash.

```rust
#[derive(Deref, DerefMut, PartialEq, Eq)]
struct KeyInput(KeyboardInput);

impl Hash for KeyInput {
    fn hash<H>(&self, state: &mut H)
    where
        H: Hasher,
    {
        self.key_code.hash(state);
        self.logical_key.hash(state);
        self.state.hash(state);
        self.window.hash(state);
    }
}
```

## Solution

A better solution since all members of `KeyboardInput` implement `Hash` is to have it derive `Hash` as well.

## Testing

My newtype solution works for its purpose.
----------------------------------------

PR #14443: Add and reflect `Default` impls for CSS grid types
Author: SludgePhD
Merged at: 2024-07-22 21:57:31+00:00
URL: https://github.com/bevyengine/bevy/pull/14443
Description:
# Objective

- Some types here were not constructible via reflection, and some were missing fairly obvious `Default` values.
- Some types used `#[reflect_value]` for some unstated reason, making them opaque to reflection-based code.

## Solution

- Add and reflect some `Default` impls, and stop using `#[reflect_value]`.
----------------------------------------

PR #14384: Only propagate transforms entities with GlobalTransforms.
Author: StarArawn
Merged at: 2024-07-22 19:23:54+00:00
URL: https://github.com/bevyengine/bevy/pull/14384
Description:
# Objective
Fixes a performance issue when you have 1000s of entities in a bevy hierarchy without transforms.

This was prominently happening in `bevy_ecs_tilemap`.

## Solution

Filter out entities that don't have a global transform.

## Testing

CI
We should test some other way...

## Migration Guide

- To avoid surprising performance pitfalls, `Transform` / `GlobalTransform` propagation is no longer performed down through hierarchies where intermediate parent are missing a `GlobalTransform`. To restore the previous behavior, add `GlobalTransform::default` to intermediate entities.
----------------------------------------

PR #14376: Remove manual --cfg docsrs
Author: Coder-Joe458
Merged at: 2024-07-22 19:22:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14376
Description:
# Objective

- Fixes #14132 

## Solution

- Remove the cfg docsrs


----------------------------------------

PR #14344: Fix single keyframe animations.
Author: yrns
Merged at: 2024-07-22 19:04:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14344
Description:
# Objective

For clips with more than one curve, only the first was being applied if there is only one keyframe in it.

## Solution

Continue!



----------------------------------------

PR #14259: Add some missing reflect attributes
Author: mrchantey
Merged at: 2024-07-22 18:41:00+00:00
URL: https://github.com/bevyengine/bevy/pull/14259
Description:
# Objective

- Some types are missing reflection attributes, which means we can't use them in scene serialization etc.
- Effected types
   - `BorderRadius`
   - `AnimationTransitions`
   - `OnAdd`
   - `OnInsert`
   - `OnRemove`
- My use-case for `OnAdd` etc to derive reflect is 'Serializable Observer Components'. Add the component, save the scene, then the observer is re-added on scene load.

```rust
#[derive(Reflect)]
struct MySerializeableObserver<T: Event>(#[reflect(ignore)]PhantomData<T>);

impl<T: Event> Component for MySerializeableObserver<T> {
  const STORAGE_TYPE: StorageType  = StorageType::Table;
    fn register_component_hooks(hooks: &mut ComponentHooks) {
      hooks.on_add(|mut world, entity, _| {
        world
          .commands()
          .entity(entity)
          .observe(|_trigger: Trigger<T>| {
            println!("it triggered etc.");
          });
    });
  }
}
```

## Solution

- Add the missing traits

---
----------------------------------------

PR #14442: Fixup Msaa docs.
Author: tychedelia
Merged at: 2024-07-22 21:56:11+00:00
URL: https://github.com/bevyengine/bevy/pull/14442
Description:
Minor doc fixes missed in #14273 
----------------------------------------

PR #14430: Fix error in `bevy_ui` when building without `bevy_text`
Author: BD103
Merged at: 2024-07-22 19:39:49+00:00
URL: https://github.com/bevyengine/bevy/pull/14430
Description:
# Objective

- `bevy_ui` does not build without the `bevy_text` feature due to improper feature gating.
  - Specifically, `MeasureArgs<'a>` had an unused lifetime `'a` without `bevy_text` enabled. This is because it stores a reference to a `cosmic_text::FontSystem`.
  - This was caught by `flag-frenzy` in [this run](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/10024258523/job/27706132250).

## Solution

- Add a `PhantomData` to `MeasureArgs<'a>` in order to maintain its lifetime argument.
  - I also named it `font_system`, after the feature-gated argument that actually needs a lifetime, for usability. Please comment if you have a better solution!
- Move some unused imports to be behind the `bevy_text` feature gate.

## Testing

```bash
# Fails on main.
cargo check -p bevy_ui --no-default-features
# Succeeds on main.
cargo check -p bevy_ui --no-default-features -F bevy_text
```

---

## Migration Guide

**This is not a breaking change for users migrating from 0.14, since `MeasureArgs` did not exist then.**

When the `bevy_text` feature is disabled for `bevy_ui`, the type of the `MeasureArgs::font_system` field is now a `PhantomData` instead of being removed entirely. This is in order to keep the lifetime parameter, even though it is unused without text being enabled.
----------------------------------------

PR #14441: Simplify run conditions
Author: benfrankel
Merged at: 2024-07-22 19:41:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14441
Description:
# Objective

Simplify Bevy-provided functions that return a condition-satisfying closure instead of just being the condition.

## Solution

Become the condition.

## Testing

I did not test. Game jamming. Hopefully CI passes.

---

## Migration Guide

Some run conditions have been simplified.

```rust
// Before:
app.add_systems(Update, (
    system_0.run_if(run_once()),
    system_1.run_if(resource_changed_or_removed::<T>()),
    system_2.run_if(resource_removed::<T>()),
    system_3.run_if(on_event::<T>()),
    system_4.run_if(any_component_removed::<T>()),
));

// After:
app.add_systems(Update, (
    system_0.run_if(run_once),
    system_1.run_if(resource_changed_or_removed::<T>),
    system_2.run_if(resource_removed::<T>),
    system_3.run_if(on_event::<T>),
    system_4.run_if(any_component_removed::<T>),
));
```

----------------------------------------

PR #13240: Don't ignore draw errors
Author: IceSentry
Merged at: 2024-07-22 19:42:37+00:00
URL: https://github.com/bevyengine/bevy/pull/13240
Description:
# Objective

- It's possible to have errors in a draw command, but these errors are ignored

## Solution

- Return a result with the error

## Changelog

Renamed `RenderCommandResult::Failure` to `RenderCommandResult::Skip`
Added a `reason` string parameter to `RenderCommandResult::Failure`

## Migration Guide
If you were using `RenderCommandResult::Failure` to just ignore an error and retry later, use `RenderCommandResult::Skip` instead.

This wasn't intentional, but this PR should also help with https://github.com/bevyengine/bevy/issues/12660 since we can turn a few unwraps into error messages now.

----------------------------------------

PR #14410: Added `AstcBlock` and `AstcChannel` to the forwarded wgpu types.
Author: Earthmark
Merged at: 2024-07-22 19:35:43+00:00
URL: https://github.com/bevyengine/bevy/pull/14410
Description:
Currently `TextureFormat::Astc` can't be programmatically constructed without importing wgpu in addition to bevy.

# Objective

Allow programmatic construction of `TextureFormat::Astc` with no additional imports required.

## Solution

Exported the two component enums `AstcBlock` and `AstcChannel` used in `TextureFormat::Astc` construction.

## Testing

I did not test this, the change seemed pretty safe. :)

----------------------------------------

PR #14406: feat: expose the default font bytes
Author: seabassjh
Merged at: 2024-07-22 19:26:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14406
Description:
# Objective

- Enables use cases where third-party crates would want to use the default font as well [see linebender's use](https://github.com/linebender/bevy_vello/pull/66)

## Solution

- Uses `include_bytes` macro and make it `pub`

----------------------------------------

PR #14375: Fix the example regressions from packed growable buffers.
Author: pcwalton
Merged at: 2024-07-22 19:22:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14375
Description:
The "uberbuffers" PR #14257 caused some examples to fail intermittently for different reasons:

1. `morph_targets` could fail because vertex displacements for morph targets are keyed off the vertex index. With buffer packing, the vertex index can vary based on the position in the buffer, which caused the morph targets to be potentially incorrect. The solution is to include the first vertex index with the `MeshUniform` (and `MeshInputUniform` if GPU preprocessing is in use), so that the shader can calculate the true vertex index before performing the morph operation. This results in wasted space in `MeshUniform`, which is unfortunate, but we'll soon be filling in the padding with the ID of the material when bindless textures land, so this had to happen sooner or later anyhow.

   Including the vertex index in the `MeshInputUniform` caused an ordering problem. The `MeshInputUniform` was created during the extraction phase, before the allocations occurred, so the extraction logic didn't know where the mesh vertex data was going to end up. The solution is to move the `MeshInputUniform` creation (the `collect_meshes_for_gpu_building` system) to after the allocations phase. This should be better for parallelism anyhow, because it allows the extraction phase to finish quicker. It's also something we'll have to do for bindless in any event.

2. The `lines` and `fog_volumes` examples could fail because their custom drawing nodes weren't updated to supply the vertex and index offsets in their `draw_indexed` and `draw` calls. This commit fixes this oversight.

Fixes #14366.
----------------------------------------

PR #14373: Optimize transform propagation
Author: CrazyRoka
Merged at: 2024-07-22 19:22:04+00:00
URL: https://github.com/bevyengine/bevy/pull/14373
Description:
# Objective

- Optimize the `propagate_recursive` function in the transform system to reduce CPU usage.
- Addresses performance bottleneck in transform propagation, especially for scenes with complex hierarchies.

## Solution

- Avoided unnecessary cloning of `global_transform` when creating the tuple in the `propagate_recursive` function.
- Used `as_ref()` method on `Mut<GlobalTransform>` when passing it to the recursive call, avoiding an extra dereference.
- These changes significantly reduced the CPU usage of this function from 4.91% to 1.16% of self function time.

## Testing

- Performance testing was conducted using the Hotspot GUI tool, comparing CPU usage before and after the changes.
- `cargo run --release --example many_foxes`
- Tested on Fedora Linux.
---

## Showcase

Here are the PERF GUI results showing the improvement in CPU usage:

### Before
![image](https://github.com/user-attachments/assets/b5c52800-710b-4793-bf75-33e3eb1d2083)

### After
![image](https://github.com/user-attachments/assets/654a4feb-924c-41c8-8ff9-3a1027bd28b9)

As we can see, the CPU usage for the `propagate_recursive` function has been reduced from 4.91% to 1.16%, resulting in a significant performance improvement.

## Migration Guide

This change does not introduce any breaking changes. Users of the Bevy engine will automatically benefit from this performance improvement without needing to modify their code.
----------------------------------------

PR #14273: Move `Msaa` to component
Author: tychedelia
Merged at: 2024-07-22 18:45:17+00:00
URL: https://github.com/bevyengine/bevy/pull/14273
Description:
Switches `Msaa` from being a globally configured resource to a per camera view component.

Closes #7194

# Objective

Allow individual views to describe their own MSAA settings. For example, when rendering to different windows or to different parts of the same view.

## Solution

Make `Msaa` a component that is required on all camera bundles.

## Testing

Ran a variety of examples to ensure that nothing broke.

TODO:
- [ ] Make sure android still works per previous comment in `extract_windows`.

---

## Migration Guide

`Msaa` is no longer configured as a global resource, and should be specified on each spawned camera if a non-default setting is desired.
----------------------------------------

PR #14367: Unignore `Camera.target` field for reflection
Author: SludgePhD
Merged at: 2024-07-22 19:04:13+00:00
URL: https://github.com/bevyengine/bevy/pull/14367
Description:
# Objective

- The `RenderTarget` type wasn't being registered, and the `target` field of `Camera` was marked as ignored, so it wasn't inspectable by editors.

## Solution

- Remove `#[reflect(ignore)]` from the field
- I've also reordered the `Default` impl of `RenderTarget` because it looked like it belonged to a different type

----------------------------------------

PR #13217: allow more configuration for showcase from the CLI
Author: mockersf
Merged at: 2024-07-22 18:55:23+00:00
URL: https://github.com/bevyengine/bevy/pull/13217
Description:
# Objective

- The default values hard coded in the showcase script may not make sense depending on your hardware

## Solution

- Let them be customised from the CLI

----------------------------------------

PR #14260: Fix incorrect function calls to hsv_to_rgb in render debug code.
Author: Soulghost
Merged at: 2024-07-22 18:41:00+00:00
URL: https://github.com/bevyengine/bevy/pull/14260
Description:
# Objective

- Fixes https://github.com/bevyengine/bevy/issues/14139

## Solution

- correct the input parameters at these call sites.

## Testing

1. Use a 3D scene example with PBR lighting and shadows enabled, such as the `shadow_caster_receiver` and `load_gltf` example, for testing.
2. Enable relevant shader defines in crates/bevy_pbr/src/pbr_material.rs for the StandardMaterial.
```rust
impl Material for StandardMaterial {
    // ...
    fn specialize(
            _pipeline: &MaterialPipeline<Self>,
            descriptor: &mut RenderPipelineDescriptor,
            _layout: &MeshVertexBufferLayoutRef,
            key: MaterialPipelineKey<Self>,
        ) -> Result<(), SpecializedMeshPipelineError> {
            // ...
            // shader_defs.push("CLUSTERED_FORWARD_DEBUG_Z_SLICES".into());
            // shader_defs.push("CLUSTERED_FORWARD_DEBUG_CLUSTER_COHERENCY".into());
            shader_defs.push("DIRECTIONAL_LIGHT_SHADOW_MAP_DEBUG_CASCADES".into());
            // ...
    }
}
``` 

## Showcase
### CLUSTERED_FORWARD_DEBUG_Z_SLICES
- example: examples/3d/shadow_caster_receiver.rs
![Screenshot2024_07_10_143150](https://github.com/bevyengine/bevy/assets/6300263/fbd12712-5cb9-489d-a7d1-ed55f72fb234)

### CLUSTERED_FORWARD_DEBUG_CLUSTER_COHERENCY
- example: examples/3d/shadow_caster_receiver.rs
![Screenshot2024_07_10_143312](https://github.com/bevyengine/bevy/assets/6300263/8eca5d7a-27b6-4ff5-9f8d-d10b49b3f990)

### DIRECTIONAL_LIGHT_SHADOW_MAP_DEBUG_CASCADES
For this one, we need to use a large scene and modity the `CascadeShadowConfigBuilder`, here is a simple patch for the `load_gltf` example:
```
diff --git a/examples/3d/load_gltf.rs b/examples/3d/load_gltf.rs
index 358446238..9403aa288 100644
--- a/examples/3d/load_gltf.rs
+++ b/examples/3d/load_gltf.rs
@@ -18,7 +18,7 @@ fn main() {
 fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
     commands.spawn((
         Camera3dBundle {
-            transform: Transform::from_xyz(0.7, 0.7, 1.0)
+            transform: Transform::from_xyz(0.7, 0.7, 2.0)
                 .looking_at(Vec3::new(0.0, 0.3, 0.0), Vec3::Y),
             ..default()
         },
@@ -39,30 +39,40 @@ fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
         // We also adjusted the shadow map to be larger since we're
         // only using a single cascade.
         cascade_shadow_config: CascadeShadowConfigBuilder {
-            num_cascades: 1,
-            maximum_distance: 1.6,
+            num_cascades: 5,
+            maximum_distance: 20.0,
             ..default()
         }
         .into(),
         ..default()
     });
+
     commands.spawn(SceneBundle {
         scene: asset_server
             .load(GltfAssetLabel::Scene(0).from_asset("models/FlightHelmet/FlightHelmet.gltf")),
         ..default()
     });
+
+    for i in 1..=10 {
+        commands.spawn(SceneBundle {
+            scene: asset_server
+                .load(GltfAssetLabel::Scene(0).from_asset("models/FlightHelmet/FlightHelmet.gltf")),
+            transform: Transform::from_xyz(i as f32 * 0.5, 0.0, i as f32 * -2.0),
+            ..default()
+        });
+    }
 }
 
 fn animate_light_direction(
     time: Res<Time>,
     mut query: Query<&mut Transform, With<DirectionalLight>>,
 ) {
-    for mut transform in &mut query {
-        transform.rotation = Quat::from_euler(
-            EulerRot::ZYX,
-            0.0,
-            time.elapsed_seconds() * PI / 5.0,
-            -FRAC_PI_4,
-        );
-    }
+    // for mut transform in &mut query {
+    //     transform.rotation = Quat::from_euler(
+    //         EulerRot::ZYX,
+    //         0.0,
+    //         time.elapsed_seconds() * PI / 5.0,
+    //         -FRAC_PI_4,
+    //     );
+    // }
 }
``` 
![Screenshot2024_07_10_145737](https://github.com/bevyengine/bevy/assets/6300263/c5c71894-f9f7-45fa-9b4f-598e324b42d0)

----------------------------------------

PR #14256: Prevent division by zero in HWBA to HSVA conversions
Author: ickshonpe
Merged at: 2024-07-22 18:41:00+00:00
URL: https://github.com/bevyengine/bevy/pull/14256
Description:
# Problem

Division by zero in `crates/bevy_color/src/hsva.rs` when `blackness` is `1`:

```rust
impl From<Hwba> for Hsva {
    fn from(
        Hwba {
            hue,
            whiteness,
            blackness,
            alpha,
        }: Hwba,
    ) -> Self {
        // Based on https://en.wikipedia.org/wiki/HWB_color_model#Conversion
        let value = 1. - blackness;
        let saturation = 1. - (whiteness / value);

        Hsva::new(hue, saturation, value, alpha)
    }
}
```

## Solution
With `Hsva` colors if the `value` component is set to `0.`  the output will be pure black regardless of the values of the `hue` or `saturation` components.

So if `value` is `0`, we don't need to calculate a `saturation` value and can just set it to `0`:

```rust
impl From<Hwba> for Hsva {
    fn from(
        Hwba {
            hue,
            whiteness,
            blackness,
            alpha,
        }: Hwba,
    ) -> Self {
        // Based on https://en.wikipedia.org/wiki/HWB_color_model#Conversion
        let value = 1. - blackness;
        let saturation = if value != 0. {
            1. - (whiteness / value)
        } else {
            0.
        };

        Hsva::new(hue, saturation, value, alpha)
    }
}

```
----------------------------------------

PR #14128: implement DoubleEndedIterator for QueryManyIter
Author: Victoronz
Merged at: 2024-07-22 18:41:00+00:00
URL: https://github.com/bevyengine/bevy/pull/14128
Description:
# Objective

We currently cannot iterate from the back of `QueryManyIter`.

## Solution

Implement `DoubleEndedIterator` for `QueryManyIter` and add a `fetch_next_back` method. These impls are bounded on the underlying `entity_iter` implementing `DoubleEndedIterator`.

## Changelog

Added `DoubleEndedIterator` implementation for `QueryManyIter`.
Added the `fetch_next_back` method to `QueryManyIter`. 

----------------------------------------

PR #14377: docs: Fix incorrect docs in the run conditions example
Author: LiamGallagher737
Merged at: 2024-07-20 17:07:28+00:00
URL: https://github.com/bevyengine/bevy/pull/14377
Description:
## Objective

Make the docs say the right thing.

## Solution

Edit the docs so they say the right thing.

Seems like overtime the example has changed but the comment did not change with it. It originally was a AND but is now an OR.
----------------------------------------

PR #14357: Using Cas instead of CAS #14341
Author: Cioraz
Merged at: 2024-07-20 18:28:10+00:00
URL: https://github.com/bevyengine/bevy/pull/14357
Description:
# Objective

- Replacing CAS with Cas in CASPlugin
- Closes #14341

## Solution

- Simple replace




----------------------------------------

PR #14360: fix building cargo_gltf with feature dds
Author: mockersf
Merged at: 2024-07-20 18:11:20+00:00
URL: https://github.com/bevyengine/bevy/pull/14360
Description:
# Objective

- Building bevy_gltf with feature dds fails:
```
> cargo build -p bevy_gltf --features dds
   Compiling bevy_core_pipeline v0.15.0-dev (crates/bevy_core_pipeline)
error[E0061]: this function takes 7 arguments but 6 arguments were supplied
   --> crates/bevy_core_pipeline/src/tonemapping/mod.rs:442:5
    |
442 |     Image::from_buffer(
    |     ^^^^^^^^^^^^^^^^^^
...
445 |         bytes,
    |         ----- an argument of type `std::string::String` is missing
    |
note: associated function defined here
   --> crates/bevy_render/src/texture/image.rs:709:12
    |
709 |     pub fn from_buffer(
    |            ^^^^^^^^^^^
help: provide the argument
    |
442 |     Image::from_buffer(/* std::string::String */, bytes, image_type, CompressedImageFormats::NONE, false, image_sampler, RenderAssetUsages::RENDER_WORLD)
    |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For more information about this error, try `rustc --explain E0061`.
error: could not compile `bevy_core_pipeline` (lib) due to 1 previous error
```
- If you're fixing a specific issue, say "Fixes #X".

## Solution

- enable dds feature in bevy_core_pipeline

## Testing

- `cargo build -p bevy_gltf --features dds`

----------------------------------------

PR #14405: Fix button placement in `split_screen` example
Author: rparrett
Merged at: 2024-07-20 17:33:46+00:00
URL: https://github.com/bevyengine/bevy/pull/14405
Description:
# Objective

Fixes the buttons in `split_screen` touching the edge of the viewport.

## Solution

This seems like it might potentially be "normal css-like" behavior with absolutely positioned nodes and padding.
<details>
<summary>HTML test</summary>

```html
<html>
<body>
    <div style="width: 100%; height: 100%; padding: 20px;">
        <div style="width: 100%; height: 100%; padding: 20px; display: flex; justify-content: space-between; align-items: center">
            <div style="width: 40px; height: 40px; border: 1px solid black;">&lt;</div>
            <div style="width: 40px; height: 40px; border: 1px solid black;">&gt;</div>
        </div>
    </div>
</body>
</html>
```

</details>

Instead I just removed the padding from the root node.

## Testing

Added ui debug gizmos to the example and checked before/after.

Before:
<img width="1280" alt="Screenshot 2024-07-20 at 9 23 09‚ÄØAM" src="https://github.com/user-attachments/assets/f3cac637-8de9-4acf-bb13-994791998bb7">

After:
<img width="1280" alt="Screenshot 2024-07-20 at 9 37 27‚ÄØAM" src="https://github.com/user-attachments/assets/4d3c23b4-5a48-45da-b8a5-a394fd34a44b">
----------------------------------------

PR #14374: Fix tracing with `transform_hierarchy` example
Author: rparrett
Merged at: 2024-07-20 16:54:18+00:00
URL: https://github.com/bevyengine/bevy/pull/14374
Description:
# Objective

Fixes #7433
Alternative to #14323

## Solution

Add `DefaultPlugins` so we actually have tracing spans when using `trace_tracy` or `trace_chrome`.

## Testing

```
cargo run --release --features trace_tracy --example transform_hierarchy large_tree
```
This now connects to Tracy and sends a bunch of data.
----------------------------------------

PR #14372: Make `Viewport::default()` return a 1x1 viewport
Author: SludgePhD
Merged at: 2024-07-20 14:34:56+00:00
URL: https://github.com/bevyengine/bevy/pull/14372
Description:
# Objective

- The current default viewport crashes bevy due to a wgpu validation error, this PR fixes that
- Fixes https://github.com/bevyengine/bevy/issues/14355

## Solution

- `Viewport::default()` now returns a 1x1 viewport

## Testing

- I modified the `3d_viewport_to_world` example to use `Viewport::default()`, and it works as expected (only the top-left pixel is rendered)

----------------------------------------

PR #14290: Add support for environment map transformation
Author: Soulghost
Merged at: 2024-07-19 15:18:23+00:00
URL: https://github.com/bevyengine/bevy/pull/14290
Description:
# Objective

- Fixes: https://github.com/bevyengine/bevy/issues/14036

## Solution

- Add a world space transformation for the environment sample direction.

## Testing

- I have tested the newly added `transform` field using the newly added `rotate_environment_map` example. 

https://github.com/user-attachments/assets/2de77c65-14bc-48ee-b76a-fb4e9782dbdb


## Migration Guide

- Since we have added a new filed to the `EnvironmentMapLight` struct, users will need to include `..default()` or some rotation value in their initialization code.

----------------------------------------

PR #14390: Make the `GltfNode::children` links actually point to children.
Author: pcwalton
Merged at: 2024-07-19 11:42:21+00:00
URL: https://github.com/bevyengine/bevy/pull/14390
Description:
Due to a bug in `load_gltf`, the `GltfNode::children` links of each node actually point to the node itself, rather than to the node's children. This commit fixes that bug.

Note that this didn't affect the scene hierarchy of the instantiated glTF, only the hierarchy as present in the `GltfNode` assets. This is likely why the bug was never noticed until now.
----------------------------------------

PR #14369: Make names of closure systems changable
Author: flash-freezing-lava
Merged at: 2024-07-18 18:25:27+00:00
URL: https://github.com/bevyengine/bevy/pull/14369
Description:
# Objective

When using tracing or [`bevy_mod_debugdump`](https://github.com/jakobhellermann/bevy_mod_debugdump), the names of function systems produced by closures are either ambiguous (like `game::mainapp::{closure}` when tracing) or too long (`bevy_mod_debugdump` includes full type signature if no name given), which makes debugging with tracing difficult.

## Solution
Add a function `with_name` to rename a system. The proposed API can be used in the following way:
```rust
app
    .add_systems(Startup, IntoSystem::into_system(|name: SystemName| {
        println!("System name: {}", name.name().to_owned());
    }).with_name("print_test_system"));
```

## Testing
- There is a test in `bevy_ecs::system:system_name::test_closure_system_name_regular_param`
----------------------------------------

PR #14381: Recalibrated observe benchmark
Author: re0312
Merged at: 2024-07-18 18:42:02+00:00
URL: https://github.com/bevyengine/bevy/pull/14381
Description:
# Objective

- The event propagation benchmark is largely derived from bevy_eventlistener. However, it doesn't accurately reflect performance of bevy side, as our event bubble propagation is based on observer.


## Solution

- added several new benchmarks that focuse on observer itself rather than event bubble




----------------------------------------

PR #13950: Test for ambiguous system ordering in CI
Author: Vrixyz
Merged at: 2024-07-17 21:21:49+00:00
URL: https://github.com/bevyengine/bevy/pull/13950
Description:
Progress towards https://github.com/bevyengine/bevy/issues/7386.

Following discussion https://discord.com/channels/691052431525675048/1253260494538539048/1253387942311886960

This Pull Request adds an example to detect system order ambiguities, and also asserts none exist.

A lot of schedules are ignored in ordered to have the test passing, we should thrive to make them pass, but in other pull requests.

<details><summary>example output <b>summary</b>, without ignored schedules</summary>
<p>

```txt
$ cargo run --example ambiguity_detection 2>&1 | grep -C 1 "pairs of syst"
2024-06-21T13:17:55.776585Z  WARN bevy_ecs::schedule::schedule: Schedule First has ambiguities.
1 pairs of systems with conflicting data access have indeterminate execution order. Consider adding `before`, `after`, or `ambiguous_with` relationships between these:
 -- bevy_time::time_system (in set TimeSystem) and bevy_ecs::event::event_update_system (in set EventUpdates)
--
2024-06-21T13:17:55.782265Z  WARN bevy_ecs::schedule::schedule: Schedule PreUpdate has ambiguities.
11 pairs of systems with conflicting data access have indeterminate execution order. Consider adding `before`, `after`, or `ambiguous_with` relationships between these:
 -- bevy_pbr::prepass::update_mesh_previous_global_transforms and bevy_asset::server::handle_internal_asset_events
--
2024-06-21T13:17:55.809516Z  WARN bevy_ecs::schedule::schedule: Schedule PostUpdate has ambiguities.
63 pairs of systems with conflicting data access have indeterminate execution order. Consider adding `before`, `after`, or `ambiguous_with` relationships between these:
 -- bevy_ui::accessibility::image_changed and bevy_ecs::schedule::executor::apply_deferred
--
2024-06-21T13:17:55.816287Z  WARN bevy_ecs::schedule::schedule: Schedule Last has ambiguities.
3 pairs of systems with conflicting data access have indeterminate execution order. Consider adding `before`, `after`, or `ambiguous_with` relationships between these:
 -- bevy_gizmos::update_gizmo_meshes<bevy_gizmos::aabb::AabbGizmoConfigGroup> (in set UpdateGizmoMeshes) and bevy_gizmos::update_gizmo_meshes<bevy_gizmos::light::LightGizmoConfigGroup> (in set UpdateGizmoMeshes)
--
2024-06-21T13:17:55.831074Z  WARN bevy_ecs::schedule::schedule: Schedule ExtractSchedule has ambiguities.
296 pairs of systems with conflicting data access have indeterminate execution order. Consider adding `before`, `after`, or `ambiguous_with` relationships between these:
 -- bevy_render::extract_component::extract_components<bevy_sprite::SpriteSource> and bevy_render::render_asset::extract_render_asset<bevy_sprite::mesh2d::material::PreparedMaterial2d<bevy_sprite::mesh2d::color_material::ColorMaterial>>
```

</p>
</details> 

To try locally: 
```sh
CI_TESTING_CONFIG="./.github/example-run/ambiguity_detection.ron" cargo run --example ambiguity_detection --features "bevy_ci_testing,trace,trace_chrome"
```
----------------------------------------

PR #14364: Derive and reflect `Debug` for `CameraRenderGraph`
Author: SludgePhD
Merged at: 2024-07-17 19:56:27+00:00
URL: https://github.com/bevyengine/bevy/pull/14364
Description:
# Objective

- `CameraRenderGraph` is not inspectable via reflection, but should be (the name of the configured render graph should be visible in editors, etc.)

## Solution

- Derive and reflect `Debug` for `CameraRenderGraph`
----------------------------------------

PR #14354: Update `trigger_observers` to operate over slices of data
Author: mnmaita
Merged at: 2024-07-17 13:19:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14354
Description:
# Objective

- Fixes #14333 

## Solution

- Updated `trigger_observers` signature to operate over a slice instead of an `Iterator`.
- Updated calls to `trigger_observers` to match the new signature.

---

## Migration Guide

- TBD
----------------------------------------

PR #14330: Specify test group names in github summary for compile fail tests
Author: Brezak
Merged at: 2024-07-15 16:36:14+00:00
URL: https://github.com/bevyengine/bevy/pull/14330
Description:
# Objective

The github action summary titles every compile test group as `compile_fail_utils`.

![image](https://github.com/user-attachments/assets/9d00a113-6772-430c-8da9-bffe6a60a8f8)

## Solution

Manually specify group names for compile fail tests.

## Testing

- Wait for compile fail tests to run.
- Observe the generated summary.

----------------------------------------

PR #14347: Fix the dev docs robots.txt containing a literal \n instead of a newline
Author: Brezak
Merged at: 2024-07-16 18:03:54+00:00
URL: https://github.com/bevyengine/bevy/pull/14347
Description:
# Objective

The robots.txt file for the [dev docs](https://dev-docs.bevyengine.org) looks like this `User-Agent: *\nDisallow: /`
It should look like this
```
User-Agent: *
Disallow: /
```

## Solution

Use [`ANSI-C`](https://www.gnu.org/software/bash/manual/bash.html#ANSI_002dC-Quoting) quoting to properly handle the `\n`

## Testing

- [x] Run the fixed echo command in local terminal.
- [x] Wait for the dev doces to deploy and observe if the mistake has been fixed


----------------------------------------

PR #14338: Fix error/typo in SMAA shader
Author: Luracasmus
Merged at: 2024-07-15 23:58:09+00:00
URL: https://github.com/bevyengine/bevy/pull/14338
Description:
# Objective

- Actually use the value assigned to `d_xz`, like in [the original SMAA implementation](https://github.com/iryoku/smaa/blob/master/SMAA.hlsl#L960). This not already being the case was likely a mistake when converting from HLSL to WGSL

## Solution

- Use `d_xz.x` and `d_xz.y` instead of `d.x` and `d.z`

## Testing

- Quickly tested on Windows 11, `x86_64-pc-windows-gnu` `1.79.0` with the latest NVIDIA drivers. App runs with SMAA enabled and everything seems to work as intended
- I didn't observe any major visual difference between this and the previous version, though this should be more correct as it matches the original SMAA implementation
----------------------------------------

PR #14234: Fix inaccurate docs for `Commands::spawn_empty`
Author: benfrankel
Merged at: 2024-07-15 15:47:09+00:00
URL: https://github.com/bevyengine/bevy/pull/14234
Description:
# Objective

`Commands::spawn_empty` docs say that it queues a command to spawn an entity, but it doesn't. It immediately reserves an `Entity` to be spawned at the next flush point, which is possible because `Entities::reserve_entity()` takes `&self` and no components are added yet.

## Solution

Fix docs.
----------------------------------------

PR #14173: Deduplicate Wasm optimization instructions
Author: benfrankel
Merged at: 2024-07-06 15:53:28+00:00
URL: https://github.com/bevyengine/bevy/pull/14173
Description:
See https://github.com/bevyengine/bevy-website/pull/1538 for context.
----------------------------------------

PR #14325: Added `new` method to Cone 3D primitive
Author: FarmingtonS9
Merged at: 2024-07-16 13:16:16+00:00
URL: https://github.com/bevyengine/bevy/pull/14325
Description:
Reference to #14299.

# Objective
- Ensuring consistent practice of instantiating 3D primitive shapes in Bevy.

## Solution

- Add `new` method, containing `radius` and `height` arguments, to Cone 3D primitive shape.

## Testing

- Instantiated cone using same values (radius is `2.` and height is `5.`), using the current method and the added `new` method.
- Basic setup of Bevy Default Plugins and `3DCameraBundle`.


---

## Showcase

<details>
  <summary>Click to view showcase</summary>

```rust
use bevy::prelude::*;

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .add_systems(Startup, setup)
        .run();
}

fn setup(
    mut commands: Commands,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
) {
    let new_cone = meshes.add(Cone::new(2., 5.));
    commands.spawn(PbrBundle {
        mesh: new_cone,
        ..default()
    });

    let old_cone = meshes.add(Cone {
        radius: 2.,
        height: 5.,
    });
    commands.spawn(PbrBundle {
        mesh: old_cone,
        material: materials.add(Color::WHITE),
        transform: Transform::from_xyz(10., 0., 0.),
        ..default()
    });

    commands.spawn(Camera3dBundle {
        transform: Transform::from_xyz(20., 20., 20.).looking_at(Vec3::ZERO, Dir3::Y),
        ..default()
    });
}
```

</details>

![image](https://github.com/user-attachments/assets/267f8124-8734-4c20-8840-fcf35375a778)


- Pink Cone is created using the `new` method.
- Black Cone is created using the existing method.

## Migration Guide
- Addition of `new` method to the 3D primitive Cone struct.

----------------------------------------

PR #14345: update bunny meshlet url
Author: mockersf
Merged at: 2024-07-16 22:24:33+00:00
URL: https://github.com/bevyengine/bevy/pull/14345
Description:
# Objective

- https://github.com/bevyengine/bevy/pull/14193 changed the bunny meshlet url but didn't update example metadata

## Solution

- Also update the url there

----------------------------------------

PR #14201: bevy_reflect: Improve `DynamicFunction` ergonomics
Author: MrGVSV
Merged at: 2024-07-16 13:18:54+00:00
URL: https://github.com/bevyengine/bevy/pull/14201
Description:
# Objective

Many functions can be converted to `DynamicFunction` using `IntoFunction`. Unfortunately, we are limited by Rust itself and the implementations are far from exhaustive. For example, we can't convert functions with more than 16 arguments. Additionally, we can't handle returns with lifetimes not tied to the lifetime of the first argument.

In such cases, users will have to create their `DynamicFunction` manually.

Let's take the following function:

```rust
fn get(index: usize, list: &Vec<String>) -> &String {
    &list[index]
}
```

This function cannot be converted to a `DynamicFunction` via `IntoFunction` due to the lifetime of the return value being tied to the second argument. Therefore, we need to construct the `DynamicFunction` manually:

```rust
DynamicFunction::new(
    |mut args, info| {
        let list = args
            .pop()
            .unwrap()
            .take_ref::<Vec<String>>(&info.args()[1])?;
        let index = args.pop().unwrap().take_owned::<usize>(&info.args()[0])?;
        Ok(Return::Ref(get(index, list)))
    },
    FunctionInfo::new()
        .with_name("get")
        .with_args(vec![
            ArgInfo::new::<usize>(0).with_name("index"),
            ArgInfo::new::<&Vec<String>>(1).with_name("list"),
        ])
        .with_return_info(ReturnInfo::new::<&String>()),
);
```

While still a small and straightforward snippet, there's a decent amount going on here. There's a lot of room for improvements when it comes to ergonomics and readability.

The goal of this PR is to address those issues.

## Solution

Improve the ergonomics and readability of manually created `DynamicFunction`s.

Some of the major changes:
1. Removed the need for `&ArgInfo` when reifying arguments (i.e. the `&info.args()[1]` calls)
2. Added additional `pop` methods on `ArgList` to handle both popping and casting
3. Added `take` methods on `ArgList` for taking the arguments out in order
4. Removed the need for `&FunctionInfo` in the internal closure (Change 1 made it no longer necessary)
5. Added methods to automatically handle generating `ArgInfo` and `ReturnInfo`

With all these changes in place, we get something a lot nicer to both write and look at:

```rust
DynamicFunction::new(
    |mut args| {
        let index = args.take::<usize>()?;
        let list = args.take::<&Vec<String>>()?;
        Ok(Return::Ref(get(index, list)))
    },
    FunctionInfo::new()
        .with_name("get")
        .with_arg::<usize>("index")
        .with_arg::<&Vec<String>>("list")
        .with_return::<&String>(),
);
```

Alternatively, to rely on type inference for taking arguments, you could do:

```rust
DynamicFunction::new(
    |mut args| {
        let index = args.take_owned()?;
        let list = args.take_ref()?;
        Ok(Return::Ref(get(index, list)))
    },
    FunctionInfo::new()
        .with_name("get")
        .with_arg::<usize>("index")
        .with_arg::<&Vec<String>>("list")
        .with_return::<&String>(),
);
```

## Testing

You can test locally by running:

```
cargo test --package bevy_reflect
```

---

## Changelog

- Removed `&ArgInfo` argument from `FromArg::from_arg` trait method
- Removed `&ArgInfo` argument from `Arg::take_***` methods
- Added `ArgValue`
- `Arg` is now a struct containing an `ArgValue` and an argument `index`
- `Arg::take_***` methods now require `T` is also `TypePath`
- Added `Arg::new`, `Arg::index`, `Arg::value`, `Arg::take_value`, and `Arg::take` methods
- Replaced `ArgId` in `ArgError` with just the argument `index`
- Added `ArgError::EmptyArgList`
- Renamed `ArgList::push` to `ArgList::push_arg`
- Added `ArgList::pop_arg`, `ArgList::pop_owned`, `ArgList::pop_ref`, and `ArgList::pop_mut`
- Added `ArgList::take_arg`, `ArgList::take_owned`, `ArgList::take_ref`, `ArgList::take_mut`, and `ArgList::take`
- `ArgList::pop` is now generic
- Renamed `FunctionError::InvalidArgCount` to `FunctionError::ArgCountMismatch`
- The closure given to `DynamicFunction::new` no longer has a `&FunctionInfo` argument
- Added `FunctionInfo::with_arg`
- Added `FunctionInfo::with_return`

## Internal Migration Guide

> [!important]
> Function reflection was introduced as part of the 0.15 dev cycle. This migration guide was written for developers relying on `main` during this cycle, and is not a breaking change coming from 0.14.

* The `FromArg::from_arg` trait method and the `Arg::take_***` methods no longer take a `&ArgInfo` argument.
* What used to be `Arg` is now `ArgValue`. `Arg` is now a struct which contains an `ArgValue`.
* `Arg::take_***` methods now require `T` is also `TypePath`
* Instances of `id: ArgId` in `ArgError` have been replaced with `index: usize`
* `ArgList::push` is now `ArgList::push_arg`. It also takes the new `ArgValue` type.
* `ArgList::pop` has become `ArgList::pop_arg` and now returns `ArgValue`. `Arg::pop` now takes a generic type and downcasts to that type. It's recommended to use `ArgList::take` and friends instead since they allow removing the arguments from the list in the order they were pushed (rather than reverse order).
* `FunctionError::InvalidArgCount` is now `FunctionError::ArgCountMismatch`
* The closure given to `DynamicFunction::new` no longer has a `&FunctionInfo` argument. This argument can be removed.

----------------------------------------

PR #14283: Add insert_by_id and try_insert_by_id to EntityCommands
Author: SOF3
Merged at: 2024-07-15 23:54:59+00:00
URL: https://github.com/bevyengine/bevy/pull/14283
Description:
# Objective

- Allow queuing insertion of dynamic components to an existing entity

## Solution

- Add `insert_by_id<T: Send + 'static>(commands: &mut EntityCommands, component_id: ComponentId, value: T)` and the `try_insert_by_id` counterpart

## Testing

TODO

- Did you test these changes? If so, how?
- Are there any parts that need more testing?
- How can other people (reviewers) test your changes? Is there anything specific they need to know?
- If relevant, what platforms did you test these changes on, and are there any important ones you can't test?

## Alternatives

This PR is not feature-complete for dynamic components. In particular, it
- only supports one component
- only supports adding components with a known, sized type

These were not implemented because doing so would require enhancing `CommandQueue` to support pushing unsized commands (or equivalently, pushing commands with a buffer of data). Even so, the cost would not be transparent compared to the implementation in this PR, which simply captures the `ComponentId` and `value: T` into the command closure and can be easily memcpy'ed to the stack during execution. For example, to efficiently pass `&[ComponentId]` from the caller to the world, we would need to:

1. Update `CommandQueue.bytes` from `Vec<MaybeUninit<u8>>` to `Vec<MaybeUninit<usize>>` so that it has the same alignment as `ComponentId` (which probably needs to be made `#[repr(transparent)]` too)
2. After pushing the Command metadata, push padding bytes until the vec len is a multiple of `size_of::<usize>()`
3. Store `components.len()` in the data
4. memcpy the user-provided `&[ComponentId]` to `CommandQueue.bytes`
5. During execution, round up the data pointer behind the `Command` to skip padding, then cast the pointer and consume it as a `&[ComponentId]`

The effort here seems unnecessarily high, unless someone else has such a requirement. At least for the use case I am working with, I only need a single known type, and if we need multiple components, we could always enhance this function to accept a `[ComponentId; N]`.

I recommend enhancing the `Bundle` API in the long term to achieve this goal more elegantly.
----------------------------------------

PR #14141: bevy_reflect: Add `DynamicClosure` and `DynamicClosureMut`
Author: MrGVSV
Merged at: 2024-07-16 03:39:25+00:00
URL: https://github.com/bevyengine/bevy/pull/14141
Description:
# Objective

As mentioned in [this](https://github.com/bevyengine/bevy/pull/13152#issuecomment-2198387297) comment, creating a function registry (see #14098) is a bit difficult due to the requirements of `DynamicFunction`. Internally, a `DynamicFunction` contains a `Box<dyn FnMut>` (the function that reifies reflected arguments and calls the actual function), which requires `&mut self` in order to be called.

This means that users would require a mutable reference to the function registry for it to be useful‚Äî which isn't great. And they can't clone the `DynamicFunction` either because cloning an `FnMut` isn't really feasible (wrapping it in an `Arc` would allow it to be cloned but we wouldn't be able to call the clone since we need a mutable reference to the `FnMut`, which we can't get with multiple `Arc`s still alive, requiring us to also slap in a `Mutex`, which adds additional overhead).

And we don't want to just replace the `dyn FnMut` with `dyn Fn` as that would prevent reflecting closures that mutate their environment.

Instead, we need to introduce a new type to split the requirements of `DynamicFunction`.

## Solution

Introduce new types for representing closures.

Specifically, this PR introduces `DynamicClosure` and `DynamicClosureMut`. Similar to how `IntoFunction` exists for `DynamicFunction`, two new traits were introduced: `IntoClosure` and `IntoClosureMut`.

Now `DynamicFunction` stores a `dyn Fn` with a `'static` lifetime. `DynamicClosure` also uses a `dyn Fn` but has a lifetime, `'env`, tied to its environment. `DynamicClosureMut` is most like the old `DynamicFunction`, keeping the `dyn FnMut` and also typing its lifetime, `'env`, to the environment

Here are some comparison tables:

|   | `DynamicFunction` | `DynamicClosure` | `DynamicClosureMut` |
| - | ----------------- | ---------------- | ------------------- |
| Callable with `&self` | ‚úÖ | ‚úÖ | ‚ùå |
| Callable with `&mut self` | ‚úÖ | ‚úÖ | ‚úÖ |
| Allows for non-`'static` lifetimes | ‚ùå | ‚úÖ | ‚úÖ |

|   | `IntoFunction` | `IntoClosure` | `IntoClosureMut` |
| - | -------------- | ------------- | ---------------- |
| Convert `fn` functions | ‚úÖ | ‚úÖ | ‚úÖ |
| Convert `fn` methods | ‚úÖ | ‚úÖ | ‚úÖ |
| Convert anonymous functions | ‚úÖ | ‚úÖ | ‚úÖ |
| Convert closures that capture immutable references | ‚ùå | ‚úÖ | ‚úÖ |
| Convert closures that capture mutable references | ‚ùå | ‚ùå | ‚úÖ |
| Convert closures that capture owned values | ‚ùå[^1] | ‚úÖ | ‚úÖ |

[^1]: Due to limitations in Rust, `IntoFunction` can't be implemented for just functions (unless we forced users to manually coerce them to function pointers first). So closures that meet the trait requirements _can technically_ be converted into a `DynamicFunction` as well. To both future-proof and reduce confusion, though, we'll just pretend like this isn't a thing.

```rust
let mut list: Vec<i32> = vec![1, 2, 3];

// `replace` is a closure that captures a mutable reference to `list`
let mut replace = |index: usize, value: i32| -> i32 {
  let old_value = list[index];
  list[index] = value;
  old_value
};

// Convert the closure into a dynamic closure using `IntoClosureMut::into_closure_mut`
let mut func: DynamicClosureMut = replace.into_closure_mut();

// Dynamically call the closure:
let args = ArgList::default().push_owned(1_usize).push_owned(-2_i32);
let value = func.call_once(args).unwrap().unwrap_owned();

// Check the result:
assert_eq!(value.take::<i32>().unwrap(), 2);
assert_eq!(list, vec![1, -2, 3]);
```

### `ReflectFn`/`ReflectFnMut`

To make extending the function reflection system easier (the blanket impls for `IntoFunction`, `IntoClosure`, and `IntoClosureMut` are all incredibly short), this PR generalizes callables with two new traits: `ReflectFn` and `ReflectFnMut`.

These traits mimic `Fn` and `FnMut` but allow for being called via reflection. In fact, their blanket implementations are identical save for `ReflectFn` being implemented over `Fn` types and `ReflectFnMut` being implemented over `FnMut` types.

And just as `Fn` is a subtrait of `FnMut`, `ReflectFn` is a subtrait of `ReflectFnMut`. So anywhere that expects a `ReflectFnMut` can also be given a `ReflectFn`.

To reiterate, these traits aren't 100% necessary. They were added in purely for extensibility. If we decide to split things up differently or add new traits/types in the future, then those changes should be much simpler to implement.

### `TypedFunction`

Because of the split into `ReflectFn` and `ReflectFnMut`, we needed a new way to access the function type information. This PR moves that concept over into `TypedFunction`.

Much like `Typed`, this provides a way to access a function's `FunctionInfo`.

By splitting this trait out, it helps to ensure the other traits are focused on a single responsibility.

### Internal Macros

The original function PR (#13152) implemented `IntoFunction` using a macro which was passed into an `all_tuples!` macro invocation. Because we needed the same functionality for these new traits, this PR has copy+pasted that code for `ReflectFn`, `ReflectFnMut`, and `TypedFunction`‚Äî albeit with some differences between them.

Originally, I was going to try and macro-ify the impls and where clauses such that we wouldn't have to straight up duplicate a lot of this logic. However, aside from being more complex in general, autocomplete just does not play nice with such heavily nested macros (tried in both RustRover and VSCode). And both of those problems told me that it just wasn't worth it: we need to ensure the crate is easily maintainable, even at the cost of duplicating code.

So instead, I made sure to simplify the macro code by removing all fully-qualified syntax and cutting the where clauses down to the bare essentials, which helps to clean up a lot of the visual noise. I also tried my best to document the macro logic in certain areas (I may even add a bit more) to help with maintainability for future devs.

### Documentation

Documentation for this module was a bit difficult for me. So many of these traits and types are very interconnected. And each trait/type has subtle differences that make documenting it in a single place, like at the module level, difficult to do cleanly. Describing the valid signatures is also challenging to do well.

Hopefully what I have here is okay. I think I did an okay job, but let me know if there any thoughts on ways to improve it. We can also move such a task to a followup PR for more focused discussion.

## Testing

You can test locally by running:

```
cargo test --package bevy_reflect
```

---

## Changelog

- Added `DynamicClosure` struct
- Added `DynamicClosureMut` struct
- Added `IntoClosure` trait
- Added `IntoClosureMut` trait
- Added `ReflectFn` trait
- Added `ReflectFnMut` trait
- Added `TypedFunction` trait
- `IntoFunction` now only works for standard Rust functions
- `IntoFunction` no longer takes a lifetime parameter
- `DynamicFunction::call` now only requires `&self`
- Removed `DynamicFunction::call_once`
- Changed the `IntoReturn::into_return` signature to include a where clause

## Internal Migration Guide

> [!important]
> Function reflection was introduced as part of the 0.15 dev cycle. This migration guide was written for developers relying on `main` during this cycle, and is not a breaking change coming from 0.14.

### `IntoClosure`

`IntoFunction` now only works for standard Rust functions. Calling `IntoFunction::into_function` on a closure that captures references to its environment (either mutable or immutable), will no longer compile. 

Instead, you will need to use either `IntoClosure::into_closure` to create a `DynamicClosure` or `IntoClosureMut::into_closure_mut` to create a `DynamicClosureMut`, depending on your needs:

```rust
let punct = String::from("!");
let print = |value: String| {
    println!("{value}{punct}");
};

// BEFORE
let func: DynamicFunction = print.into_function();

// AFTER
let func: DynamicClosure = print.into_closure();
```

### `IntoFunction` lifetime

Additionally, `IntoFunction` no longer takes a lifetime parameter as it always expects a `'static` lifetime. Usages will need to remove any lifetime parameters:

```rust
// BEFORE
fn execute<'env, F: IntoFunction<'env, Marker>, Marker>(f: F) {/* ... */}

// AFTER
fn execute<F: IntoFunction<Marker>, Marker>(f: F) {/* ... */}
```

### `IntoReturn`

`IntoReturn::into_return` now has a where clause. Any manual implementors will need to add this where clause to their implementation.
----------------------------------------

PR #14285: Remove second generic from `.add_before`, `.add_after`
Author: benfrankel
Merged at: 2024-07-15 16:13:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14285
Description:
# Objective

```rust
// Currently:
builder.add_after::<FooPlugin, _>(BarPlugin);
// After this PR:
builder.add_after::<FooPlugin>(BarPlugin);
```

This removes some weirdness and better parallels the rest of the `PluginGroupBuilder` API.

## Solution

Define a helper method `type_id_of_val` to use in `.add_before` and `.add_after` instead of `TypeId::of::<T>` (which requires the plugin type to be nameable, preventing `impl Plugin` from being used).

## Testing

Ran `cargo run -p ci lints` successfully.

## Migration Guide

Removed second generic from `PluginGroupBuilder` methods: `add_before` and `add_after`.

```rust
// Before:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin, _>(FooPlugin)
    .add_after::<WindowPlugin, _>(BarPlugin)

// After:
DefaultPlugins
    .build()
    .add_before::<WindowPlugin>(FooPlugin)
    .add_after::<WindowPlugin>(BarPlugin)
```

----------------------------------------

PR #14339: `plugin_group!` macro (adopted)
Author: BD103
Merged at: 2024-07-16 01:31:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14339
Description:
# Objective

- Adopted from #11460.
- Closes #7332.
- The documentation for `DefaultPlugins` and `MinimalPlugins` frequently goes out of date because it is not .

## Solution

- Create a macro, `plugin_group!`, to automatically create `PluginGroup`s and document them.

## Testing

- Run `cargo-expand` on the generated code for `DefaultPlugins` and `MinimalPlugins`.
- Try creating a custom plugin group with the macro.

---

## Showcase

- You can now define custom `PluginGroup`s using the `plugin_group!` macro.

```rust
plugin_group! {
    /// My really cool plugic group!
    pub struct MyPluginGroup {
        physics:::PhysicsPlugin,
        rendering:::RenderingPlugin,
        ui:::UiPlugin,
    }
}
```

<details>
  <summary>Expanded output</summary>

```rust
/// My really cool plugic group!
///
/// - [`PhysicsPlugin`](physics::PhysicsPlugin)
/// - [`RenderingPlugin`](rendering::RenderingPlugin)
/// - [`UiPlugin`](ui::UiPlugin)
pub struct MyPluginGroup;
impl ::bevy_app::PluginGroup for MyPluginGroup {
    fn build(self) -> ::bevy_app::PluginGroupBuilder {
        let mut group = ::bevy_app::PluginGroupBuilder::start::<Self>();
        {
            const _: () = {
                const fn check_default<T: Default>() {}
                check_default::<physics::PhysicsPlugin>();
            };
            group = group.add(<physics::PhysicsPlugin>::default());
        }
        {
            const _: () = {
                const fn check_default<T: Default>() {}
                check_default::<rendering::RenderingPlugin>();
            };
            group = group.add(<rendering::RenderingPlugin>::default());
        }
        {
            const _: () = {
                const fn check_default<T: Default>() {}
                check_default::<ui::UiPlugin>();
            };
            group = group.add(<ui::UiPlugin>::default());
        }
        group
    }
}
```

</details>
----------------------------------------

PR #14318: Improve isometry docs
Author: Jondolf
Merged at: 2024-07-15 16:25:30+00:00
URL: https://github.com/bevyengine/bevy/pull/14318
Description:
# Objective

Fixes #14308.

#14269 added the `Isometry2d` and `Isometry3d` types, but they don't have usage examples or much documentation on what the types actually represent or what they may be useful for.

In addition, their module is public and the types are not re-exported at the crate root, unlike all the other core math types like Glam's types, direction types, and `Rot2`.

## Solution

Improve the documentation of `Isometry2d` and `Isometry3d`, explaining what they represent and can be useful for, along with doc examples on common high-level usage. I also made the way the types are exported consistent with other core math types.

This does add some duplication, but I personally think having good docs for this is valuable, and people are also less likely to look at the module-level docs than type-level docs.
----------------------------------------

PR #14326: Implement `Bounded2d` for `Annulus`
Author: Jondolf
Merged at: 2024-07-15 16:30:08+00:00
URL: https://github.com/bevyengine/bevy/pull/14326
Description:
# Objective

`Annulus` is missing `Bounded2d` even though the implementation is trivial.

## Solution

Implement `Bounded2d` for `Annulus`.

## Testing

There is a basic test to verify that the produced bounding volumes are correct.
----------------------------------------

PR #14313: Remove unused `default` feature from `bevy_window`
Author: BD103
Merged at: 2024-07-15 17:05:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14313
Description:
# Objective

- Extracted from #14298.
- `bevy_window` has an empty `default` feature that does not enable anything, which is equivalent to not having any default features.

## Solution

- Remove it :)
  - This is technically a breaking change, but specifying `features = ["default"]` manually in `Cargo.toml` is highly discouraged, so the impact is low.

---

## Migration Guide

`bevy_window` had an empty default feature flag that did not do anything, so it was removed. You may have to remove any references to it if you specified it manually.

```toml
# 0.14
[dependencies]
bevy_window = { version = "0.14", default-features = false, features = ["default"] }

# 0.15
[dependencies]
bevy_window = { version = "0.15", default-features = false }
```
----------------------------------------

PR #14228: Clean up UiSystem system sets
Author: UkoeHB
Merged at: 2024-07-15 15:42:26+00:00
URL: https://github.com/bevyengine/bevy/pull/14228
Description:
# Objective

- All UI systems should be in system sets that are easy to order around in user code.

## Solution

- Add `UiSystem::Prepare` and `UiSystem::PostLayout` system sets to capture floater systems.
- Adjust how UI systems are scheduled to align with the new sets.

This is *mostly* a pure refactor without any behavior/scheduling changes. See migration guide.

## Testing

- Not tested, correctness by inspection.

---

## Migration Guide

`UiSystem` system set adjustments.
- The `UiSystem::Outline` system set is now strictly ordered after `UiSystem::Layout`, rather than overlapping it.
----------------------------------------

PR #14298: Fix `bevy_window` failing with `serialize` feature
Author: BD103
Merged at: 2024-07-15 16:19:23+00:00
URL: https://github.com/bevyengine/bevy/pull/14298
Description:
# Objective

- [`flag-frenzy`](https://github.com/TheBevyFlock/flag-frenzy) found an issue where `bevy_window` would fail to build when its `serialize` feature is enabled.
  - See [here](https://github.com/TheBevyFlock/flag-frenzy/actions/runs/9924187577/job/27415224405) for the specific log.

## Solution

- Turns out it was failing because the `bevy_ecs/serialize` feature was not enabled. This error can be fixed by adding the flag as a dependency.

## Testing

```bash
cargo check -p bevy_window -F serialize
# Or if you're very cool...
flag-frenzy --manifest-path path/to/bevy/Cargo.toml --config config -p bevy_window
```

----------------------------------------

PR #14327: Allow non-static trigger targets
Author: SpecificProtagonist
Merged at: 2024-07-15 16:30:08+00:00
URL: https://github.com/bevyengine/bevy/pull/14327
Description:
# Objective

`TriggerTargets` can not be borrowed for use in `World::trigger_targets`

## Solution

Drop `'static` bound on `TriggerEvent`, keep it for `Command` impl.

## Testing

n/a

----------------------------------------

PR #14293: Clearer spatial bundle pub const docs
Author: torsteingrindvik
Merged at: 2024-07-15 16:21:32+00:00
URL: https://github.com/bevyengine/bevy/pull/14293
Description:
# Objective

The docs on SpatialBundle's pub const constructors mention that one is "visible" when it's actually inherited, which afaik means it's conditional on its parent's visibility.

I feel it's more correct like this.

_Also I'm seeing how making a PR from github.dev works hopefully nothing weird happens_
----------------------------------------

PR #14292: Clarify GlobalTransform::transform_point
Author: masonk
Merged at: 2024-07-15 16:13:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14292
Description:
The existing doc comment for GlobalTransform::transform_point is unclear, or, arguably, incorrect. https://github.com/bevyengine/bevy/discussions/8501 also mentions this.

Additionally, a user reading the doc for transform_point might be looking for one of the three other transforms that I mentioned in this doc comment.
----------------------------------------

PR #14267: Add support for skybox transformation
Author: Soulghost
Merged at: 2024-07-15 16:09:17+00:00
URL: https://github.com/bevyengine/bevy/pull/14267
Description:
# Objective

- Fixes https://github.com/bevyengine/bevy/issues/14036

## Solution

- Add a view space transformation for the skybox

## Testing

- I have tested the newly added `transform` field using the `skybox` example.
```
diff --git a/examples/3d/skybox.rs b/examples/3d/skybox.rs
index beaf5b268..d16cbe988 100644
--- a/examples/3d/skybox.rs
+++ b/examples/3d/skybox.rs
@@ -81,6 +81,7 @@ fn setup(mut commands: Commands, asset_server: Res<AssetServer>) {
         Skybox {
             image: skybox_handle.clone(),
             brightness: 1000.0,
+            rotation: Quat::from_rotation_x(PI * -0.5),
         },
     ));
```
<img width="1280" alt="image" src="https://github.com/bevyengine/bevy/assets/6300263/1230a608-58ea-492d-a811-90c54c3b43ef">


## Migration Guide
- Since we have added a new filed to the Skybox struct, users will need to include `..Default::default()` or some rotation value in their initialization code.
----------------------------------------

PR #14264: Fix overflow in `RenderLayers::iter_layers`
Author: Azorlogh
Merged at: 2024-07-15 16:06:45+00:00
URL: https://github.com/bevyengine/bevy/pull/14264
Description:
# Objective

- Fixes overflow when calling `RenderLayers::iter_layers` on layers of the form `k * 64 - 1`
   - Causes a panic in debug mode, and an infinite iterator in release mode

## Solution

- Use `u64::checked_shr` instead of `>>=`

## Testing

- Added a test case for this: `render_layer_iter_no_overflow`
----------------------------------------

PR #14250: Implement FromIterator/IntoIterator for dynamic types
Author: SpecificProtagonist
Merged at: 2024-07-15 15:52:40+00:00
URL: https://github.com/bevyengine/bevy/pull/14250
Description:
# Objective

Implement FromIterator/IntoIterator for dynamic types where missing

Note:
- can't impl `IntoIterator` for `&Array` & co because of orphan rules
- `into_iter().collect()` is a no-op for `Vec`s because of specialization

---

## Migration Guide

- Change `DynamicArray::from_vec` to `DynamicArray::from_iter`

----------------------------------------

PR #14211: Rename `bevy_core::name::DebugName` to `bevy_core::name::NameOrEntity`
Author: GauravTalreja
Merged at: 2024-07-15 15:38:28+00:00
URL: https://github.com/bevyengine/bevy/pull/14211
Description:
# Objective

- Fixes #14039

## Solution

- Rename.

## Testing

- CI

---

## Migration Guide

- Rename usages of `bevy_core::name::DebugName` to `bevy_core::name::NameOrEntity`

----------------------------------------

PR #14208: Make initial `StateTransition` run before `PreStartup`
Author: MiniaczQ
Merged at: 2024-07-15 15:23:36+00:00
URL: https://github.com/bevyengine/bevy/pull/14208
Description:
# Objective

- Fixes #14206 

## Solution

- Run initial `StateTransition` as a startup schedule before `PreStartup`, instead of running it inside `Startup` as an exclusive system.

Related discord discussion:
https://discord.com/channels/691052431525675048/692572690833473578/1259543775668207678

## Testing

Reproduction now works correctly:

```rs
use bevy::prelude::*;

#[derive(Debug, Clone, Copy, Default, Eq, PartialEq, Hash, States)]
enum AppState {
    #[default]
    Menu,
    InGame,
}

fn main() {
    App::new()
        .add_plugins(DefaultPlugins)
        .init_state::<AppState>()
        .add_systems(Startup, setup)
        .add_systems(OnEnter(AppState::Menu), enter_menu_state)
        .run();
}

fn setup(mut next_state: ResMut<NextState<AppState>>) {
    next_state.set(AppState::Menu);
}

fn enter_menu_state() {
    println!("Entered menu state");
}
```

![image](https://github.com/bevyengine/bevy/assets/13040204/96d7a533-c439-4c0b-8f15-49f620903ce1)


---

## Changelog

- Initial `StateTransition` runs before `PreStartup` instead of inside `Startup`.

----------------------------------------

PR #14193: Faster MeshletMesh deserialization
Author: JMS55
Merged at: 2024-07-15 15:23:36+00:00
URL: https://github.com/bevyengine/bevy/pull/14193
Description:
# Objective
- Using bincode to deserialize binary into a MeshletMesh is expensive (~77ms for a 5mb file).

## Solution
- Write a custom deserializer using bytemuck's Pod types and slice casting. 
  - Total asset load time has gone from ~102ms to ~12ms.
- Change some types I never meant to be public to private and other misc cleanup.

## Testing
- Ran the meshlet example and added timing spans to the asset loader.

---

## Changelog
- Improved `MeshletMesh` loading speed
- The `MeshletMesh` disk format has changed, and `MESHLET_MESH_ASSET_VERSION` has been bumped
- `MeshletMesh` fields are now private
- Renamed `MeshletMeshSaverLoad` to `MeshletMeshSaverLoader`
- The `Meshlet`, `MeshletBoundingSpheres`, and `MeshletBoundingSphere` types are now private
- Removed `MeshletMeshSaveOrLoadError::SerializationOrDeserialization`
- Added `MeshletMeshSaveOrLoadError::WrongFileType`

## Migration Guide
- Regenerate your `MeshletMesh` assets, as the disk format has changed, and `MESHLET_MESH_ASSET_VERSION` has been bumped
- `MeshletMesh` fields are now private
- `MeshletMeshSaverLoad` is now named `MeshletMeshSaverLoader`
- The `Meshlet`, `MeshletBoundingSpheres`, and `MeshletBoundingSphere` types are now private
- `MeshletMeshSaveOrLoadError::SerializationOrDeserialization` has been removed
- Added `MeshletMeshSaveOrLoadError::WrongFileType`, match on this variant if you match on `MeshletMeshSaveOrLoadError`
----------------------------------------

PR #14185: Fix inconsistency in `KeyboardInput` examples to match migration guide
Author: chompaa
Merged at: 2024-07-15 15:20:15+00:00
URL: https://github.com/bevyengine/bevy/pull/14185
Description:
# Objective

- The API usage of `KeyboardInput` in the `char_input_events` and `text_input` examples don't match the [migration guide](https://bevyengine.org/learn/migration-guides/0-13-to-0-14/#deprecate-receivedcharacter).

## Solution

- Check using `is_pressed` over `ButtonState::Released`.
----------------------------------------

PR #14168: bevy_math: faster sphere sampling
Author: ickk
Merged at: 2024-07-15 15:16:20+00:00
URL: https://github.com/bevyengine/bevy/pull/14168
Description:
Uses fewer transcendental functions than the existing approach
----------------------------------------

PR #14159: Allow observer systems to have outputs
Author: cBournhonesque
Merged at: 2024-07-15 15:14:55+00:00
URL: https://github.com/bevyengine/bevy/pull/14159
Description:
# Objective

Fixes https://github.com/bevyengine/bevy/issues/14157

## Solution

- Update the ObserverSystem traits to accept an `Out` parameter

## Testing

- Added a test where an observer system has a non-empty output which is piped into another system

----------------------------------------

PR #14161: Expose Winit's `KeyEvent::repeat` in `KeyboardInput`
Author: daxpedda
Merged at: 2024-07-15 15:08:12+00:00
URL: https://github.com/bevyengine/bevy/pull/14161
Description:
# Objective

I would like to know if an event was emitted because of "key repeats" or not.
Winit already exposes this information, but it isn't sent along by Bevy, which this PR intends to address.

## Solution

Expose [`winit::event::KeyEvent::repeat`](https://docs.rs/winit/0.30.3/winit/event/struct.KeyEvent.html#structfield.repeat) in [`bevy::input::keyboard::KeyboardInput`](https://docs.rs/bevy/0.14.0/bevy/input/keyboard/struct.KeyboardInput.html).

## Testing

Just hold any regular key down and only the first event should have `KeyboardInput::repeat` set to `false`. Most OSs have "key repeat" enabled by default.

---

## Changelog

- Added `KeyboardInput::repeat` signifying if this event was sent in response to a "key repeat" event or not.
----------------------------------------

PR #13903: examples: Add `Type Data` reflection example
Author: MrGVSV
Merged at: 2024-07-15 14:35:16+00:00
URL: https://github.com/bevyengine/bevy/pull/13903
Description:
# Objective

Type data is a **super** useful tool to know about when working with reflection. However, most users don't fully understand how it works or that you can use it for more than just object-safe traits.

This is unfortunate because it can be surprisingly simple to manually create your own type data.

We should have an example detailing how type data works, how users can define their own, and how they can be used.

## Solution

Added a `type_data` example.

This example goes through all the major points about type data:
- Why we need them
- How they can be defined
- The two ways they can be registered
- A list of common/important type data provided by Bevy

I also thought it might be good to go over the `#[reflect_trait]` macro as part of this example since it has all the other context, including how to define type data in places where `#[reflect_trait]` won't work. Because of this, I removed the `trait_reflection` example.

## Testing

You can run the example locally with the following command:

```
cargo run --example type_data
```

---

## Changelog

- Added the `type_data` example
- Removed the `trait_reflection` example

----------------------------------------

PR #13855: Align `Scene::write_to_world_with` to match `DynamicScene::write_to_world_with`
Author: dmyyy
Merged at: 2024-07-15 14:20:08+00:00
URL: https://github.com/bevyengine/bevy/pull/13855
Description:
# Objective

Fixes a regression in [previously merged but then reverted pr](https://github.com/bevyengine/bevy/pull/13714) that aligns lower-level `Scene` API with that in `DynamicScene`. Please look at the original pr for more details.

The problem was  `spawn_sync_internal` is used in `spawn_queued_scenes`. Since instance creation was moved up a level we need to make sure we add a specific instance to `SceneSpawner::spawned_instances` when using `spawn_sync_internal` (just like we do for `DynamicScene`). 

Please look at the last commit when reviewing.

## Testing

`alien_cake_addict` and `deferred_rendering` examples look as expected.

## Changelog

Changed `Scene::write_to_world_with` to take `entity_map` as an argument and no longer return an `InstanceInfo`

## Migration Guide

`Scene::write_to_world_with` no longer returns an `InstanceInfo`. 

Before
```rust
scene.write_to_world_with(world, &registry)
```
After
```rust
let mut entity_map = EntityHashMap::default();
scene.write_to_world_with(world, &mut entity_map, &registry)
```


----------------------------------------

PR #13820: add debug logging to ascertain the base path the asset server is using
Author: alphastrata
Merged at: 2024-07-15 14:20:08+00:00
URL: https://github.com/bevyengine/bevy/pull/13820
Description:
# Objective
Explicitly and exactly know what of the environment variables (if any) are being used/not-used/found-not-found by the `bevy_asset::io::file::get_base_path()`.

- Describe the objective or issue this PR addresses:
In a sufficiently complex project, with enough crates and such it _can_ be hard to know what the Asset Server is using as, what in the bevy parlance is its 'base path', this change seems to be the lowest effort to discovering that.

## Solution

- Added `debug!` logging to the `FileAssetReader::new()` call.

## Testing
See output by making a project and trying something like `RUST_LOG=bevy_asset::io::file=debug cargo run`
- Ran Bevy's tests.

- How can other people (reviewers) test your changes?: Intentionally mess with your `env` variables (BEVY_ASSET_ROOT and CARGO_MANIFEST_DIR, scatter assets about and attempt to (without this change) locate where it's going wrong.

-  Is there anything specific they need to know?: I encountered this issue in a rather large workspace with many many crates with multiple nested asset directories.

- If relevant, what platforms did you test these changes on, and are there any important ones you can't test? Linux.

---



----------------------------------------

PR #14324: Bump crate-ci/typos from 1.23.1 to 1.23.2
Author: dependabot[bot]
Merged at: 2024-07-15 07:11:21+00:00
URL: https://github.com/bevyengine/bevy/pull/14324
Description:
Bumps [crate-ci/typos](https://github.com/crate-ci/typos) from 1.23.1 to 1.23.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/releases">crate-ci/typos's releases</a>.</em></p>
<blockquote>
<h2>v1.23.2</h2>
<h2>[1.23.2] - 2024-07-10</h2>
<h3>Features</h3>
<ul>
<li>Automatically ignore JWT tokens</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/blob/master/CHANGELOG.md">crate-ci/typos's changelog</a>.</em></p>
<blockquote>
<h2>[1.23.2] - 2024-07-10</h2>
<h3>Features</h3>
<ul>
<li>Automatically ignore JWT tokens</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/crate-ci/typos/commit/320b5781474d4470a36b7f0626b131e99850e9d2"><code>320b578</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/4259807ead8679d15cb26e5131d240abd4f52d86"><code>4259807</code></a> docs: Update changelog</li>
<li><a href="https://github.com/crate-ci/typos/commit/fdac765801ae1140a04551c1d410e4c3667f1e3b"><code>fdac765</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1058">#1058</a> from epage/jwt</li>
<li><a href="https://github.com/crate-ci/typos/commit/6047fba1fea39116a05dbd9752dcd367399d66ab"><code>6047fba</code></a> feat(tokens): Ignore JWTs</li>
<li><a href="https://github.com/crate-ci/typos/commit/5eab324cdd8dc809810482c3f7fcce073c037876"><code>5eab324</code></a> refactor(tokens): Simplify parser logic</li>
<li><a href="https://github.com/crate-ci/typos/commit/8c8f52fe6a4abd2f76cf67c4c454ff41c12c0cc7"><code>8c8f52f</code></a> test(tokens): Show JWT behavior</li>
<li><a href="https://github.com/crate-ci/typos/commit/dc42232bba9c26afb12a6e7e36bf60007cfddb77"><code>dc42232</code></a> test(tokens): Use snapshot testing</li>
<li><a href="https://github.com/crate-ci/typos/commit/4dfaa36adff856972476540529c5b492a0ac4477"><code>4dfaa36</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1050">#1050</a> from crate-ci/renovate/maturin-1.x</li>
<li><a href="https://github.com/crate-ci/typos/commit/1eae253a72144cb63646a42c57782222685f0ab6"><code>1eae253</code></a> chore(deps): Update dependency maturin to &gt;=1.6,&lt;1.7</li>
<li>See full diff in <a href="https://github.com/crate-ci/typos/compare/v1.23.1...v1.23.2">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crate-ci/typos&package-manager=github_actions&previous-version=1.23.1&new-version=1.23.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>
----------------------------------------

PR #14311: Add `inverse_mul` and `inverse_transform_point` for isometries
Author: Jondolf
Merged at: 2024-07-14 20:09:32+00:00
URL: https://github.com/bevyengine/bevy/pull/14311
Description:
# Objective

The isometry types added in #14269 support transforming other isometries and points, as well as computing the inverse of an isometry using `inverse`.

However, transformations like `iso1.inverse() * iso2` and `iso.inverse() * point` can be optimized for single-shot cases using custom methods that avoid an extra rotation operation.

## Solution

Add `inverse_mul` and `inverse_transform_point` for `Isometry2d` and `Isometry3d`. Note that these methods are only faster when the isometry can't be reused for multiple transformations.

## Testing

All of the methods have a test, similarly to the existing transformation operations.
----------------------------------------

PR #14312: Add `Isometry2d::from_xy` and `Isometry3d::from_xyz`
Author: Jondolf
Merged at: 2024-07-14 20:08:38+00:00
URL: https://github.com/bevyengine/bevy/pull/14312
Description:
# Objective

Creating isometry types with just a translation is a bit more verbose than it needs to be for cases where you don't have an existing vector to pass in.

```rust
let iso = Isometry3d::from_translation(Vec3::new(2.0, 1.0, -1.0));
```

This could be made more ergonomic with a method similar to `Dir2::from_xy`, `Dir3::from_xyz`, and `Transform::from_xyz`:

```rust
let iso = Isometry3d::from_xyz(2.0, 1.0, -1.0);
```

## Solution

Add `Isometry2d::from_xy` and `Isometry3d::from_xyz`.
----------------------------------------

PR #13321: bevy_reflect: Nested `TypeInfo` getters
Author: MrGVSV
Merged at: 2024-07-15 00:56:00+00:00
URL: https://github.com/bevyengine/bevy/pull/13321
Description:
# Objective

Right now, `TypeInfo` can be accessed directly from a type using either `Typed::type_info` or `Reflect::get_represented_type_info`.

However, once that `TypeInfo` is accessed, any nested types must be accessed via the `TypeRegistry`.

```rust
#[derive(Reflect)]
struct Foo {
  bar: usize
}

let registry = TypeRegistry::default();

let TypeInfo::Struct(type_info) = Foo::type_info() else {
  panic!("expected struct info");
};

let field = type_info.field("bar").unwrap();

let field_info = registry.get_type_info(field.type_id()).unwrap();
assert!(field_info.is::<usize>());;
```

## Solution

Enable nested types within a `TypeInfo` to be retrieved directly.

```rust
#[derive(Reflect)]
struct Foo {
  bar: usize
}

let TypeInfo::Struct(type_info) = Foo::type_info() else {
  panic!("expected struct info");
};

let field = type_info.field("bar").unwrap();

let field_info = field.type_info().unwrap();
assert!(field_info.is::<usize>());;
```

The particular implementation was chosen for two reasons.

Firstly, we can't just store `TypeInfo` inside another `TypeInfo` directly. This is because some types are recursive and would result in a deadlock when trying to create the `TypeInfo` (i.e. it has to create the `TypeInfo` before it can use it, but it also needs the `TypeInfo` before it can create it). Therefore, we must instead store the function so it can be retrieved lazily.

I had considered also using a `OnceLock` or something to lazily cache the info, but I figured we can look into optimizations later. The API should remain the same with or without the `OnceLock`.

Secondly, a new wrapper trait had to be introduced: `MaybeTyped`. Like `RegisterForReflection`, this trait is `#[doc(hidden)]` and only exists so that we can properly handle dynamic type fields without requiring them to implement `Typed`. We don't want dynamic types to implement `Typed` due to the fact that it would make the return type `Option<&'static TypeInfo>` for all types even though only the dynamic types ever need to return `None` (see #6971 for details).

Users should never have to interact with this trait as it has a blanket impl for all `Typed` types. And `Typed` is automatically implemented when deriving `Reflect` (as it is required).

The one downside is we do need to return `Option<&'static TypeInfo>` from all these new methods so that we can handle the dynamic cases. If we didn't have to, we'd be able to get rid of the `Option` entirely. But I think that's an okay tradeoff for this one part of the API, and keeps the other APIs intact.

## Testing

This PR contains tests to verify everything works as expected. You can test locally by running:

```
cargo test --package bevy_reflect
```

---

## Changelog

### Public Changes

- Added `ArrayInfo::item_info` method
- Added `NamedField::type_info` method
- Added `UnnamedField::type_info` method
- Added `ListInfo::item_info` method
- Added `MapInfo::key_info` method
- Added `MapInfo::value_info` method
- All active fields now have a `Typed` bound (remember that this is automatically satisfied for all types that derive `Reflect`)

### Internal Changes

- Added `MaybeTyped` trait

## Migration Guide

All active fields for reflected types (including lists, maps, tuples, etc.), must implement `Typed`. For the majority of users this won't have any visible impact.

However, users implementing `Reflect` manually may need to update their types to implement `Typed` if they weren't already.

Additionally, custom dynamic types will need to implement the new hidden `MaybeTyped` trait.
----------------------------------------

PR #14321: Add a direct link in the docs to the Discord's #working-groups channel
Author: therealbnut
Merged at: 2024-07-15 01:22:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14321
Description:
# Objective

Reading the documentation it wasn't clear to me where to see a definitive list of working groups. I somehow missed the discord channel, I'm not sure if my Discord settings had it hidden.

## Solution

I've made it clearer in the docs where to find the list of existing working groups.

Note: This assumes that all working groups are in there on the discord, that's my understanding from the current docs.
----------------------------------------

PR #14320: Register VisibleMeshEntities
Author: IceSentry
Merged at: 2024-07-15 00:22:21+00:00
URL: https://github.com/bevyengine/bevy/pull/14320
Description:
# Objective

- A recent PR added this type but never registered it which breaks loading some gltf

## Solution

- Register the type


----------------------------------------

PR #14174: bevy_reflect: Feature-gate function reflection
Author: MrGVSV
Merged at: 2024-07-14 16:10:36+00:00
URL: https://github.com/bevyengine/bevy/pull/14174
Description:
# Objective

Function reflection requires a lot of macro code generation in the form of several `all_tuples!` invocations, as well as impls generated in the `Reflect` derive macro.

Seeing as function reflection is currently a bit more niche, it makes sense to gate it all behind a feature.

## Solution

Add a `functions` feature to `bevy_reflect`, which can be enabled in Bevy using the `reflect_functions` feature.

## Testing

You can test locally by running:

```
cargo test --package bevy_reflect
```

That should ensure that everything still works with the feature disabled.

To test with the feature on, you can run:

```
cargo test --package bevy_reflect --features functions
```

---

## Changelog

- Moved function reflection behind a Cargo feature (`bevy/reflect_functions` and `bevy_reflect/functions`)
- Add `IntoFunction` export in `bevy_reflect::prelude`

## Internal Migration Guide

> [!important]
> Function reflection was introduced as part of the 0.15 dev cycle. This migration guide was written for developers relying on `main` during this cycle, and is not a breaking change coming from 0.14.

Function reflection is now gated behind a feature. To use function reflection, enable the feature:
- If using `bevy_reflect` directly, enable the `functions` feature
- If using `bevy`, enable the `reflect_functions` feature
----------------------------------------

PR #14218: update gltf example to use type-safe `GltfAssetLabel::Scene`
Author: johannesvollmer
Merged at: 2024-07-14 15:58:35+00:00
URL: https://github.com/bevyengine/bevy/pull/14218
Description:
# Objective

update the `load_gltf_extras.rs` example to the newest bevy api

## Solution

uses the new type-safe code for loading the scene #0 from the gltf instead of a path suffix

## Testing

the example runs as expected


----------------------------------------

PR #14126: Release 0.14.0 version bump
Author: mockersf
Merged at: 2024-07-04 01:22:10+00:00
URL: https://github.com/bevyengine/bevy/pull/14126
Description:
# Objective

- Bump the version before the release

- This should not be merged until ready for the release to have prettier git history and tags
----------------------------------------

PR #13320: bevy_reflect: `TypeInfo` casting methods
Author: MrGVSV
Merged at: 2024-07-14 20:24:47+00:00
URL: https://github.com/bevyengine/bevy/pull/13320
Description:
# Objective

There are times when we might know the type of a `TypeInfo` ahead of time. Or we may have already checked it one way or another.

In such cases, it's a bit cumbersome to have to pattern match every time we want to access the nested info:

```rust
if let TypeInfo::List(info) = <Vec<i32>>::type_info() {
  // ...
} else {
  panic!("expected list info");
}
```

Ideally, there would be a way to simply perform the cast down to `ListInfo` since we already know it will succeed.

Or even if we don't, perhaps we just want a cleaner way of exiting a function early (i.e. with the `?` operator).

## Solution

Taking a bit from [`mirror-mirror`](https://docs.rs/mirror-mirror/latest/mirror_mirror/struct.TypeDescriptor.html#implementations), `TypeInfo` now has methods for attempting a cast into the variant's info type.

```rust
let info = <Vec<i32>>::type_info().as_list().unwrap();
// ...
```

These new conversion methods return a `Result` where the error type is a new `TypeInfoError` enum. 

A `Result` was chosen as the return type over `Option` because if we do choose to `unwrap` it, the error message will give us some indication of what went wrong. In other words, it can truly replace those instances where we were panicking in the `else` case.

### Open Questions

1. Should the error types instead be a struct? I chose an enum for future-proofing, but right now it only has one error state. Alternatively, we could make it a reflect-wide casting error so it could be used for similar methods on `ReflectRef` and friends.
2. I was going to do it in a separate PR but should I just go ahead and add similar methods to `ReflectRef`, `ReflectMut`, and `ReflectOwned`? ü§î
3. Should we name these `try_as_***` instead of `as_***` since they return a `Result`?

## Testing

You can test locally by running:

```
cargo test --package bevy_reflect
```

---

## Changelog

### Added

- `TypeInfoError` enum
- `TypeInfo::kind` method
- `TypeInfo::as_struct` method
- `TypeInfo::as_tuple_struct` method
- `TypeInfo::as_tuple` method
- `TypeInfo::as_list` method
- `TypeInfo::as_array` method
- `TypeInfo::as_map` method
- `TypeInfo::as_enum` method
- `TypeInfo::as_value` method
- `VariantInfoError` enum
- `VariantInfo::variant_type` method
- `VariantInfo::as_unit_variant` method
- `VariantInfo::as_tuple_variant` method
- `VariantInfo::as_struct_variant` method

----------------------------------------

PR #13943: Fix prepass batch
Author: re0312
Merged at: 2024-07-14 19:51:38+00:00
URL: https://github.com/bevyengine/bevy/pull/13943
Description:
# Objective

- After #11804 , The queue_prepass_material_meshes function is now executed in parallel with other queue_* systems. This optimization introduced a potential issue where mesh_instance.should_batch() could return false in  queue_prepass_material_meshes  due to an unset material_bind_group_id.

----------------------------------------

PR #14307: Fix swapped docs for `Rot2::rotation_to/from_y`
Author: mweatherley
Merged at: 2024-07-14 17:17:50+00:00
URL: https://github.com/bevyengine/bevy/pull/14307
Description:
# Objective

Fixes #14301 

## Solution

Swap them so that they are no longer swapped.
----------------------------------------

PR #14073: Lighting Should Only hold Vec<Entity> instead of TypeId<Vec<Entity>>
Author: re0312
Merged at: 2024-07-14 17:17:50+00:00
URL: https://github.com/bevyengine/bevy/pull/14073
Description:
# Objective
- After #13894, I noticed the performance of `many_lights `dropped from 120+ to 60+. I reviewed the PR but couldn't identify any mistakes. After profiling, I discovered that `Hashmap::Clone `was very slow when its not empty, causing `extract_light` to increase from 3ms to 8ms.
- Lighting only checks visibility for 3D Meshes. We don't need to maintain a TypeIdMap for this, as it not only impacts performance negatively but also reduces ergonomics.

## Solution

- use VisibleMeshEntities for lighint visibility checking.


## Performance
cargo run --release --example many_lights  --features bevy/trace_tracy 
name="bevy_pbr::light::check_point_light_mesh_visibility"}
![image](https://github.com/bevyengine/bevy/assets/45868716/8bad061a-f936-45a0-9bb9-4fbdaceec08b)

system{name="bevy_pbr::render::light::extract_lights"}
![image](https://github.com/bevyengine/bevy/assets/45868716/ca75b46c-b4ad-45d3-8c8d-66442447b753)


## Migration Guide

> now `SpotLightBundle` , `CascadesVisibleEntities  `and `CubemapVisibleEntities `use VisibleMeshEntities instead of `VisibleEntities`

----------------------------------------

PR #14160: Add error message if states schedule missing (usually because StatesPlugin hasn't been added)
Author: cBournhonesque
Merged at: 2024-07-14 16:11:44+00:00
URL: https://github.com/bevyengine/bevy/pull/14160
Description:
# Objective

- Helps improve https://github.com/bevyengine/bevy/issues/14151

## Solution

- At least return an error message from the `Option::unwrap()` call when we try to access the `StateTransition` schedule


----------------------------------------

PR #14224: update example low_power
Author: mockersf
Merged at: 2024-07-14 15:57:27+00:00
URL: https://github.com/bevyengine/bevy/pull/14224
Description:
# Objective

- Show both `RequestRedraw` and `WakeUp`
- Partly adresses #14214

----------------------------------------

PR #14178: Remove unused type parameter in `Parallel::drain()`
Author: BD103
Merged at: 2024-07-06 13:46:31+00:00
URL: https://github.com/bevyengine/bevy/pull/14178
Description:
# Objective

- `Parallel::drain()` has an unused type parameter `B` than can be removed.
  - Caught [on Discord](https://discord.com/channels/691052431525675048/692572690833473578/1259004180560085003) by Andrew, thanks!

## Solution

- Remove it! :)

## Testing

- `Parallel::drain()` should still function exactly the same.

---

## Changelog

- Removed unused type parameter in `Parallel::drain()`.

## Migration Guide

The type parameter of `Parallel::drain()` was unused, so it is now removed. If you were manually specifying it, you can remove the bounds.

```rust
// 0.14
// Create a `Parallel` and give it a value.
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

for v in parallel.drain::<u8>() {
    // ...
}

// 0.15
let mut parallel: Parallel<Vec<u8>> = Parallel::default();
*parallel.borrow_local_mut() = vec![1, 2, 3];

// Remove the type parameter.
for v in parallel.drain() {
    // ...
}
```
----------------------------------------

PR #14076: Fix intra-doc links and make CI test them
Author: SkiFire13
Merged at: 2024-07-11 13:23:53+00:00
URL: https://github.com/bevyengine/bevy/pull/14076
Description:
# Objective

- Bevy currently has lot of invalid intra-doc links, let's fix them!
- Also make CI test them, to avoid future regressions.
- Helps with #1983 (but doesn't fix it, as there could still be explicit links to docs.rs that are broken)

## Solution

- Make `cargo r -p ci -- doc-check` check fail on warnings (could also be changed to just some specific lints)
- Manually fix all the warnings (note that in some cases it was unclear to me what the fix should have been, I'll try to highlight them in a self-review)
----------------------------------------

PR #14276: Fixed #14248 and other URL issues
Author: BlakeBedford
Merged at: 2024-07-11 12:20:16+00:00
URL: https://github.com/bevyengine/bevy/pull/14276
Description:
# Objective

Fixes #14248 and other URL issues.

## Solution

- Describe the solution used to achieve the objective above.
Removed the random #s in the URL. Led users to the wrong page. For example, https://bevyengine.org/learn/errors/#b0003 takes users to https://bevyengine.org/learn/errors/introduction, which is not the right page.  Removing the #s fixes it.

## Testing

- Did you test these changes? If so, how?
I pasted the URL into my address bar and it took me to the right place.

- Are there any parts that need more testing?
No
----------------------------------------

PR #14240: fix: Possible NaN due to denormalised quaternions in AABB implementations for round shapes.
Author: IQuick143
Merged at: 2024-07-10 16:16:23+00:00
URL: https://github.com/bevyengine/bevy/pull/14240
Description:
# Objective

With an unlucky denormalised quaternion (or just a regular very denormalised quaternion), it's possible to obtain NaN values for AABB's in shapes which rely on an AABB for a disk.

## Solution

Add an additional `.max(Vec3::ZERO)` clamp to get rid of negative values arising due to numerical errors.
Fixup some unnecessary calculations and improve variable names in relevant code, aiming for consistency.

## Discussion

These two (nontrivial) lines of code are repeated at least 5 times, maybe they could be their own method.
----------------------------------------

PR #14245: Make `bevy_math::common_traits` public
Author: mweatherley
Merged at: 2024-07-09 17:33:52+00:00
URL: https://github.com/bevyengine/bevy/pull/14245
Description:
# Objective

Fixes #14243 

## Solution

`bevy_math::common_traits` is now a public module. 
----------------------------------------

PR #14249: Moves smooth_follow to movement dir
Author: Cioraz
Merged at: 2024-07-09 18:39:54+00:00
URL: https://github.com/bevyengine/bevy/pull/14249
Description:
# Objective

- Moves the smooth_follow.rs into movement directory in examples
- Fixes #14241

## Solution

- Move the smooth_follow.rs to movement dir in examples.


----------------------------------------

PR #14223: Add an example for doing movement in fixed timesteps
Author: janhohenheim
Merged at: 2024-07-09 14:42:06+00:00
URL: https://github.com/bevyengine/bevy/pull/14223
Description:
_copy-pasted from my doc comment in the code_

# Objective

This example shows how to properly handle player input, advance a physics simulation in a fixed timestep, and display the results.

The classic source for how and why this is done is Glenn Fiedler's article [Fix Your Timestep!](https://gafferongames.com/post/fix_your_timestep/).

## Motivation

The naive way of moving a player is to just update their position like so:
```rust
transform.translation += velocity;
```
The issue here is that the player's movement speed will be tied to the frame rate.
Faster machines will move the player faster, and slower machines will move the player slower.
In fact, you can observe this today when running some old games that did it this way on modern hardware!
The player will move at a breakneck pace.

The more sophisticated way is to update the player's position based on the time that has passed:
```rust
transform.translation += velocity * time.delta_seconds();
```
This way, velocity represents a speed in units per second, and the player will move at the same speed regardless of the frame rate.

However, this can still be problematic if the frame rate is very low or very high. If the frame rate is very low, the player will move in large jumps. This may lead to a player moving in such large jumps that they pass through walls or other obstacles. In general, you cannot expect a physics simulation to behave nicely with *any* delta time. Ideally, we want to have some stability in what kinds of delta times we feed into our physics simulation.

The solution is using a fixed timestep. This means that we advance the physics simulation by a fixed amount at a time. If the real time that passed between two frames is less than the fixed timestep, we simply don't advance the physics simulation at all.
If it is more, we advance the physics simulation multiple times until we catch up. You can read more about how Bevy implements this in the documentation for [`bevy::time::Fixed`](https://docs.rs/bevy/latest/bevy/time/struct.Fixed.html).

This leaves us with a last problem, however. If our physics simulation may advance zero or multiple times per frame, there may be frames in which the player's position did not need to be updated at all, and some where it is updated by a large amount that resulted from running the physics simulation multiple times. This is physically correct, but visually jarring. Imagine a player moving in a straight line, but depending on the frame rate, they may sometimes advance by a large amount and sometimes not at all. Visually, we want the player to move smoothly. This is why we need to separate the player's position in the physics simulation from the player's position in the visual representation. The visual representation can then be interpolated smoothly based on the last and current actual player position in the physics simulation.

This is a tradeoff: every visual frame is now slightly lagging behind the actual physical frame, but in return, the player's movement will appear smooth. There are other ways to compute the visual representation of the player, such as extrapolation. See the [documentation of the lightyear crate](https://cbournhonesque.github.io/lightyear/book/concepts/advanced_replication/visual_interpolation.html) for a nice overview of the different methods and their tradeoffs.

## Implementation

- The player's velocity is stored in a `Velocity` component. This is the speed in units per second.
- The player's current position in the physics simulation is stored in a `PhysicalTranslation` component.
- The player's previous position in the physics simulation is stored in a `PreviousPhysicalTranslation` component.
- The player's visual representation is stored in Bevy's regular `Transform` component.
- Every frame, we go through the following steps:
   - Advance the physics simulation by one fixed timestep in the `advance_physics` system.
       This is run in the `FixedUpdate` schedule, which runs before the `Update` schedule.
   - Update the player's visual representation in the `update_displayed_transform` system.
       This interpolates between the player's previous and current position in the physics simulation.
   - Update the player's velocity based on the player's input in the `handle_input` system.

## Relevant Issues

Related to #1259.
I'm also fairly sure I've seen an issue somewhere made by @alice-i-cecile about showing how to move a character correctly in a fixed timestep, but I cannot find it.
----------------------------------------

PR #14225: Fix doc list indentation
Author: rparrett
Merged at: 2024-07-09 01:37:48+00:00
URL: https://github.com/bevyengine/bevy/pull/14225
Description:
# Objective

Fixes #14221

## Solution

Add indentation as suggested.

## Testing

Confirmed that
- This makes Clippy happy with rust beta
- Built docs visually look the same before/after
----------------------------------------

PR #14217: Bump crate-ci/typos from 1.22.9 to 1.23.1
Author: dependabot[bot]
Merged at: 2024-07-08 12:20:45+00:00
URL: https://github.com/bevyengine/bevy/pull/14217
Description:
Bumps [crate-ci/typos](https://github.com/crate-ci/typos) from 1.22.9 to 1.23.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/releases">crate-ci/typos's releases</a>.</em></p>
<blockquote>
<h2>v1.23.1</h2>
<h2>[1.23.1] - 2024-07-05</h2>
<h3>Fixes</h3>
<ul>
<li>Add missing <a href="https://redirect.github.com/crate-ci/typos/issues/1024">June 2024</a> changes</li>
</ul>
<h2>v1.23.0</h2>
<h2>[1.23.0] - 2024-07-05</h2>
<h3>Fixes</h3>
<ul>
<li>Updated the dictionary with the <a href="https://redirect.github.com/crate-ci/typos/issues/1024">June 2024</a> changes</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/crate-ci/typos/blob/master/CHANGELOG.md">crate-ci/typos's changelog</a>.</em></p>
<blockquote>
<h2>[1.23.1] - 2024-07-05</h2>
<h3>Fixes</h3>
<ul>
<li>Add missing <a href="https://redirect.github.com/crate-ci/typos/issues/1024">June 2024</a> changes</li>
</ul>
<h2>[1.23.0] - 2024-07-05</h2>
<h3>Fixes</h3>
<ul>
<li>Updated the dictionary with the <a href="https://redirect.github.com/crate-ci/typos/issues/1024">June 2024</a> changes</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/crate-ci/typos/commit/81a34f1ca2d0bfdcc3470c0f279a20333cb94878"><code>81a34f1</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/1aa7c985e447515aa398840d93f66e278fbe7a0c"><code>1aa7c98</code></a> docs: Update changelog</li>
<li><a href="https://github.com/crate-ci/typos/commit/4d4121ea86c9405451c2af45a47dbd0600ec5202"><code>4d4121e</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/4edcc6aa957ce6fe18d1f5002a7708347aaf7680"><code>4edcc6a</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1053">#1053</a> from epage/june</li>
<li><a href="https://github.com/crate-ci/typos/commit/fa7786ec6925488ce16e40434fae32e16505bb9e"><code>fa7786e</code></a> fix(dict): Add more june typos</li>
<li><a href="https://github.com/crate-ci/typos/commit/04eea796957ae6d88a06fd00dc942132fda7fc09"><code>04eea79</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/d3b2a6eb90c82dcb6e6b802b1c3ef92592beca20"><code>d3b2a6e</code></a> docs: Update changelog</li>
<li><a href="https://github.com/crate-ci/typos/commit/494a98f93e9600d4e4be8346394d5902c03602c5"><code>494a98f</code></a> chore: Release</li>
<li><a href="https://github.com/crate-ci/typos/commit/bdc571d921a5dc929502e94f8cbad131bc6bfb87"><code>bdc571d</code></a> Merge pull request <a href="https://redirect.github.com/crate-ci/typos/issues/1052">#1052</a> from epage/june</li>
<li><a href="https://github.com/crate-ci/typos/commit/eac884cf3bae9fef64587b1e0f4305cc8b0c12f2"><code>eac884c</code></a> fix(dict): June updates</li>
<li>Additional commits viewable in <a href="https://github.com/crate-ci/typos/compare/v1.22.9...v1.23.1">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=crate-ci/typos&package-manager=github_actions&previous-version=1.22.9&new-version=1.23.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>
----------------------------------------

PR #14220: fix typo processed_dir
Author: mockersf
Merged at: 2024-07-08 11:46:45+00:00
URL: https://github.com/bevyengine/bevy/pull/14220
Description:
# Objective

- fix typo processed_dir
- unblock #14217 

## Solution

- fix typo processed_dir

----------------------------------------

PR #13826: Add Mac OS tracy info to profiling docs
Author: mweatherley
Merged at: 2024-07-08 01:53:45+00:00
URL: https://github.com/bevyengine/bevy/pull/13826
Description:
## Explanation

I got kind of lost on this earlier (the Tracy docs are not very helpful) and required some assistance, so I thought it might be helpful to add this somewhere in the profiling docs. The way it's presently inserted is kind of awkward, but I don't know enough about the other operating systems to make similar sections for them, which I think would be helpful, since it's going to be different on each one.
----------------------------------------

PR #14170: prepare next version: update regexes
Author: mockersf
Merged at: 2024-07-08 02:47:29+00:00
URL: https://github.com/bevyengine/bevy/pull/14170
Description:
# Objective

- The post release version bump job failed: https://github.com/bevyengine/bevy/actions/runs/9799332118
- This is because main didn't update to 0.14 as that happened in a branch

## Solution

- Update the regexes to work with the -dev suffix

----------------------------------------

PR #11750: meta: Add `Showcase` section to PR template
Author: MrGVSV
Merged at: 2024-07-08 01:55:03+00:00
URL: https://github.com/bevyengine/bevy/pull/11750
Description:
# Objective

Oftentimes I find myself reading through a PR and not quite understanding what's going on. Even if it's super detailed, it can sometimes be difficult to imagine what the end result of the PR might look like.

For example, #10756 clearly communicates its goals and contains a descriptive Changelog. However, I was still a bit lost as to what a user might see from the change until I saw the dedicated example in the diff.

## Solution

At the risk of giving contributors more work, I think a dedicated `Showcase` section could be really nice.

Along with providing reviewers stumbling on the PR with a "tangible summary" of the change, it should also help out when working on the release post. Sometimes someone other than the PR's author has to write up a blog section on the PR. This can be somewhat daunting to people wanting to contribute in that effort as they have to rely on the Migration Guide giving a decent example (assuming it's a breaking change), piecing together the other sections into a sensible example themselves, or manually reading through the diff.

Theoretically, this new `Showcase` section would be more of an encouragement than a strict requirement. And it's probably only going to be useful where there is something to showcase (e.g. visual changes, API changes, new features, etc.).

### Bikeshedding

- **Naming.** I also considered `Demo` and `Example`, but there may be others we prefer. I chose `Showcase` to communicate the feeling of fun and appreciation for the work contributors put in.
- **Position.** I placed the section right above the `Changelog` section since I felt it made sense to move from the details in `Solution` to a brief example in `Showcase` to a tl;dr of the changes in `Changelog`
- **Phrasing.** We can also bikeshed the bullet points and phrasing of each as well.
----------------------------------------

PR #14176: disable gpu preprocessing on android with Adreno 730 GPU and earilier
Author: Litttlefish
Merged at: 2024-07-08 01:39:45+00:00
URL: https://github.com/bevyengine/bevy/pull/14176
Description:
# Objective

Fix #14146 

## Solution

Expansion of #13323 , excluded Adreno 730 and earlier.

## Testing

Tested on android device(Adreno 730) that used to crash
----------------------------------------

PR #14171: Optimize unnecessary normalizations for `Transform::local_{xyz}`
Author: janhohenheim
Merged at: 2024-07-08 01:39:45+00:00
URL: https://github.com/bevyengine/bevy/pull/14171
Description:
Note that `GlobalTransform` already does it like this for `right`, `left`, etc. so I didn't have to touch that one

----------------------------------------

PR #14209: Fix state example urls
Author: SpecificProtagonist
Merged at: 2024-07-08 01:41:31+00:00
URL: https://github.com/bevyengine/bevy/pull/14209
Description:
Doc was still pointing to old location of state examples

----------------------------------------

PR #14167: bevy_input: allow use without bevy_reflect
Author: torsteingrindvik
Merged at: 2024-07-08 01:41:31+00:00
URL: https://github.com/bevyengine/bevy/pull/14167
Description:
# Objective

Allow use of `bevy_input` types without needing `bevy_reflect`.

## Solution

Make `bevy_reflect` within `bevy_input` optional. It's compiled in by default.
Turn on reflect in dependencies as well when this feature is on.

## Testing

- Did you test these changes? If so, how?

I did a `cargo hack -p bevy_input --each-feature build`.
----------------------------------------

PR #14179: bevy_core: make bevy_reflect optional
Author: torsteingrindvik
Merged at: 2024-07-08 01:40:57+00:00
URL: https://github.com/bevyengine/bevy/pull/14179
Description:
# Objective

Allow use of `bevy_core` types without needing `bevy_reflect`.

## Solution

Make `bevy_reflect` within `bevy_core` optional. It's compiled in by default.
Turn on reflect in dependencies as well when this feature is on.

## Testing

- Did you test these changes? If so, how?

I did a `cargo hack -p bevy_core--each-feature build`.


Similar PR: https://github.com/bevyengine/bevy/pull/14167

Discord context starts here: https://discord.com/channels/691052431525675048/768253008416342076/1258814534651482163
----------------------------------------

PR #14156: impl Reflect + Clone for StateScoped
Author: brandon-reinhart
Merged at: 2024-07-08 01:25:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14156
Description:
# Objective

- Expand the flexibilty of StateScoped by adding Reflect and Clone
- This lets StateScoped be used in Clone Bundles, for example

```rust
#[derive(Component, Reflect, Clone)]
pub struct StateScoped<S: States>(pub S);
```

Notes:
- States are already Clone.
- Type registration is up to the user, but this is commonly the case with reflected generic types.

## Testing

- Ran the examples.

----------------------------------------

PR #14123: Fix crash when an asset load failure event is processed after asset drop
Author: brianreavis
Merged at: 2024-07-08 01:25:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14123
Description:
# Objective

This PR fixes a crash that happens when an asset failure event is processed after the asset has already been dropped.

```
2024-07-03T17:12:16.847178Z ERROR bevy_asset::server: Encountered HTTP status 404 when loading asset
thread 'main' panicked at bevy/crates/bevy_asset/src/server/info.rs:593:18:
```

## Solution

- Update `process_asset_fail` to match the graceful behavior in `process_asset_load` (it does not assume the state still exists).

---

## Changelog

- Fixed a rare crash that happens when an asset failed event is processed after the asset has been dropped.

----------------------------------------

PR #14064: Optimize ui_layout_system
Author: re0312
Merged at: 2024-07-08 01:06:39+00:00
URL: https://github.com/bevyengine/bevy/pull/14064
Description:
# Objective

- Currently bevy's ui layout system could takes a long time.

## Solution

- cache `default_ui_camera `entity to avoid repetitive lookup


## Performance
cargo run --release --example many_buttons --features bevy/trace_tracy  

![image](https://github.com/bevyengine/bevy/assets/45868716/f8eda0b0-343d-4379-847f-f1636c38e5ec)

----------------------------------------

PR #14005: Component Hook functions as attributes for Component derive macro
Author: Jenya705
Merged at: 2024-07-08 01:02:40+00:00
URL: https://github.com/bevyengine/bevy/pull/14005
Description:
# Objective

Fixes https://github.com/bevyengine/bevy/issues/13972

## Solution

Added 3 new attributes to the `Component` macro.

## Testing

Added `component_hook_order_spawn_despawn_with_macro_hooks`, that makes the same as `component_hook_order_spawn_despawn` but uses a struct, that defines it's hooks with the `Component` macro.

---

----------------------------------------

PR #13553: Use rust-lld on windows rustdoc in config_fast_builds.toml
Author: SkiFire13
Merged at: 2024-07-08 00:49:42+00:00
URL: https://github.com/bevyengine/bevy/pull/13553
Description:
# Objective

- Rustdoc doesn't seem to follow cargo's `linker` setting
- Improves the situation in #12207

## Solution

- Explicitly set the linker in rustdoc flags

## Testing

- I tested this change on Windows and it significantly improves testing performances (can't give an exact estimate since they got stuck before this change)

---

Note: I avoided changing the settings on Linux and MacOS because I can't test on those platforms. It would be nice if someone could test similar changes there and report so they can be done on all major platforms.
----------------------------------------

PR #14200: EmptyPathStream is only used in android/wasm32
Author: mockersf
Merged at: 2024-07-07 20:10:57+00:00
URL: https://github.com/bevyengine/bevy/pull/14200
Description:
# Objective

- `EmptyPathStream` is only used in android and wasm32
- This now makes rust nightly warn

## Solution

- flag the struct to only be present when needed
- also change how `MorphTargetNames` is used because that makes rust happier?

----------------------------------------

PR #11741: Send `SceneInstanceReady` when spawning any kind of scene
Author: daxpedda
Merged at: 2024-07-06 14:16:37+00:00
URL: https://github.com/bevyengine/bevy/pull/11741
Description:
# Objective

- Emit an event regardless of scene type (`Scene` and `DynamicScene`).
- Also send the `InstanceId` along.

Follow-up to #11002.
Fixes #2218.

## Solution

- Send `SceneInstanceReady` regardless of scene type.
- Make `SceneInstanceReady::parent` `Option`al.
- Add `SceneInstanceReady::id`.

---

## Changelog

### Changed

- `SceneInstanceReady` is now sent for `Scene` as well. `SceneInstanceReady::parent` is an `Option` and `SceneInstanceReady::id`, an `InstanceId`, is added to identify the corresponding `Scene`.

## Migration Guide

- `SceneInstanceReady { parent: Entity }` is now `SceneInstanceReady { id: InstanceId, parent: Option<Entity> }`.

----------------------------------------

PR #14165: bevy_reflect: Re-enable reflection compile fail tests
Author: MrGVSV
Merged at: 2024-07-05 21:05:07+00:00
URL: https://github.com/bevyengine/bevy/pull/14165
Description:
# Objective

Looks like I accidentally disabled the reflection compile fail tests in #13152. These should be re-enabled.

## Solution

Re-enable reflection compile fail tests.

## Testing

CI should pass. You can also test locally by navigating to `crates/bevy_reflect/compile_fail/` and running:

```
cargo test --target-dir ../../../target
```

----------------------------------------

PR #14140: impl Debug for ExtendedMaterial
Author: NWPlayer123
Merged at: 2024-07-05 00:14:59+00:00
URL: https://github.com/bevyengine/bevy/pull/14140
Description:
# Objective

Both `Material` and `MaterialExtension` (base and extension) can derive Debug, so there's no reason to not allow `ExtendedMaterial` to derive it

## Solution

- Describe the solution used to achieve the objective above.
Add `Debug` to the list of derived traits

## Testing

- Did you test these changes? If so, how?
I compiled my test project on latest commit, making sure it actually compiles
- How can other people (reviewers) test your changes? Is there anything specific they need to know?
Create an ExtendedMaterial instance, try to `println!("{:?}", material);`


----------------------------------------


FILE CHANGES
--------------------------------------------------------------------------------

File: Cargo.toml
Status: modified
Changes: +6 -4
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 categories = ["game-engines", "graphics", "gui", "rendering"]
 description = "A refreshingly simple data-driven game engine and app framework"
@@ -38,6 +38,7 @@ undocumented_unsafe_blocks = "warn"
 redundant_else = "warn"
 match_same_arms = "warn"
 semicolon_if_nothing_returned = "warn"
+doc_lazy_continuation = "allow"

----------------------------------------

File: crates/bevy_a11y/Cargo.toml
Status: modified
Changes: +4 -4
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_a11y"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides accessibility support for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,9 +10,9 @@ keywords = ["bevy", "accessibility", "a11y"]
 

----------------------------------------

File: crates/bevy_animation/Cargo.toml
Status: modified
Changes: +15 -15
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_animation"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides animation functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,23 +10,23 @@ keywords = ["bevy"]
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_asset = { path = "../bevy_asset", version = "0.14.0" }
-bevy_color = { path = "../bevy_color", version = "0.14.1" }

----------------------------------------

File: crates/bevy_animation/src/lib.rs
Status: modified
Changes: +2 -2
Diff:
@@ -874,12 +874,12 @@ impl AnimationTargetContext<'_> {
             // Some curves have only one keyframe used to set a transform
             if curve.keyframe_timestamps.len() == 1 {
                 self.apply_single_keyframe(curve, weight);
-                return;
+                continue;
             }
 
             // Find the current keyframe
             let Some(step_start) = curve.find_current_keyframe(seek_time) else {

----------------------------------------

File: crates/bevy_animation/src/transition.rs
Status: modified
Changes: +3 -1
Diff:
@@ -5,9 +5,10 @@
 
 use bevy_ecs::{
     component::Component,
+    reflect::ReflectComponent,
     system::{Query, Res},
 };
-use bevy_reflect::Reflect;
+use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_time::Time;

----------------------------------------

File: crates/bevy_app/Cargo.toml
Status: modified
Changes: +6 -6
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_app"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides core App functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -16,11 +16,11 @@ bevy_reflect = ["dep:bevy_reflect", "bevy_ecs/bevy_reflect"]
 

----------------------------------------

File: crates/bevy_app/src/main_schedule.rs
Status: modified
Changes: +34 -0
Diff:
@@ -195,6 +195,16 @@ impl MainScheduleOrder {
         self.labels.insert(index + 1, schedule.intern());
     }
 
+    /// Adds the given `schedule` before the `before` schedule in the main list of schedules.
+    pub fn insert_before(&mut self, before: impl ScheduleLabel, schedule: impl ScheduleLabel) {
+        let index = self
+            .labels
+            .iter()
+            .position(|current| (**current).eq(&before))
+            .unwrap_or_else(|| panic!("Expected {before:?} to exist"));
+        self.labels.insert(index, schedule.intern());
+    }
+
     /// Adds the given `schedule` after the `after` schedule in the list of startup schedules.
     pub fn insert_startup_after(
         &mut self,
@@ -208,6 +218,20 @@ impl MainScheduleOrder {

----------------------------------------

File: crates/bevy_asset/Cargo.toml
Status: modified
Changes: +10 -10
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_asset"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides asset functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -19,14 +19,14 @@ watch = []
 trace = []
 
 [dependencies]
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_asset_macros = { path = "macros", version = "0.14.0" }
-bevy_ecs = { path = "../bevy_ecs", version = "0.14.0" }
-bevy_reflect = { path = "../bevy_reflect", version = "0.14.0", features = [

----------------------------------------

File: crates/bevy_asset/macros/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_asset_macros"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Derive implementations for bevy_asset"
 homepage = "https://bevyengine.org"
@@ -12,7 +12,7 @@ keywords = ["bevy"]
 proc-macro = true

----------------------------------------

File: crates/bevy_asset/src/io/mod.rs
Status: modified
Changes: +2 -0
Diff:
@@ -574,9 +574,11 @@ pub(crate) fn get_meta_path(path: &Path) -> PathBuf {
     meta_path
 }
 
+#[cfg(any(target_arch = "wasm32", target_os = "android"))]
 /// A [`PathBuf`] [`Stream`] implementation that immediately returns nothing.
 struct EmptyPathStream;
 
+#[cfg(any(target_arch = "wasm32", target_os = "android"))]
 impl Stream for EmptyPathStream {

----------------------------------------

File: crates/bevy_asset/src/lib.rs
Status: modified
Changes: +2 -0
Diff:
@@ -1511,6 +1511,7 @@ mod tests {
         Empty,
     }
 
+    #[allow(dead_code)]
     #[derive(Asset, TypePath)]
     pub struct StructTestAsset {
         #[dependency]
@@ -1519,6 +1520,7 @@ mod tests {
         embedded: TestAsset,

----------------------------------------

File: crates/bevy_audio/Cargo.toml
Status: modified
Changes: +10 -10
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_audio"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides audio functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,17 +10,17 @@ keywords = ["bevy"]
 
 [dependencies]

----------------------------------------

File: crates/bevy_color/Cargo.toml
Status: modified
Changes: +3 -3
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_color"
-version = "0.14.1"
+version = "0.14.2"
 edition = "2021"
 description = "Types for representing and manipulating color values"
 homepage = "https://bevyengine.org"
@@ -10,8 +10,8 @@ keywords = ["bevy", "color"]
 rust-version = "1.76.0"

----------------------------------------

File: crates/bevy_core/Cargo.toml
Status: modified
Changes: +6 -6
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_core"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides core functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,17 +10,17 @@ keywords = ["bevy"]
 

----------------------------------------

File: crates/bevy_core_pipeline/Cargo.toml
Status: modified
Changes: +12 -12
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_core_pipeline"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 authors = [
   "Bevy Contributors <bevyengine@gmail.com>",
@@ -22,17 +22,17 @@ smaa_luts = ["bevy_render/ktx2", "bevy_render/zstd"]
 
 [dependencies]
 # bevy

----------------------------------------

File: crates/bevy_core_pipeline/src/bloom/mod.rs
Status: modified
Changes: +5 -1
Diff:
@@ -338,7 +338,11 @@ fn prepare_bloom_textures(
         {
             // How many times we can halve the resolution minus one so we don't go unnecessarily low
             let mip_count = MAX_MIP_DIMENSION.ilog2().max(2) - 1;
-            let mip_height_ratio = MAX_MIP_DIMENSION as f32 / height as f32;
+            let mip_height_ratio = if height != 0 {
+                MAX_MIP_DIMENSION as f32 / height as f32
+            } else {
+                0.
+            };

----------------------------------------

File: crates/bevy_core_pipeline/src/smaa/smaa.wgsl
Status: modified
Changes: +2 -2
Diff:
@@ -757,10 +757,10 @@ fn calculate_diag_weights(tex_coord: vec2<f32>, e: vec2<f32>, subsample_indices:
     let d_xz = search_diag_2(tex_coord, vec2(-1.0, -1.0), &end);
     if (textureSampleLevel(edges_texture, edges_sampler, tex_coord, 0.0, vec2(1, 0)).r > 0.0) {
         let d_yw = search_diag_2(tex_coord, vec2(1.0, 1.0), &end);
-        d = vec4(d.x, d_yw.x, d.z, d_yw.y);
+        d = vec4(d_xz.x, d_yw.x, d_xz.y, d_yw.y);
         d.y += f32(end.y > 0.9);
     } else {
-        d = vec4(d.x, 0.0, d.z, 0.0);
+        d = vec4(d_xz.x, 0.0, d_xz.y, 0.0);

----------------------------------------

File: crates/bevy_derive/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_derive"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides derive implementations for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -12,7 +12,7 @@ keywords = ["bevy"]
 proc-macro = true

----------------------------------------

File: crates/bevy_dev_tools/Cargo.toml
Status: modified
Changes: +21 -21
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_dev_tools"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Collection of developer tools for the Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -15,26 +15,26 @@ bevy_ui_debug = []
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_asset = { path = "../bevy_asset", version = "0.14.0" }
-bevy_color = { path = "../bevy_color", version = "0.14.1" }
-bevy_core = { path = "../bevy_core", version = "0.14.0" }
-bevy_core_pipeline = { path = "../bevy_core_pipeline", version = "0.14.0" }
-bevy_diagnostic = { path = "../bevy_diagnostic", version = "0.14.0" }

----------------------------------------

File: crates/bevy_diagnostic/Cargo.toml
Status: modified
Changes: +7 -7
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_diagnostic"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides diagnostic functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -15,12 +15,12 @@ sysinfo_plugin = ["sysinfo"]
 

----------------------------------------

File: crates/bevy_dylib/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_dylib"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Force the Bevy Engine to be dynamically linked for faster linking"
 homepage = "https://bevyengine.org"
@@ -12,7 +12,7 @@ keywords = ["bevy"]
 crate-type = ["dylib"]

----------------------------------------

File: crates/bevy_dynamic_plugin/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_dynamic_plugin"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides dynamic plugin loading capabilities for non-wasm platforms"
 homepage = "https://bevyengine.org"
@@ -10,7 +10,7 @@ keywords = ["bevy"]
 

----------------------------------------

File: crates/bevy_ecs/Cargo.toml
Status: modified
Changes: +6 -6
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_ecs"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Bevy Engine's entity component system"
 homepage = "https://bevyengine.org"
@@ -18,11 +18,11 @@ default = ["bevy_reflect"]
 serialize = ["dep:serde"]

----------------------------------------

File: crates/bevy_ecs/macros/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_ecs_macros"
-version = "0.14.0"
+version = "0.14.1"
 description = "Bevy ECS Macros"
 edition = "2021"
 license = "MIT OR Apache-2.0"
@@ -9,7 +9,7 @@ license = "MIT OR Apache-2.0"
 proc-macro = true

----------------------------------------

File: crates/bevy_ecs/src/system/commands/mod.rs
Status: modified
Changes: +1 -1
Diff:
@@ -1325,7 +1325,7 @@ fn log_components(entity: Entity, world: &mut World) {
         .into_iter()
         .map(|component_info| component_info.name())
         .collect();
-    info!("Entity {:?}: {:?}", entity, debug_infos);
+    info!("Entity {entity}: {debug_infos:?}");
 }
 
 fn observe<E: Event, B: Bundle, M>(

----------------------------------------

File: crates/bevy_ecs/src/system/observer_system.rs
Status: modified
Changes: +63 -18
Diff:
@@ -8,31 +8,42 @@ use crate::{
 use super::IntoSystem;
 
 /// Implemented for systems that have an [`Observer`] as the first argument.
-pub trait ObserverSystem<E: 'static, B: Bundle>:
-    System<In = Trigger<'static, E, B>, Out = ()> + Send + 'static
+///
+/// [`Observer`]: crate::observer::Observer
+pub trait ObserverSystem<E: 'static, B: Bundle, Out = ()>:
+    System<In = Trigger<'static, E, B>, Out = Out> + Send + 'static
 {
 }
 
-impl<E: 'static, B: Bundle, T: System<In = Trigger<'static, E, B>, Out = ()> + Send + 'static>
-    ObserverSystem<E, B> for T
+impl<
+        E: 'static,
+        B: Bundle,
+        Out,
+        T: System<In = Trigger<'static, E, B>, Out = Out> + Send + 'static,
+    > ObserverSystem<E, B, Out> for T
 {
 }
 
 /// Implemented for systems that convert into [`ObserverSystem`].
-pub trait IntoObserverSystem<E: 'static, B: Bundle, M>: Send + 'static {
+pub trait IntoObserverSystem<E: 'static, B: Bundle, M, Out = ()>: Send + 'static {
     /// The type of [`System`] that this instance converts into.
-    type System: ObserverSystem<E, B>;
+    type System: ObserverSystem<E, B, Out>;
 
     /// Turns this value into its corresponding [`System`].
     fn into_system(this: Self) -> Self::System;
 }
 
-impl<S: IntoSystem<Trigger<'static, E, B>, (), M> + Send + 'static, M, E: 'static, B: Bundle>
-    IntoObserverSystem<E, B, M> for S
+impl<
+        S: IntoSystem<Trigger<'static, E, B>, Out, M> + Send + 'static,
+        M,
+        Out,

----------------------------------------

File: crates/bevy_ecs/src/world/component_constants.rs
Status: modified
Changes: +5 -0
Diff:
@@ -1,5 +1,7 @@
 use super::*;
 use crate::{self as bevy_ecs};
+#[cfg(feature = "bevy_reflect")]
+use bevy_reflect::Reflect;
 /// Internal components used by bevy with a fixed component id.
 /// Constants are used to skip [`TypeId`] lookups in hot paths.
 
@@ -12,12 +14,15 @@ pub const ON_REMOVE: ComponentId = ComponentId::new(2);
 

----------------------------------------

File: crates/bevy_encase_derive/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_encase_derive"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Bevy derive macro for encase"
 homepage = "https://bevyengine.org"
@@ -12,7 +12,7 @@ keywords = ["bevy"]
 proc-macro = true

----------------------------------------

File: crates/bevy_gilrs/Cargo.toml
Status: modified
Changes: +6 -6
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_gilrs"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Gamepad system made using Gilrs for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,11 +10,11 @@ keywords = ["bevy"]
 

----------------------------------------

File: crates/bevy_gizmos/Cargo.toml
Status: modified
Changes: +15 -15
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_gizmos"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides gizmos for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -14,20 +14,20 @@ webgpu = []
 
 [dependencies]
 # Bevy
-bevy_pbr = { path = "../bevy_pbr", version = "0.14.0", optional = true }
-bevy_sprite = { path = "../bevy_sprite", version = "0.14.0", optional = true }

----------------------------------------

File: crates/bevy_gizmos/macros/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_gizmos_macros"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Derive implementations for bevy_gizmos"
 homepage = "https://bevyengine.org"
@@ -13,7 +13,7 @@ proc-macro = true
 

----------------------------------------

File: crates/bevy_gltf/Cargo.toml
Status: modified
Changes: +22 -20
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_gltf"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Bevy Engine GLTF loading"
 homepage = "https://bevyengine.org"
@@ -9,33 +9,35 @@ license = "MIT OR Apache-2.0"
 keywords = ["bevy"]
 
 [features]
-dds = ["bevy_render/dds"]
+dds = ["bevy_render/dds", "bevy_core_pipeline/dds"]
 pbr_transmission_textures = ["bevy_pbr/pbr_transmission_textures"]
-pbr_multi_layer_material_textures = []
-pbr_anisotropy_texture = []
+pbr_multi_layer_material_textures = [
+  "bevy_pbr/pbr_multi_layer_material_textures",
+]
+pbr_anisotropy_texture = ["bevy_pbr/pbr_anisotropy_texture"]

----------------------------------------

File: crates/bevy_gltf/src/loader.rs
Status: modified
Changes: +3 -3
Diff:
@@ -508,9 +508,9 @@ async fn load_gltf<'a, 'b, 'c>(
 
                     mesh.set_morph_targets(handle);
                     let extras = gltf_mesh.extras().as_ref();
-                    if let Option::<MorphTargetNames>::Some(names) =
-                        extras.and_then(|extras| serde_json::from_str(extras.get()).ok())
-                    {
+                    if let Some(names) = extras.and_then(|extras| {
+                        serde_json::from_str::<MorphTargetNames>(extras.get()).ok()
+                    }) {

----------------------------------------

File: crates/bevy_hierarchy/Cargo.toml
Status: modified
Changes: +6 -6
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_hierarchy"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides hierarchy functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -16,14 +16,14 @@ reflect = ["bevy_ecs/bevy_reflect", "bevy_reflect"]
 

----------------------------------------

File: crates/bevy_input/Cargo.toml
Status: modified
Changes: +20 -9
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_input"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides input functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -9,19 +9,30 @@ license = "MIT OR Apache-2.0"
 keywords = ["bevy"]
 
 [features]
-default = []
-serialize = ["serde"]
+default = ["bevy_reflect"]

----------------------------------------

File: crates/bevy_input/src/button_input.rs
Status: modified
Changes: +4 -5
Diff:
@@ -1,6 +1,7 @@
 //! The generic input type.
 
 use bevy_ecs::system::Resource;
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_utils::HashSet;
 use std::hash::Hash;
@@ -152,8 +153,8 @@ use std::hash::Hash;
 ///
 ///[`ResMut`]: bevy_ecs::system::ResMut

----------------------------------------

File: crates/bevy_input/src/gamepad.rs
Status: modified
Changes: +71 -57
Diff:
@@ -6,6 +6,7 @@ use bevy_ecs::{
     change_detection::DetectChangesMut,
     system::{Res, ResMut, Resource},
 };
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::{std_traits::ReflectDefault, Reflect};
 use bevy_utils::Duration;
 use bevy_utils::{tracing::info, HashMap};
@@ -66,7 +67,7 @@ pub enum ButtonSettingsError {
     },
 }
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// A gamepad with an associated `ID`.
@@ -80,11 +81,15 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 /// ## Note
 ///
 /// The `ID` of a gamepad is fixed until the gamepad disconnects or the app is restarted.
-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Reflect)]
-#[reflect(Debug, Hash, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    feature = "bevy_reflect",
+    derive(Reflect),
+    reflect(Debug, Hash, PartialEq)
+)]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
+#[cfg_attr(
+    all(feature = "serialize", feature = "bevy_reflect"),
     reflect(Serialize, Deserialize)
 )]
 pub struct Gamepad {
@@ -100,11 +105,11 @@ impl Gamepad {
 }
 
 /// Metadata associated with a [`Gamepad`].
-#[derive(Debug, Clone, PartialEq, Eq, Reflect)]
-#[reflect(Debug, PartialEq)]
+#[derive(Debug, Clone, PartialEq, Eq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect), reflect(Debug, PartialEq))]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    all(feature = "serialize", feature = "bevy_reflect"),
     reflect(Serialize, Deserialize)
 )]
 pub struct GamepadInfo {
@@ -167,11 +172,15 @@ impl Gamepads {
 /// [`GamepadButtonChangedEvent`]. It is also used in the [`GamepadButton`]
 /// which in turn is used to create the [`ButtonInput<GamepadButton>`] or
 /// [`Axis<GamepadButton>`] `bevy` resources.
-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Reflect, PartialOrd, Ord)]
-#[reflect(Debug, Hash, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]
+#[cfg_attr(
+    feature = "bevy_reflect",
+    derive(Reflect),
+    reflect(Debug, Hash, PartialEq)
+)]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    all(feature = "serialize", feature = "bevy_reflect"),
     reflect(Serialize, Deserialize)
 )]
 pub enum GamepadButtonType {
@@ -232,11 +241,15 @@ pub enum GamepadButtonType {
 /// ## Updating
 ///
 /// The gamepad button resources are updated inside of the [`gamepad_button_event_system`].
-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, Reflect)]
-#[reflect(Debug, Hash, PartialEq)]
+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    feature = "bevy_reflect",
+    derive(Reflect),
+    reflect(Debug, Hash, PartialEq)
+)]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]

----------------------------------------

File: crates/bevy_input/src/gestures.rs
Status: modified
Changes: +18 -17
Diff:
@@ -2,9 +2,10 @@
 
 use bevy_ecs::event::Event;
 use bevy_math::Vec2;
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// Two-finger pinch gesture, often used for magnifications.
@@ -16,11 +17,11 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 ///
 /// - Only available on **`macOS`** and **`iOS`**.
 /// - On **`iOS`**, must be enabled first
-#[derive(Event, Debug, Clone, Copy, PartialEq, Reflect)]
-#[reflect(Debug, PartialEq)]
+#[derive(Event, Debug, Clone, Copy, PartialEq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect), reflect(Debug, PartialEq))]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    all(feature = "serialize", feature = "bevy_reflect"),

----------------------------------------

File: crates/bevy_input/src/keyboard.rs
Status: modified
Changes: +38 -23
Diff:
@@ -72,10 +72,11 @@ use bevy_ecs::{
     event::{Event, EventReader},
     system::ResMut,
 };
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 use smol_str::SmolStr;
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// A keyboard input event.
@@ -87,11 +88,11 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 ///
 /// The event is consumed inside of the [`keyboard_input_system`]
 /// to update the [`ButtonInput<KeyCode>`](ButtonInput<KeyCode>) resource.
-#[derive(Event, Debug, Clone, PartialEq, Eq, Reflect)]
-#[reflect(Debug, PartialEq)]
+#[derive(Event, Debug, Clone, PartialEq, Eq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect), reflect(Debug, PartialEq))]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    all(feature = "serialize", feature = "bevy_reflect"),
     reflect(Serialize, Deserialize)
 )]
 pub struct KeyboardInput {
@@ -111,10 +112,11 @@ pub struct KeyboardInput {
 /// when, for example, switching between windows with 'Alt-Tab' or using any other
 /// OS specific key combination that leads to Bevy window losing focus and not receiving any
 /// input events
-#[derive(Event, Debug, Clone, PartialEq, Eq, Reflect)]
+#[derive(Event, Debug, Clone, PartialEq, Eq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect))]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",

----------------------------------------

File: crates/bevy_input/src/lib.rs
Status: modified
Changes: +25 -17
Diff:
@@ -40,6 +40,7 @@ pub mod prelude {
 
 use bevy_app::prelude::*;
 use bevy_ecs::prelude::*;
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 use gestures::*;
 use keyboard::{keyboard_input_system, KeyCode, KeyboardFocusLost, KeyboardInput};
@@ -53,7 +54,7 @@ use gamepad::{
     GamepadRumbleRequest, GamepadSettings, Gamepads,
 };
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// Adds keyboard and mouse input to an App
@@ -113,27 +114,34 @@ impl Plugin for InputPlugin {
             .init_resource::<Touches>()
             .add_systems(PreUpdate, touch_screen_input_system.in_set(InputSystem));
 
-        // Register common types

----------------------------------------

File: crates/bevy_input/src/mouse.rs
Status: modified
Changes: +26 -21
Diff:
@@ -8,9 +8,10 @@ use bevy_ecs::{
     system::ResMut,
 };
 use bevy_math::Vec2;
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// A mouse button input event.
@@ -21,11 +22,11 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 ///
 /// The event is read inside of the [`mouse_button_input_system`]
 /// to update the [`ButtonInput<MouseButton>`] resource.
-#[derive(Event, Debug, Clone, Copy, PartialEq, Eq, Reflect)]
-#[reflect(Debug, PartialEq)]
+#[derive(Event, Debug, Clone, Copy, PartialEq, Eq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect), reflect(Debug, PartialEq))]
+#[cfg_attr(feature = "serialize", derive(serde::Serialize, serde::Deserialize))]
 #[cfg_attr(
-    feature = "serialize",
-    derive(serde::Serialize, serde::Deserialize),
+    all(feature = "serialize", feature = "bevy_reflect"),
     reflect(Serialize, Deserialize)
 )]
 pub struct MouseButtonInput {
@@ -47,11 +48,15 @@ pub struct MouseButtonInput {
 /// ## Updating
 ///
 /// The resource is updated inside of the [`mouse_button_input_system`].

----------------------------------------

File: crates/bevy_input/src/touch.rs
Status: modified
Changes: +18 -13
Diff:
@@ -4,10 +4,11 @@ use bevy_ecs::entity::Entity;
 use bevy_ecs::event::{Event, EventReader};
 use bevy_ecs::system::{ResMut, Resource};
 use bevy_math::Vec2;
+#[cfg(feature = "bevy_reflect")]
 use bevy_reflect::Reflect;
 use bevy_utils::HashMap;
 
-#[cfg(feature = "serialize")]
+#[cfg(all(feature = "serialize", feature = "bevy_reflect"))]
 use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 
 /// A touch input event.
@@ -33,11 +34,11 @@ use bevy_reflect::{ReflectDeserialize, ReflectSerialize};
 ///
 /// This event is the translated version of the `WindowEvent::Touch` from the `winit` crate.
 /// It is available to the end user and can be used for game logic.
-#[derive(Event, Debug, Clone, Copy, PartialEq, Reflect)]
-#[reflect(Debug, PartialEq)]
+#[derive(Event, Debug, Clone, Copy, PartialEq)]
+#[cfg_attr(feature = "bevy_reflect", derive(Reflect), reflect(Debug, PartialEq))]

----------------------------------------

File: crates/bevy_internal/Cargo.toml
Status: modified
Changes: +36 -36
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_internal"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "An internal Bevy crate used to facilitate optional dynamic linking via the 'dynamic_linking' feature"
 homepage = "https://bevyengine.org"
@@ -197,44 +197,44 @@ bevy_state = ["dep:bevy_state"]
 
 [dependencies]
 # bevy
-bevy_a11y = { path = "../bevy_a11y", version = "0.14.0" }
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_core = { path = "../bevy_core", version = "0.14.0" }
-bevy_derive = { path = "../bevy_derive", version = "0.14.0" }
-bevy_diagnostic = { path = "../bevy_diagnostic", version = "0.14.0" }
-bevy_ecs = { path = "../bevy_ecs", version = "0.14.0" }
-bevy_state = { path = "../bevy_state", optional = true, version = "0.14.0" }
-bevy_hierarchy = { path = "../bevy_hierarchy", version = "0.14.0" }
-bevy_input = { path = "../bevy_input", version = "0.14.0" }
-bevy_log = { path = "../bevy_log", version = "0.14.0" }
-bevy_math = { path = "../bevy_math", version = "0.14.0" }
-bevy_ptr = { path = "../bevy_ptr", version = "0.14.0" }
-bevy_reflect = { path = "../bevy_reflect", version = "0.14.0", features = [
+bevy_a11y = { path = "../bevy_a11y", version = "0.14.1" }
+bevy_app = { path = "../bevy_app", version = "0.14.1" }
+bevy_core = { path = "../bevy_core", version = "0.14.1" }
+bevy_derive = { path = "../bevy_derive", version = "0.14.1" }

----------------------------------------

File: crates/bevy_log/Cargo.toml
Status: modified
Changes: +4 -4
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_log"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides logging for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -13,9 +13,9 @@ trace = ["tracing-error"]
 trace_tracy_memory = ["dep:tracy-client"]

----------------------------------------

File: crates/bevy_macro_utils/Cargo.toml
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_macro_utils"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "A collection of utils for Bevy Engine"
 homepage = "https://bevyengine.org"

----------------------------------------

File: crates/bevy_math/Cargo.toml
Status: modified
Changes: +3 -3
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_math"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides math functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -20,7 +20,7 @@ rand = { version = "0.8", features = [
 ], default-features = false, optional = true }

----------------------------------------

File: crates/bevy_math/src/bounding/bounded3d/extrusion.rs
Status: modified
Changes: +1 -1
Diff:
@@ -20,7 +20,7 @@ impl BoundedExtrusion for Circle {
         let segment_dir = rotation * Vec3::Z;
         let top = (segment_dir * half_depth).abs();
 
-        let e = Vec3::ONE - segment_dir * segment_dir;
+        let e = (Vec3::ONE - segment_dir * segment_dir).max(Vec3::ZERO);
         let half_size = self.radius * Vec3::new(e.x.sqrt(), e.y.sqrt(), e.z.sqrt());
 
         Aabb3d {

----------------------------------------

File: crates/bevy_math/src/bounding/bounded3d/primitive_impls.rs
Status: modified
Changes: +8 -8
Diff:
@@ -125,7 +125,7 @@ impl Bounded3d for Cylinder {
         let top = segment_dir * self.half_height;
         let bottom = -top;
 
-        let e = Vec3::ONE - segment_dir * segment_dir;
+        let e = (Vec3::ONE - segment_dir * segment_dir).max(Vec3::ZERO);
         let half_size = self.radius * Vec3::new(e.x.sqrt(), e.y.sqrt(), e.z.sqrt());
 
         Aabb3d {
@@ -169,11 +169,11 @@ impl Bounded3d for Cone {
     fn aabb_3d(&self, translation: Vec3, rotation: Quat) -> Aabb3d {
         // Reference: http://iquilezles.org/articles/diskbbox/
 
-        let top = rotation * Vec3::Y * 0.5 * self.height;
+        let segment_dir = rotation * Vec3::Y;
+        let top = segment_dir * 0.5 * self.height;

----------------------------------------

File: crates/bevy_math/src/direction.rs
Status: modified
Changes: +2 -2
Diff:
@@ -229,7 +229,7 @@ impl Dir2 {
         self.rotation_from_x().inverse()
     }
 
-    /// Get the rotation that rotates this direction to the Y-axis.
+    /// Get the rotation that rotates the Y-axis to this direction.
     #[inline]
     pub fn rotation_from_y(self) -> Rot2 {
         // `x <- y`, `y <- -x` correspond to rotating clockwise by pi/2;
@@ -238,7 +238,7 @@ impl Dir2 {

----------------------------------------

File: crates/bevy_mikktspace/Cargo.toml
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_mikktspace"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 authors = [
   "Benjamin Wasty <benny.wasty@gmail.com>",

----------------------------------------

File: crates/bevy_pbr/Cargo.toml
Status: modified
Changes: +13 -13
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_pbr"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Adds PBR rendering to Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -30,20 +30,20 @@ meshlet_processor = ["meshlet", "dep:meshopt", "dep:metis", "dep:itertools"]
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }

----------------------------------------

File: crates/bevy_pbr/src/render/clustered_forward.wgsl
Status: modified
Changes: +4 -2
Diff:
@@ -84,11 +84,12 @@ fn cluster_debug_visualization(
     if (z_slice & 1u) == 1u {
         z_slice = z_slice + bindings::lights.cluster_dimensions.z / 2u;
     }
-    let slice_color = hsv_to_rgb(
+    let slice_color_hsv = vec3(
         f32(z_slice) / f32(bindings::lights.cluster_dimensions.z + 1u) * PI_2,
         1.0,
         0.5
     );

----------------------------------------

File: crates/bevy_pbr/src/render/shadows.wgsl
Status: modified
Changes: +2 -1
Diff:
@@ -194,11 +194,12 @@ fn cascade_debug_visualization(
 ) -> vec3<f32> {
     let overlay_alpha = 0.95;
     let cascade_index = get_cascade_index(light_id, view_z);
-    let cascade_color = hsv_to_rgb(
+    let cascade_color_hsv = vec3(
         f32(cascade_index) / f32(#{MAX_CASCADES_PER_LIGHT}u + 1u) * PI_2,
         1.0,
         0.5
     );

----------------------------------------

File: crates/bevy_ptr/Cargo.toml
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_ptr"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Utilities for working with untyped pointers in a more safe way"
 homepage = "https://bevyengine.org"

----------------------------------------

File: crates/bevy_reflect/Cargo.toml
Status: modified
Changes: +4 -4
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_reflect"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Dynamically interact with rust types"
 homepage = "https://bevyengine.org"
@@ -22,9 +22,9 @@ documentation = ["bevy_reflect_derive/documentation"]
 

----------------------------------------

File: crates/bevy_reflect/derive/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_reflect_derive"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Derive implementations for bevy_reflect"
 homepage = "https://bevyengine.org"
@@ -17,7 +17,7 @@ default = []
 documentation = []

----------------------------------------

File: crates/bevy_render/Cargo.toml
Status: modified
Changes: +20 -20
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_render"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides rendering functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -37,32 +37,32 @@ ios_simulator = []
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_asset = { path = "../bevy_asset", version = "0.14.0" }
-bevy_color = { path = "../bevy_color", version = "0.14.1", features = [
+bevy_app = { path = "../bevy_app", version = "0.14.1" }
+bevy_asset = { path = "../bevy_asset", version = "0.14.1" }
+bevy_color = { path = "../bevy_color", version = "0.14.2", features = [
   "serialize",
   "wgpu-types",

----------------------------------------

File: crates/bevy_render/macros/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_render_macros"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Derive implementations for bevy_render"
 homepage = "https://bevyengine.org"
@@ -12,7 +12,7 @@ keywords = ["bevy"]
 proc-macro = true

----------------------------------------

File: crates/bevy_render/src/batching/gpu_preprocessing.rs
Status: modified
Changes: +21 -11
Diff:
@@ -226,8 +226,14 @@ impl FromWorld for GpuPreprocessingSupport {
         let device = world.resource::<RenderDevice>();
 
         if device.limits().max_compute_workgroup_size_x == 0 ||
-            // filter lower end / older devices on Android as they crash when using GPU preprocessing
-            (cfg!(target_os = "android") && adapter.get_info().name.starts_with("Adreno (TM) 6"))
+            // filter some Qualcomm devices on Android as they crash when using GPU preprocessing
+            (cfg!(target_os = "android") && {
+                let name = adapter.get_info().name;
+                // filter out Adreno 730 and earlier GPUs (except 720, it's newer than 730)
+                name.strip_prefix("Adreno (TM) ").is_some_and(|version|
+                    version != "720" && version.parse::<u16>().is_ok_and(|version| version <= 730)
+                )
+            })
         {
             GpuPreprocessingSupport::None
         } else if !device
@@ -419,12 +425,17 @@ pub fn batch_and_prepare_sorted_render_phase<I, GFBD>(

----------------------------------------

File: crates/bevy_render/src/camera/camera.rs
Status: modified
Changes: +1 -1
Diff:
@@ -61,7 +61,7 @@ impl Default for Viewport {
     fn default() -> Self {
         Self {
             physical_position: Default::default(),
-            physical_size: Default::default(),
+            physical_size: UVec2::new(1, 1),
             depth: 0.0..1.0,
         }
     }

----------------------------------------

File: crates/bevy_render/src/texture/image.rs
Status: modified
Changes: +1 -1
Diff:
@@ -744,7 +744,7 @@ impl Image {
                 let image_crate_format = format
                     .as_image_crate_format()
                     .ok_or_else(|| TextureError::UnsupportedTextureFormat(format!("{format:?}")))?;
-                let mut reader = image::io::Reader::new(std::io::Cursor::new(buffer));
+                let mut reader = image::ImageReader::new(std::io::Cursor::new(buffer));
                 reader.set_format(image_crate_format);
                 reader.no_limits();
                 let dyn_img = reader.decode()?;

----------------------------------------

File: crates/bevy_render/src/texture/texture_cache.rs
Status: modified
Changes: +8 -2
Diff:
@@ -82,16 +82,22 @@ impl TextureCache {
         }
     }
 
+    /// Returns `true` if the texture cache contains no textures.
+    pub fn is_empty(&self) -> bool {
+        self.textures.is_empty()
+    }
+
     /// Updates the cache and only retains recently used textures.

----------------------------------------

File: crates/bevy_render/src/view/visibility/render_layers.rs
Status: modified
Changes: +7 -1
Diff:
@@ -162,7 +162,7 @@ impl RenderLayers {
                 return None;
             }
             let next = buffer.trailing_zeros() + 1;
-            buffer >>= next;
+            buffer = buffer.checked_shr(next).unwrap_or(0);
             layer += next as usize;
             Some(layer - 1)
         })
@@ -359,4 +359,10 @@ mod rendering_mask_tests {

----------------------------------------

File: crates/bevy_scene/Cargo.toml
Status: modified
Changes: +10 -10
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_scene"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides scene functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -14,17 +14,17 @@ serialize = ["dep:serde", "uuid/serde", "bevy_ecs/serialize"]
 
 [dependencies]

----------------------------------------

File: crates/bevy_sprite/Cargo.toml
Status: modified
Changes: +12 -12
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_sprite"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides sprite functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -14,19 +14,19 @@ webgpu = []
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }

----------------------------------------

File: crates/bevy_sprite/src/texture_slice/slicer.rs
Status: modified
Changes: +36 -45
Diff:
@@ -126,11 +126,11 @@ impl TextureSlicer {
                     ),
                 },
                 draw_size: vec2(
-                    bl_corner.draw_size.x,
-                    render_size.y - (bl_corner.draw_size.y + tl_corner.draw_size.y),
+                    tl_corner.draw_size.x,
+                    render_size.y - (tl_corner.draw_size.y + bl_corner.draw_size.y),
                 ),
                 offset: vec2(
-                    -render_size.x + bl_corner.draw_size.x,
+                    tl_corner.draw_size.x - render_size.x,
                     bl_corner.draw_size.y - tl_corner.draw_size.y,
                 ) / 2.0,
             },
@@ -141,21 +141,21 @@ impl TextureSlicer {
                         base_rect.max.x - self.border.right,
                         base_rect.min.y + self.border.top,
                     ),
-                    max: vec2(base_rect.max.x, base_rect.max.y - self.border.bottom),
+                    max: base_rect.max - vec2(0.0, self.border.bottom),
                 },
                 draw_size: vec2(
-                    br_corner.draw_size.x,
-                    render_size.y - (br_corner.draw_size.y + tr_corner.draw_size.y),
+                    tr_corner.draw_size.x,
+                    render_size.y - (tr_corner.draw_size.y + br_corner.draw_size.y),
                 ),
                 offset: vec2(
-                    render_size.x - br_corner.draw_size.x,
+                    render_size.x - tr_corner.draw_size.x,
                     br_corner.draw_size.y - tr_corner.draw_size.y,
                 ) / 2.0,
             },
         ]
     }
 
-    /// Computes the 2 vertical side slices (bottom and top borders)
+    /// Computes the 2 vertical side slices (top and bottom borders)
     #[must_use]
     fn vertical_side_slices(
         &self,
@@ -164,24 +164,6 @@ impl TextureSlicer {
         render_size: Vec2,
     ) -> [TextureSlice; 2] {
         [
-            // Bottom
-            TextureSlice {
-                texture_rect: Rect {
-                    min: vec2(
-                        base_rect.min.x + self.border.left,

----------------------------------------

File: crates/bevy_state/Cargo.toml
Status: modified
Changes: +7 -7
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_state"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Finite state machines for Bevy"
 homepage = "https://bevyengine.org"
@@ -17,12 +17,12 @@ bevy_app = ["dep:bevy_app"]
 bevy_hierarchy = ["dep:bevy_hierarchy"]

----------------------------------------

File: crates/bevy_state/macros/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_state_macros"
-version = "0.14.0"
+version = "0.14.1"
 description = "Macros for bevy_state"
 edition = "2021"
 license = "MIT OR Apache-2.0"
@@ -9,7 +9,7 @@ license = "MIT OR Apache-2.0"
 proc-macro = true

----------------------------------------

File: crates/bevy_state/src/app.rs
Status: modified
Changes: +4 -7
Diff:
@@ -1,9 +1,5 @@
-use bevy_app::{App, MainScheduleOrder, Plugin, PreUpdate, Startup, SubApp};
-use bevy_ecs::{
-    event::Events,
-    schedule::{IntoSystemConfigs, ScheduleLabel},
-    world::FromWorld,
-};
+use bevy_app::{App, MainScheduleOrder, Plugin, PreStartup, PreUpdate, SubApp};
+use bevy_ecs::{event::Events, schedule::IntoSystemConfigs, world::FromWorld};
 use bevy_utils::{tracing::warn, warn_once};

----------------------------------------

File: crates/bevy_state/src/state/mod.rs
Status: modified
Changes: +10 -14
Diff:
@@ -19,7 +19,6 @@ pub use transitions::*;
 mod tests {
     use bevy_ecs::event::EventRegistry;
     use bevy_ecs::prelude::*;
-    use bevy_ecs::schedule::ScheduleLabel;
     use bevy_state_macros::States;
     use bevy_state_macros::SubStates;
 
@@ -64,7 +63,7 @@ mod tests {
 
         world.insert_resource(schedules);
 
-        setup_state_transitions_in_world(&mut world, None);
+        setup_state_transitions_in_world(&mut world);
 
         world.run_schedule(StateTransition);
         assert_eq!(world.resource::<State<SimpleState>>().0, SimpleState::A);
@@ -120,7 +119,7 @@ mod tests {
 
         world.insert_resource(schedules);
 
-        setup_state_transitions_in_world(&mut world, None);
+        setup_state_transitions_in_world(&mut world);
 
         world.run_schedule(StateTransition);
         assert_eq!(world.resource::<State<SimpleState>>().0, SimpleState::A);
@@ -180,7 +179,7 @@ mod tests {
 
         world.insert_resource(schedules);
 
-        setup_state_transitions_in_world(&mut world, None);
+        setup_state_transitions_in_world(&mut world);
 
         world.run_schedule(StateTransition);
         assert_eq!(world.resource::<State<SimpleState>>().0, SimpleState::A);
@@ -275,7 +274,7 @@ mod tests {

----------------------------------------

File: crates/bevy_state/src/state/transitions.rs
Status: modified
Changes: +2 -13
Diff:
@@ -2,9 +2,7 @@ use std::{marker::PhantomData, mem};
 
 use bevy_ecs::{
     event::{Event, EventReader, EventWriter},
-    schedule::{
-        InternedScheduleLabel, IntoSystemSetConfigs, Schedule, ScheduleLabel, Schedules, SystemSet,
-    },
+    schedule::{IntoSystemSetConfigs, Schedule, ScheduleLabel, Schedules, SystemSet},
     system::{Commands, In, ResMut},
     world::World,
 };
@@ -181,10 +179,7 @@ pub(crate) fn internal_apply_state_transition<S: States>(

----------------------------------------

File: crates/bevy_state/src/state_scoped.rs
Status: modified
Changes: +6 -1
Diff:
@@ -1,3 +1,5 @@
+#[cfg(feature = "bevy_reflect")]
+use bevy_ecs::reflect::ReflectComponent;
 use bevy_ecs::{
     component::Component,
     entity::Entity,
@@ -6,6 +8,8 @@ use bevy_ecs::{
 };
 #[cfg(feature = "bevy_hierarchy")]
 use bevy_hierarchy::DespawnRecursiveExt;

----------------------------------------

File: crates/bevy_tasks/Cargo.toml
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_tasks"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "A task executor for Bevy Engine"
 homepage = "https://bevyengine.org"

----------------------------------------

File: crates/bevy_text/Cargo.toml
Status: modified
Changes: +12 -12
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_text"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides text functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -14,19 +14,19 @@ default_font = []
 
 [dependencies]
 # bevy
-bevy_app = { path = "../bevy_app", version = "0.14.0" }

----------------------------------------

File: crates/bevy_time/Cargo.toml
Status: modified
Changes: +5 -5
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_time"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides time functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -14,14 +14,14 @@ serialize = ["serde"]
 

----------------------------------------

File: crates/bevy_transform/Cargo.toml
Status: modified
Changes: +8 -8
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_transform"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides transform functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,21 +10,21 @@ keywords = ["bevy"]
 
 [dependencies]
 # bevy

----------------------------------------

File: crates/bevy_transform/src/components/transform.rs
Status: modified
Changes: +6 -6
Diff:
@@ -222,8 +222,8 @@ impl Transform {
     /// Get the unit vector in the local `X` direction.
     #[inline]
     pub fn local_x(&self) -> Dir3 {
-        // Dir3::new(x) panics if x is of invalid length, but quat * unit vector is length 1
-        Dir3::new(self.rotation * Vec3::X).unwrap()
+        // Quat * unit vector is length 1
+        Dir3::new_unchecked(self.rotation * Vec3::X)
     }
 
     /// Equivalent to [`-local_x()`][Transform::local_x()]

----------------------------------------

File: crates/bevy_ui/Cargo.toml
Status: modified
Changes: +18 -18
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_ui"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "A custom ECS-driven UI framework built specifically for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,25 +10,25 @@ keywords = ["bevy"]
 
 [dependencies]
 # bevy
-bevy_a11y = { path = "../bevy_a11y", version = "0.14.0" }
-bevy_app = { path = "../bevy_app", version = "0.14.0" }
-bevy_asset = { path = "../bevy_asset", version = "0.14.0" }
-bevy_color = { path = "../bevy_color", version = "0.14.1" }
-bevy_core_pipeline = { path = "../bevy_core_pipeline", version = "0.14.0" }

----------------------------------------

File: crates/bevy_ui/src/layout/mod.rs
Status: modified
Changes: +7 -0
Diff:
@@ -217,6 +217,13 @@ pub fn ui_layout_system(
     // clean up removed nodes after syncing children to avoid potential panic (invalid SlotMap key used)
     ui_surface.remove_entities(removed_components.removed_nodes.read());
 
+    // Re-sync changed children: avoid layout glitches caused by removed nodes that are still set as a child of another node
+    children_query.iter().for_each(|(entity, children)| {
+        if children.is_changed() {
+            ui_surface.update_children(entity, &children);
+        }
+    });

----------------------------------------

File: crates/bevy_ui/src/layout/ui_surface.rs
Status: modified
Changes: +1 -1
Diff:
@@ -119,7 +119,7 @@ impl UiSurface {
                 taffy_children.push(*taffy_node);
             } else {
                 warn!(
-                    "Unstyled child in a UI entity hierarchy. You are using an entity \
+                    "Unstyled child `{child}` in a UI entity hierarchy. You are using an entity \
 without UI components as a child of an entity with UI components, results may be unexpected."
                 );
             }

----------------------------------------

File: crates/bevy_ui/src/ui_node.rs
Status: modified
Changes: +1 -1
Diff:
@@ -1988,7 +1988,7 @@ impl Default for ZIndex {
 ///
 /// <https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius>
 #[derive(Component, Copy, Clone, Debug, PartialEq, Reflect)]
-#[reflect(PartialEq, Default)]
+#[reflect(Component, PartialEq, Default)]
 #[cfg_attr(
     feature = "serialize",
     derive(serde::Serialize, serde::Deserialize),

----------------------------------------

File: crates/bevy_utils/Cargo.toml
Status: modified
Changes: +2 -2
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_utils"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "A collection of utils for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -16,7 +16,7 @@ ahash = "0.8.7"
 tracing = { version = "0.1", default-features = false, features = ["std"] }

----------------------------------------

File: crates/bevy_utils/macros/Cargo.toml
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_utils_proc_macros"
-version = "0.14.0"
+version = "0.14.1"
 description = "Bevy Utils Proc Macros"
 edition = "2021"
 license = "MIT OR Apache-2.0"

----------------------------------------

File: crates/bevy_window/Cargo.toml
Status: modified
Changes: +8 -8
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_window"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "Provides windowing functionality for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -10,19 +10,19 @@ keywords = ["bevy"]
 
 [features]

----------------------------------------

File: crates/bevy_window/src/system.rs
Status: modified
Changes: +4 -1
Diff:
@@ -50,6 +50,9 @@ pub fn close_when_requested(
     }
     // Mark the window as closing so we can despawn it on the next frame
     for event in closed.read() {
-        commands.entity(event.window).insert(ClosingWindow);
+        // When spamming the window close button on windows (other platforms too probably)
+        // we may receive a `WindowCloseRequested` for a window we've just despawned in the above
+        // loop.
+        commands.entity(event.window).try_insert(ClosingWindow);
     }

----------------------------------------

File: crates/bevy_winit/Cargo.toml
Status: modified
Changes: +14 -15
Diff:
@@ -1,6 +1,6 @@
 [package]
 name = "bevy_winit"
-version = "0.14.0"
+version = "0.14.1"
 edition = "2021"
 description = "A winit window and input backend for Bevy Engine"
 homepage = "https://bevyengine.org"
@@ -13,22 +13,22 @@ trace = []
 wayland = ["winit/wayland", "winit/wayland-csd-adwaita"]
 x11 = ["winit/x11"]
 accesskit_unix = ["accesskit_winit/accesskit_unix", "accesskit_winit/async-io"]
-serialize = ["serde"]
+serialize = ["serde", "bevy_input/serialize", "bevy_window/serialize"]
 
 [dependencies]
 # bevy

----------------------------------------

File: crates/bevy_winit/src/state.rs
Status: modified
Changes: +9 -1
Diff:
@@ -504,8 +504,16 @@ impl<T: Event> ApplicationHandler<T> for WinitAppRunnerState<T> {
         let begin_frame_time = Instant::now();
 
         if should_update {
+            let (_, windows) = focused_windows_state.get(self.world());
+            // If no windows exist, this will evaluate to `true`.
+            let all_invisible = windows.iter().all(|w| !w.1.visible);
+
             // Not redrawing, but the timeout elapsed.
-            if !self.ran_update_since_last_redraw {

----------------------------------------

File: examples/2d/2d_shapes.rs
Status: modified
Changes: +18 -6
Diff:
@@ -1,16 +1,26 @@
 //! Shows how to render simple primitive shapes with a single color.
+//!
+//! You can toggle wireframes with the space bar except on wasm. Wasm does not support
+//! `POLYGON_MODE_LINE` on the gpu.
 
+#[cfg(not(target_arch = "wasm32"))]
+use bevy::sprite::{Wireframe2dConfig, Wireframe2dPlugin};
 use bevy::{
     prelude::*,
-    sprite::{MaterialMesh2dBundle, Mesh2dHandle, Wireframe2dConfig, Wireframe2dPlugin},
+    sprite::{MaterialMesh2dBundle, Mesh2dHandle},
 };
 
 fn main() {
-    App::new()

----------------------------------------

File: examples/3d/3d_shapes.rs
Status: modified
Changes: +16 -2
Diff:
@@ -1,11 +1,15 @@
 //! This example demonstrates the built-in 3d shapes in Bevy.
 //! The scene includes a patterned texture and a rotation for visualizing the normals and UVs.
+//!
+//! You can toggle wireframes with the space bar except on wasm. Wasm does not support
+//! `POLYGON_MODE_LINE` on the gpu.
 
 use std::f32::consts::PI;
 
+#[cfg(not(target_arch = "wasm32"))]
+use bevy::pbr::wireframe::{WireframeConfig, WireframePlugin};
 use bevy::{
     color::palettes::basic::SILVER,
-    pbr::wireframe::{WireframeConfig, WireframePlugin},
     prelude::*,
     render::{
         render_asset::RenderAssetUsages,

----------------------------------------

File: tools/example-showcase/src/main.rs
Status: modified
Changes: +6 -6
Diff:
@@ -496,7 +496,7 @@ header_message = \"Examples (WebGL2)\"
                 // and other characters that don't
                 // work well in a URL path.
                 let category_path = root_path.join(
-                    &to_show
+                    to_show
                         .category
                         .replace(['(', ')'], "")
                         .replace(' ', "-")
@@ -522,7 +522,7 @@ weight = {}
                         .unwrap();
                     categories.insert(to_show.category.clone(), 0);
                 }
-                let example_path = category_path.join(&to_show.technical_name.replace('_', "-"));
+                let example_path = category_path.join(to_show.technical_name.replace('_', "-"));
                 let _ = fs::create_dir_all(&example_path);

----------------------------------------

