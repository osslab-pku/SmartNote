Changes between v1.15.1 and v1.16.0
================================================================================

COMMITS
--------------------------------------------------------------------------------

Commit: 0ae3e5197755895eb41bc99f7761a00a491d93fc
Author: Sojin Park
Date: 2024-08-10 08:38:07+00:00
Message: docs: Clarify docs for es-toolkit/compat
----------------------------------------

Commit: 2a3013597c5c523bdbe946432607e3393cd90210
Author: Dayong Lee
Date: 2024-08-11 01:45:05+00:00
Message: fix(toMerged): Add missing export (#373)
----------------------------------------

Commit: 5260d5b81bfb8b667e788184c84491f6f0ee0697
Author: D-Sketon
Date: 2024-08-11 01:53:02+00:00
Message: feat(partial, partialRight): Implement partial/partialRight (#368)

* feat(partial/partialRight): implenent partial/partialRight

* Apply suggestions from code review

---------

Co-authored-by: Sojin Park <raon0211@gmail.com>
----------------------------------------

Commit: be4162dc19003c7accde6c051edc0f85e3b72d76
Author: Sojin Park
Date: 2024-08-11 01:54:13+00:00
Message: style: Apply prettier
----------------------------------------

Commit: 01cf3a6c9ab401cace7149b4ff9985397d7832a4
Author: Sojin Park
Date: 2024-08-11 03:56:15+00:00
Message: feat(has): Implement has
----------------------------------------

Commit: 5cb0b78819bac7c729c9429e2ba4d9ceb4d6613d
Author: Sojin Park
Date: 2024-08-11 03:59:59+00:00
Message: style: Fix ESLint errors
----------------------------------------

Commit: dd97756ffb98a4a2e5bef0201c4e514a19c81d5e
Author: Sojin Park
Date: 2024-08-11 05:09:13+00:00
Message: feat(matchesProperty): Implement matchesProperty
----------------------------------------

Commit: d7fa6ceb50d31ba09a88c2cb3328585b8b328808
Author: Sojin Park
Date: 2024-08-11 05:09:55+00:00
Message: docs: Update docs for compatibility
----------------------------------------

Commit: fb05fbe3551f4e475c56d6a05e72770fd8cbfab5
Author: Sojin Park
Date: 2024-08-11 06:05:04+00:00
Message: feat(find): Implement find
----------------------------------------

Commit: 3c7e2ce5dea05f550ff6dac9085ff6b9b16a1291
Author: Sojin Park
Date: 2024-08-11 06:05:14+00:00
Message: chore: Update bundle size benchmarks
----------------------------------------

Commit: ff49feba5900f8e082f8a672ef9f0f1c6b1d7fb2
Author: Sojin Park
Date: 2024-08-11 06:06:45+00:00
Message: style: Fix ESLint errors
----------------------------------------

Commit: bcc3e924fd5fb048ddb228a4b05e959197ed14a9
Author: Dayong Lee
Date: 2024-08-11 06:21:14+00:00
Message: chore: move some of files to performance folder and change path of importing correctly (#375)

* Remove duplicated zipObjectDeep bench

* set: Move and import from compat

* cloneDeep: Move to benchmarks folder

* startCase: Move to benchmarks folder
----------------------------------------

Commit: f71ff9e511ef98cf854abc28f16a0c6ae8f727b5
Author: Sojin Park
Date: 2024-08-11 06:24:01+00:00
Message: docs: Update docs for find
----------------------------------------

Commit: 19e63dea7826abda9901e74bfcb334d813e3bc10
Author: Sojin Park
Date: 2024-08-11 06:31:00+00:00
Message: docs(partial, partialRight): Add docs for partial, partialRight
----------------------------------------

Commit: 4bc1fa8704fe77f02e2ed4e6fd6b7909d9c8737c
Author: Sojin Park
Date: 2024-08-11 06:32:20+00:00
Message: docs: Update docs
----------------------------------------

Commit: 8482793737e5dace17f3d74a25199c6b417be44f
Author: Sojin Park
Date: 2024-08-11 06:34:08+00:00
Message: docs: Remove broken link
----------------------------------------

Commit: c9587f38165773eff2999a090d85f7465839e22f
Author: Sojin Park
Date: 2024-08-11 12:03:13+00:00
Message: feat(findIndex): Implement findIndex
----------------------------------------

Commit: f55662d994c65469318086c811b59655386f76d0
Author: Dayong Lee
Date: 2024-08-11 12:09:39+00:00
Message: feat(indexOf): implement `indexOf` in `es-toolkit/compat` (#378)

* Implement indexOf

* Add bench

* Add compat docs
----------------------------------------

Commit: 2d96265951562d80a3d148895519c4cdcb23bb1f
Author: Sojin Park
Date: 2024-08-11 12:10:18+00:00
Message: docs: Add missing docs for find & findIndex
----------------------------------------

Commit: 418183b0aa167aabaca95fa2221deac68fb728dd
Author: Sojin Park
Date: 2024-08-11 12:20:11+00:00
Message: docs: Add docs for indexOf
----------------------------------------

Commit: f99a6b26c3297647d0f3e8785c905620e72f6346
Author: Sojin Park
Date: 2024-08-11 12:38:32+00:00
Message: docs: Add docs for errors
----------------------------------------

Commit: da091c49d8988ee0ec2544c7cc7f38c39419785b
Author: Sojin Park
Date: 2024-08-11 12:40:34+00:00
Message: docs: Add missing backticks in signature for has
----------------------------------------

Commit: c639dd7209977140cf184d281d1ebdf31fb734df
Author: Sojin Park
Date: 2024-08-11 12:44:40+00:00
Message: docs: Update compatibility for findIndex
----------------------------------------

Commit: b11fd69e17db3b396ce443f1bbf704439d7da1f2
Author: uussong
Date: 2024-08-15 02:06:47+00:00
Message: feat(isString): Add isString function (#379)

* feat(isString): Add isString function

* test(isString): Add isString tests

* docs(isString): Add and improve docs for isString

* Update src/compat/predicate/isString.spec.ts

* Update src/compat/predicate/isString.spec.ts

* Update src/predicate/index.ts

---------

Co-authored-by: Sojin Park <raon0211@gmail.com>
----------------------------------------

Commit: 8310cd9d5d0898b9cb53761c25fb6a7097d1ab5f
Author: Sojin Park
Date: 2024-08-15 02:09:23+00:00
Message: docs(isString): Add docs for isString for zh_hans
----------------------------------------

Commit: 21a0ceabc51d1372b6db29c3046f9cbb6adedb85
Author: Dayong Lee
Date: 2024-08-15 02:15:35+00:00
Message: feat(sortBy): implement `es-toolkit/sortBy` (#381)

* Implement sortBy

* Add bench

* Extends template from object

* Fix example

* Add mixed iteratees

* Add docs and fix examples

* Fix jsdoc

* make prettier

* Update src/array/sortBy.ts

---------

Co-authored-by: Sojin Park <raon0211@gmail.com>
----------------------------------------

Commit: d4037c755c5498b0b646e3738eb96d7944295742
Author: Sojin Park
Date: 2024-08-15 02:33:40+00:00
Message: feat(sortBy): Refactor sortBy and improve docs
----------------------------------------

Commit: 321a1bf635903cc69d4754c8be6e912327be2d7e
Author: Dayong Lee
Date: 2024-08-15 11:58:26+00:00
Message: refactor(sortBy, orderBy): use same compareValues function in internal and fix type (#382)

* Refact compareValues

* Fix type error

* Fix docs
----------------------------------------

Commit: 50b48669092ad4f041e71049d700a27297f1302f
Author: Péter Kovács
Date: 2024-08-15 11:58:58+00:00
Message: feat(padEnd): add padEnd (#380)
----------------------------------------

Commit: 71a710b76281e0a73dea03151e29d75ef15010eb
Author: D-Sketon
Date: 2024-08-15 12:01:13+00:00
Message: feat(rest): implement rest (#374)

* feat(rest): implement rest

* fix: compat
----------------------------------------

Commit: 98af4a3a114c5e0db118db96ac352e3ad5b93341
Author: Sojin Park
Date: 2024-08-15 12:19:59+00:00
Message: docs(rest): Improve docs for rest
----------------------------------------

Commit: 82010d8cbba399f16429a7ad4989a5d3089ab12c
Author: Sojin Park
Date: 2024-08-15 12:21:39+00:00
Message: docs: Update compatibility
----------------------------------------

Commit: 3cb5c804e135c71ee291c972b6559e59c50e3660
Author: novo
Date: 2024-08-15 12:24:20+00:00
Message: feat(memoize): Add memoize (#208)

* feat: memoize

* test: memoize

* chore: add benchmark of memoize

* docs: add docs

* feat: add overloads to memoize

* feat: MemoizeOption

---------

Co-authored-by: Sojin Park <raon0211@toss.im>
----------------------------------------

Commit: b1ac921779985f39169906606b0e1977d2c08294
Author: Sojin Park
Date: 2024-08-15 14:10:15+00:00
Message: feat(memoize): Update behavior or memoize to get a custom getCacheKey and only accept unary or zero-argument function
----------------------------------------

Commit: 9d68f5679d46689d612fefdea2d8e7b32b36d570
Author: Sojin Park
Date: 2024-08-15 14:13:17+00:00
Message: docs(padEnd): Add docs for padEnd
----------------------------------------

Commit: aef394d8c4b4a8eb71002dd8c2897f726cefc510
Author: Sojin Park
Date: 2024-08-15 14:14:36+00:00
Message: fix(memoize): Fix type export for MemoizeCache
----------------------------------------

Commit: 010ec0496e7ce27f280032904545a5e3340da591
Author: Sojin Park
Date: 2024-08-15 14:18:39+00:00
Message: v1.16.0
----------------------------------------


PULL REQUESTS
--------------------------------------------------------------------------------

PR #208: feat(memoize): add memoize
Author: de-novo
Merged at: 2024-08-15 12:24:20+00:00
URL: https://github.com/toss/es-toolkit/pull/208
Description:
# Summary
This PR addresses the goal outlined in Issue #91 by implementing the memoize function to cache the results of function calls based on the arguments provided. Additionally, function overloads have been added to enhance flexibility and support various use cases.

# Benchmark

<img width="1051" alt="스크린샷 2024-07-15 오후 3 04 25" src="https://github.com/user-attachments/assets/61fb0f3a-e5ae-44e1-a519-fef2c49acb65">

# Changes Made

### Functionality:
- Implemented the memoize function to cache function results.

### Tests:
  - Added comprehensive test cases to ensure the correctness of the memoization functionality with different overloads.
  - Verified the correct functioning of memoize with default cache, custom resolver, and custom cache.
### Documentation:
  - Updated documentation with examples demonstrating the usage of memoize with different combinations of resolvers and caches.




----------------------------------------

PR #374: feat(rest): implement rest
Author: D-Sketon
Merged at: 2024-08-15 12:01:13+00:00
URL: https://github.com/toss/es-toolkit/pull/374
Description:
benchmark
![image](https://github.com/user-attachments/assets/4ea11aee-fc2a-4e9e-890b-cfd861203c06)
----------------------------------------

PR #380: feat(compat): add `padEnd`
Author: pkovzz
Merged at: 2024-08-15 11:58:58+00:00
URL: https://github.com/toss/es-toolkit/pull/380
Description:
### Solution

We can use the native [padEnd](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd) API instead of a custom solution.

<img width="883" alt="Screenshot 2024-08-11 at 18 17 00" src="https://github.com/user-attachments/assets/a513d532-642f-4019-9d58-cbadbd13d02c">

Resolves #332
----------------------------------------

PR #382: refactor(sortBy, orderBy): use same compareValues function in internal and fix type
Author: dayongkr
Merged at: 2024-08-15 11:58:27+00:00
URL: https://github.com/toss/es-toolkit/pull/382
Description:
## Description

I think that `orderBy` function also has to use `_internal/compareValues` function.

So I add a `order` argument in `_internal/compareValues` function.

## ⚠️ And I fix type of a criteria argument, it forgot parentheses.
----------------------------------------

PR #381: feat(sortBy): implement `es-toolkit/sortBy`
Author: dayongkr
Merged at: 2024-08-15 02:15:35+00:00
URL: https://github.com/toss/es-toolkit/pull/381
Description:
## Description

I implement a `es-toolkit/sortBy` that sorts an array of objects based on the given iteratees or keys in ascending order.

This function have a custom key function feature differ from `es-toolkit/orderBy`.

> This function is based by `lodash/sortBy`, but more simple.

### Benchmarks

<img width="731" alt="Screenshot 2024-08-12 at 10 43 26 AM" src="https://github.com/user-attachments/assets/9672431e-162a-435a-89a2-4a3ae87527f4">

close #85 
----------------------------------------

PR #379: feat(isString): Add isString function
Author: uussong
Merged at: 2024-08-15 02:06:48+00:00
URL: https://github.com/toss/es-toolkit/pull/379
Description:
Add isString function

![image](https://github.com/user-attachments/assets/7c3d1088-de38-4ce8-af75-fd2548898edf)

close #300 
----------------------------------------

PR #378: feat(indexOf): implement `indexOf` in `es-toolkit/compat`
Author: dayongkr
Merged at: 2024-08-11 12:09:39+00:00
URL: https://github.com/toss/es-toolkit/pull/378
Description:
## Description

I implement this function based on `Array.prototype.indexOf`.

Its behavior is  already similar with `lodash/indexof`.

> https://tc39.es/ecma262/#sec-array.prototype.indexof

But it can't find a `NaN` searchElement, so I add codes handling this case.

### Benchmark

![Screenshot 2024-08-11 at 5 15 02 PM](https://github.com/user-attachments/assets/78dd029e-e814-4594-9252-d93a539f3b50)

close #377 
----------------------------------------

PR #375: chore: move some of files to performance folder and change path of importing correctly
Author: dayongkr
Merged at: 2024-08-11 06:21:14+00:00
URL: https://github.com/toss/es-toolkit/pull/375
Description:
## Description

- Some of files are moved to performance folder.
- A `set` function is only in `es-toolkit/compat`, so I changed a path of importing to `es-toolkit/compat`.
- `benchmarks/zeepObjectDeep.bench.ts` file is removed, because this file are also in `benchmarks/performance` folder.
----------------------------------------

PR #368: feat(partial, partialRight): Implement partial/partialRight
Author: D-Sketon
Merged at: 2024-08-11 01:53:02+00:00
URL: https://github.com/toss/es-toolkit/pull/368
Description:
benchmark
![image](https://github.com/user-attachments/assets/27f97cbb-7c6b-4d0b-8196-27b11056236a)

because of https://github.com/toss/es-toolkit/pull/187, the test about curry was not implemented, so I did not move it into compat
----------------------------------------

PR #373: chore(toMerged): reexport toMerged function using a Barrel file
Author: dayongkr
Merged at: 2024-08-11 01:45:05+00:00
URL: https://github.com/toss/es-toolkit/pull/373
Description:
## Description

I export a `toMerged` function  in Barrel file.

close #372
----------------------------------------


FILE CHANGES
--------------------------------------------------------------------------------

File: CHANGELOG.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # es-toolkit Changelog
 
+## Version v1.16.0
+
+Released on August 15th, 2024.
+
+- Added support for [memoize](https://es-toolkit.slash.page/reference/function/memoize.html), [find](https://es-toolkit.slash.page/reference/compat/array/find.html), [findIndex](https://es-toolkit.slash.page/reference/compat/array/findIndex.html), [has](https://es-toolkit.slash.page/reference/compat/object/has.html), [partial](https://es-toolkit.slash.page/reference/function/partial.html), [partialRight](https://es-toolkit.slash.page/reference/function/partialRight.html), [sortBy](https://es-toolkit.slash.page/reference/array/sortBy.html), [isString](https://es-toolkit.slash.page/reference/predicate/isString.html), [rest](https://es-toolkit.slash.page/reference/function/rest.html), [padEnd](https://es-toolkit.slash.page/reference/compat/string/padEnd.html).
+
 ## Version v1.15.1

----------------------------------------

File: benchmarks/bundle-size/camelCase.spec.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest"
-import { getBundleSize } from "./utils/getBundleSize"
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
 
 describe('camelCase bundle size', () => {
   it('lodash-es', async () => {
@@ -10,5 +10,5 @@ describe('camelCase bundle size', () => {
   it('es-toolkit', async () => {

----------------------------------------

File: benchmarks/bundle-size/chunk.spec.ts
Status: modified
Changes: +5 -5
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest"
-import { getBundleSize } from "./utils/getBundleSize"
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
 
 describe('chunk bundle size', () => {
   it('lodash-es', async () => {
@@ -10,10 +10,10 @@ describe('chunk bundle size', () => {
   it('es-toolkit', async () => {

----------------------------------------

File: benchmarks/bundle-size/difference.spec.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest"
-import { getBundleSize } from "./utils/getBundleSize"
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
 
 describe('difference bundle size', () => {
   it('lodash-es', async () => {
@@ -10,5 +10,5 @@ describe('difference bundle size', () => {
   it('es-toolkit', async () => {

----------------------------------------

File: benchmarks/bundle-size/find.spec.ts
Status: added
Changes: +14 -0
Diff:
@@ -0,0 +1,14 @@
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
+
+describe('find bundle size', () => {
+  it('lodash-es', async () => {
+    const bundleSize = await getBundleSize('lodash-es', 'find');
+    expect(bundleSize).toMatchInlineSnapshot(`17334`);
+  });
+

----------------------------------------

File: benchmarks/bundle-size/isEqual.spec.ts
Status: modified
Changes: +5 -5
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest"
-import { getBundleSize } from "./utils/getBundleSize"
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
 
 describe('isEqual bundle size', () => {
   it('lodash-es', async () => {
@@ -9,6 +9,6 @@ describe('isEqual bundle size', () => {
 

----------------------------------------

File: benchmarks/bundle-size/mapKeys.spec.ts
Status: modified
Changes: +1 -1
Diff:
@@ -14,6 +14,6 @@ describe('mapKeys bundle size', () => {
 
   it('es-toolkit/compat', async () => {
     const bundleSize = await getBundleSize('es-toolkit/compat', 'mapKeys');
-    expect(bundleSize).toMatchInlineSnapshot(`1124`);
+    expect(bundleSize).toMatchInlineSnapshot(`1248`);
   });
 });

----------------------------------------

File: benchmarks/bundle-size/mapValues.spec.ts
Status: modified
Changes: +1 -1
Diff:
@@ -14,6 +14,6 @@ describe('mapValues bundle size', () => {
 
   it('es-toolkit/compat', async () => {
     const bundleSize = await getBundleSize('es-toolkit/compat', 'mapValues');
-    expect(bundleSize).toMatchInlineSnapshot(`1124`);
+    expect(bundleSize).toMatchInlineSnapshot(`1248`);
   });
 });

----------------------------------------

File: benchmarks/bundle-size/merge.spec.ts
Status: modified
Changes: +1 -1
Diff:
@@ -14,6 +14,6 @@ describe('merge bundle size', () => {
 
   it('es-toolkit/compat', async () => {
     const bundleSize = await getBundleSize('es-toolkit/compat', 'merge');
-    expect(bundleSize).toMatchInlineSnapshot(`4381`);
+    expect(bundleSize).toMatchInlineSnapshot(`4338`);
   });
 });

----------------------------------------

File: benchmarks/bundle-size/mergeWith.spec.ts
Status: modified
Changes: +1 -1
Diff:
@@ -14,6 +14,6 @@ describe('mergeWith bundle size', () => {
 
   it('es-toolkit/compat', async () => {
     const bundleSize = await getBundleSize('es-toolkit/compat', 'mergeWith');
-    expect(bundleSize).toMatchInlineSnapshot(`4329`);
+    expect(bundleSize).toMatchInlineSnapshot(`4286`);
   });
 });

----------------------------------------

File: benchmarks/bundle-size/utils/getBundleSize.ts
Status: modified
Changes: +1 -1
Diff:
@@ -17,4 +17,4 @@ export async function getBundleSize(pkg: 'lodash-es' | 'es-toolkit' | 'es-toolki
   });
 
   return Buffer.from(bundled.outputFiles![0].contents).byteLength;
-}
\ No newline at end of file
+}

----------------------------------------

File: benchmarks/bundle-size/zipObjectDeep.spec.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest"
-import { getBundleSize } from "./utils/getBundleSize"
+import { describe, expect, it } from 'vitest';
+import { getBundleSize } from './utils/getBundleSize';
 
 describe('zipObjectDeep bundle size', () => {
   it('lodash-es', async () => {
@@ -10,5 +10,5 @@ describe('zipObjectDeep bundle size', () => {
   it('es-toolkit/compat', async () => {

----------------------------------------

File: benchmarks/performance/cloneDeep.bench.ts
Status: renamed
Changes: +0 -0

----------------------------------------

File: benchmarks/performance/find.bench.ts
Status: added
Changes: +24 -0
Diff:
@@ -0,0 +1,24 @@
+import { bench, describe } from 'vitest';
+import { find as findToolkit } from 'es-toolkit/compat';
+import { find as findLodash } from 'lodash';
+
+const items = [
+  { id: 1, name: 'Alice' },
+  { id: 2, name: 'Bob' },
+];
+

----------------------------------------

File: benchmarks/performance/findIndex.bench.ts
Status: added
Changes: +24 -0
Diff:
@@ -0,0 +1,24 @@
+import { bench, describe } from 'vitest';
+import { findIndex as findIndexToolkit } from 'es-toolkit/compat';
+import { findIndex as findIndexLodash } from 'lodash';
+
+const items = [
+  { id: 1, name: 'Alice' },
+  { id: 2, name: 'Bob' },
+];
+

----------------------------------------

File: benchmarks/performance/get.bench.ts
Status: modified
Changes: +11 -11
Diff:
@@ -1,23 +1,23 @@
 import { bench, describe } from 'vitest';
-import { get as getToolkit } from 'es-toolkit';
+import { get as getToolkit } from 'es-toolkit/compat';
 import { get as getLodash } from 'lodash';
 
 describe('get with string', () => {
   bench('es-toolkit/get', () => {
-    getToolkit({ a: { b: 3 } }, 'a.b')
-  })
+    getToolkit({ a: { b: 3 } }, 'a.b');
+  });

----------------------------------------

File: benchmarks/performance/has.bench.ts
Status: added
Changes: +23 -0
Diff:
@@ -0,0 +1,23 @@
+import { bench, describe } from 'vitest';
+import { has as hasToolkit } from 'es-toolkit/compat';
+import { has as hasLodash } from 'lodash';
+
+describe('has with string', () => {
+  bench('es-toolkit/has', () => {
+    hasToolkit({ a: { b: 3 } }, 'a.b');
+  });
+

----------------------------------------

File: benchmarks/performance/indexOf.bench.ts
Status: added
Changes: +23 -0
Diff:
@@ -0,0 +1,23 @@
+import { bench, describe } from 'vitest';
+import { indexOf as indexOfToolkitComapt } from 'es-toolkit/compat';
+import { indexOf as indexOfLodash } from 'lodash';
+
+describe('indexOf', () => {
+  const array = [1, 2, 3, 4, NaN, '1', '2', '3', '4', 'NaN'];
+
+  bench('es-toolkit/compat/indexOf', () => {
+    indexOfToolkitComapt(array, 3);

----------------------------------------

File: benchmarks/performance/isEqual.bench.ts
Status: modified
Changes: +1 -4
Diff:
@@ -28,7 +28,6 @@ import { isEqual as isEqualLodash } from 'lodash';
 //   });
 // });
 
-
 // describe('isEqual dates', () => {
 //   bench('es-toolkit/isEqual', () => {
 //     isEqualToolkit(new Date('2020-01-01'), new Date('2020-01-01'));
@@ -65,7 +64,7 @@ describe('isEqual objects', () => {
     isEqualLodash({ a: 1, b: { c: 2 } }, { a: 1, b: { c: 3 } });

----------------------------------------

File: benchmarks/performance/isMatch.bench.ts
Status: modified
Changes: +2 -2
Diff:
@@ -4,9 +4,9 @@ import { isMatch as isMatchLodash } from 'lodash';
 
 describe('isMatch', () => {
   bench('es-toolkit/isMatch', () => {
-    isMatchToolkit({ a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 }, { a: { b: { c: 1 } } })
+    isMatchToolkit({ a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 }, { a: { b: { c: 1 } } });
   });
   bench('lodash/isMatch', () => {
-    isMatchLodash({ a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 }, { a: { b: { c: 1 } } })
+    isMatchLodash({ a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 }, { a: { b: { c: 1 } } });

----------------------------------------

File: benchmarks/performance/isString.bench.ts
Status: added
Changes: +19 -0
Diff:
@@ -0,0 +1,19 @@
+import { bench, describe } from 'vitest';
+import { isString as isStringToolkit } from 'es-toolkit';
+import { isString as isStringLodash } from 'lodash';
+
+describe('isString', () => {
+  bench('es-toolkit/isString', () => {
+    isStringToolkit('');
+    isStringToolkit(true);
+    isStringToolkit(undefined);

----------------------------------------

File: benchmarks/performance/matches.bench.ts
Status: modified
Changes: +1 -1
Diff:
@@ -4,7 +4,7 @@ import { matches as matchesLodash } from 'lodash';
 
 describe('matches', () => {
   bench('es-toolkit/matches', () => {
-    const isMatch = matchesToolkit({ a: { b: { c: 1 } } })
+    const isMatch = matchesToolkit({ a: { b: { c: 1 } } });
     isMatch({ a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 });
   });
   bench('lodash/matches', () => {

----------------------------------------

File: benchmarks/performance/memoize.bench.ts
Status: added
Changes: +26 -0
Diff:
@@ -0,0 +1,26 @@
+import { bench, describe } from 'vitest';
+import { memoize } from 'es-toolkit';
+import { memoize as lodashMemoize } from 'lodash';
+
+describe('memoize', () => {
+  const object = { a: 1, b: 2, c: 3 };
+  const other = { d: 4, e: 5, f: 6 };
+  const values = (args: object) => {
+    return Object.values(args);

----------------------------------------

File: benchmarks/performance/padEnd.bench.ts
Status: added
Changes: +15 -0
Diff:
@@ -0,0 +1,15 @@
+import { bench, describe } from 'vitest';
+import { padEnd as padStartToolkit } from 'es-toolkit/compat';
+import { padEnd as padStartLodash } from 'lodash';
+
+describe('padEnd', () => {
+  bench('es-toolkit/padEnd', () => {
+    const str = 'abc';
+    padStartToolkit(str, 6, '_-');
+  });

----------------------------------------

File: benchmarks/performance/padStart.bench.ts
Status: modified
Changes: +1 -1
Diff:
@@ -1,5 +1,5 @@
 import { bench, describe } from 'vitest';
-import { padStart as padStartToolkit } from 'es-toolkit';
+import { padStart as padStartToolkit } from 'es-toolkit/compat';
 import { padStart as padStartLodash } from 'lodash';
 
 describe('padStart', () => {

----------------------------------------

File: benchmarks/performance/partial.bench.ts
Status: added
Changes: +27 -0
Diff:
@@ -0,0 +1,27 @@
+import { bench, describe } from 'vitest';
+import { partial as partialToolkit } from 'es-toolkit';
+import { partial as partialLodash } from 'lodash';
+
+const fn = function () {
+  // eslint-disable-next-line prefer-rest-params
+  return Array.from(arguments);
+};
+

----------------------------------------

File: benchmarks/performance/partialRight.bench.ts
Status: added
Changes: +27 -0
Diff:
@@ -0,0 +1,27 @@
+import { bench, describe } from 'vitest';
+import { partialRight as partialRightToolkit } from 'es-toolkit';
+import { partialRight as partialRightLodash } from 'lodash';
+
+const fn = function () {
+  // eslint-disable-next-line prefer-rest-params
+  return Array.from(arguments);
+};
+

----------------------------------------

File: benchmarks/performance/property.bench.ts
Status: modified
Changes: +3 -3
Diff:
@@ -6,10 +6,10 @@ describe('property', () => {
   bench('es-toolkit/property', () => {
     const getValue = propertyToolkit('a.b');
     getValue({ 'a.b': 1, a: { b: 1 } });
-  })
+  });
 
   bench('lodash/property', () => {
     const getValue = propertyLodash('a.b');
     getValue({ 'a.b': 1, a: { b: 1 } });

----------------------------------------

File: benchmarks/performance/rest.bench.ts
Status: added
Changes: +24 -0
Diff:
@@ -0,0 +1,24 @@
+import { bench, describe } from 'vitest';
+import { rest as restToolkit } from 'es-toolkit';
+import { rest as restCompat } from 'es-toolkit/compat';
+import { rest as restLodash } from 'lodash';
+
+describe('rest', () => {
+  // eslint-disable-next-line @typescript-eslint/no-unused-vars
+  function fn(_a: unknown, _b: unknown, _c: unknown) {
+    // eslint-disable-next-line prefer-rest-params

----------------------------------------

File: benchmarks/performance/set.bench.ts
Status: renamed
Changes: +3 -3
Diff:
@@ -1,13 +1,13 @@
 import { describe, bench } from 'vitest';
-import { set } from 'es-toolkit';
+import { set as setToolkitCompat } from 'es-toolkit/compat';
 import { set as lodashSet } from 'lodash';
 
 describe('set', () => {
   bench('es-toolkit/set-1', () => {
-    set({}, 'a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z', 1);
+    setToolkitCompat({}, 'a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z', 1);

----------------------------------------

File: benchmarks/performance/sortBy.bench.ts
Status: added
Changes: +22 -0
Diff:
@@ -0,0 +1,22 @@
+import { bench, describe } from 'vitest';
+import { sortBy as sortByToolkit } from 'es-toolkit';
+import { sortBy as sortByLodash } from 'lodash';
+
+describe('sortBy', () => {
+  const users = [
+    { user: 'fred', age: 48, nested: { user: 'fred' } },
+    { user: 'barney', age: 34, nested: { user: 'barney' } },
+    { user: 'fred', age: 40, nested: { user: 'fred' } },

----------------------------------------

File: benchmarks/performance/startCase.bench.ts
Status: renamed
Changes: +0 -0

----------------------------------------

File: benchmarks/zipObjectDeep.bench.ts
Status: removed
Changes: +0 -13
Diff:
@@ -1,13 +0,0 @@
-import { bench, describe } from 'vitest';
-import { zipObjectDeep as zipObjectDeepToolkit } from 'es-toolkit';
-import { zipObjectDeep as zipObjectDeepLodash } from 'lodash';
-
-describe('zipObjectDeep', () => {
-  bench('es-toolkit/zipObject', () => {
-    zipObjectDeepToolkit(['a.b[0].c', 'a.b[1].d'], [1, 2]);
-  });
-

----------------------------------------

File: docs/.vitepress/en.mts
Status: modified
Changes: +18 -0
Diff:
@@ -61,11 +61,14 @@ function sidebar(): DefaultTheme.Sidebar {
             { text: 'dropRightWhile', link: '/reference/array/dropRightWhile' },
             { text: 'fill', link: '/reference/array/fill' },
             { text: 'toFilled', link: '/reference/array/toFilled' },
+            { text: 'find (compat)', link: '/reference/compat/array/find' },
+            { text: 'findIndex (compat)', link: '/reference/compat/array/findIndex' },
             { text: 'flatMap', link: '/reference/array/flatMap' },
             { text: 'flatten', link: '/reference/array/flatten' },
             { text: 'flattenDeep', link: '/reference/array/flattenDeep' },
             { text: 'forEachRight', link: '/reference/array/forEachRight' },
             { text: 'groupBy', link: '/reference/array/groupBy' },
+            { text: 'indexOf (compat)', link: '/reference/compat/array/indexOf' },
             { text: 'intersection', link: '/reference/array/intersection' },
             { text: 'intersectionBy', link: '/reference/array/intersectionBy' },
             {
@@ -84,6 +87,7 @@ function sidebar(): DefaultTheme.Sidebar {
             { text: 'sampleSize', link: '/reference/array/sampleSize' },
             { text: 'shuffle', link: '/reference/array/shuffle' },
             { text: 'size (compat)', link: '/reference/compat/array/size' },
+            { text: 'sortBy', link: '/reference/array/sortBy' },
             { text: 'take', link: '/reference/array/take' },
             { text: 'takeWhile', link: '/reference/array/takeWhile' },
             { text: 'takeRight', link: '/reference/array/takeRight' },

----------------------------------------

File: docs/.vitepress/ko.mts
Status: modified
Changes: +22 -3
Diff:
@@ -66,11 +66,14 @@ function sidebar(): DefaultTheme.Sidebar {
             },
             { text: 'fill', link: '/ko/reference/array/fill' },
             { text: 'toFilled', link: '/ko/reference/array/toFilled' },
+            { text: 'find (호환성)', link: '/ko/reference/compat/array/find' },
+            { text: 'findIndex (호환성)', link: '/ko/reference/compat/array/findIndex' },
             { text: 'flatMap', link: '/ko/reference/array/flatMap' },
             { text: 'flatten', link: '/ko/reference/array/flatten' },
             { text: 'flattenDeep', link: '/ko/reference/array/flattenDeep' },
             { text: 'forEachRight', link: '/ko/reference/array/forEachRight' },
             { text: 'groupBy', link: '/ko/reference/array/groupBy' },
+            { text: 'indexOf (호환성)', link: '/ko/reference/compat/array/indexOf' },
             { text: 'intersection', link: '/ko/reference/array/intersection' },
             {
               text: 'intersectionBy',
@@ -92,6 +95,7 @@ function sidebar(): DefaultTheme.Sidebar {
             { text: 'sampleSize', link: '/ko/reference/array/sampleSize' },
             { text: 'shuffle', link: '/ko/reference/array/shuffle' },
             { text: 'size (호환성)', link: '/ko/reference/compat/array/size' },
+            { text: 'sortBy', link: '/ko/reference/array/sortBy' },
             { text: 'take', link: '/ko/reference/array/take' },
             { text: 'takeWhile', link: '/ko/reference/array/takeWhile' },
             { text: 'takeRight', link: '/ko/reference/array/takeRight' },
@@ -131,9 +135,13 @@ function sidebar(): DefaultTheme.Sidebar {

----------------------------------------

File: docs/.vitepress/zh_hans.mts
Status: modified
Changes: +19 -0
Diff:
@@ -60,11 +60,14 @@ function sidebar(): DefaultTheme.Sidebar {
             { text: 'dropRightWhile', link: '/zh_hans/reference/array/dropRightWhile' },
             { text: 'fill', link: '/zh_hans/reference/array/fill' },
             { text: 'toFilled', link: '/zh_hans/reference/array/toFilled' },
+            { text: 'find (兼容性)', link: '/zh_hans/reference/compat/array/find' },
+            { text: 'findIndex (兼容性)', link: '/zh_hans/reference/compat/array/findIndex' },
             { text: 'flatMap', link: '/zh_hans/reference/array/flatMap' },
             { text: 'flatten', link: '/zh_hans/reference/array/flatten' },
             { text: 'flattenDeep', link: '/zh_hans/reference/array/flattenDeep' },
             { text: 'forEachRight', link: '/zh_hans/reference/array/forEachRight' },
             { text: 'groupBy', link: '/zh_hans/reference/array/groupBy' },
+            { text: 'indexOf (兼容性)', link: '/zh_hans/reference/compat/array/indexOf' },
             { text: 'intersection', link: '/zh_hans/reference/array/intersection' },
             { text: 'intersectionBy', link: '/zh_hans/reference/array/intersectionBy' },
             { text: 'intersectionWith', link: '/zh_hans/reference/array/intersectionWith' },
@@ -80,6 +83,7 @@ function sidebar(): DefaultTheme.Sidebar {
             { text: 'sampleSize', link: '/zh_hans/reference/array/sampleSize' },
             { text: 'shuffle', link: '/zh_hans/reference/array/shuffle' },
             { text: 'size (兼容性)', link: '/zh_hans/reference/compat/array/size' },
+            { text: 'sortBy', link: '/zh_hans/reference/array/sortBy' },
             { text: 'take', link: '/zh_hans/reference/array/take' },
             { text: 'takeWhile', link: '/zh_hans/reference/array/takeWhile' },
             { text: 'takeRight', link: '/zh_hans/reference/array/takeRight' },
@@ -116,9 +120,13 @@ function sidebar(): DefaultTheme.Sidebar {

----------------------------------------

File: docs/bundle-size.md
Status: modified
Changes: +1 -2
Diff:
@@ -27,11 +27,10 @@ This makes es-toolkit the most efficient in terms of bundle size, with some util
 Our bundle size is measured using [esbuild 0.23.0](https://esbuild.github.io), by analyzing the size of code like the following:
 
 ```tsx
-import { chunk } from 'es-toolkit'; 
+import { chunk } from 'es-toolkit';
 // or import { chunk } from 'lodash-es';
 
 console.log(chunk);
 ```

----------------------------------------

File: docs/compatibility.md
Status: modified
Changes: +12 -12
Diff:
@@ -62,14 +62,14 @@ Even if a feature is marked "in review," it might already be under review to ens
 | [dropRightWhile](https://lodash.com/docs/4.17.15#dropRightWhile)       | 📝                    |
 | [dropWhile](https://lodash.com/docs/4.17.15#dropWhile)                 | 📝                    |
 | [fill](https://lodash.com/docs/4.17.15#fill)                           | ✅                    |
-| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ❌                    |
+| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ✅                    |
 | [findLastIndex](https://lodash.com/docs/4.17.15#findIndex)             | ❌                    |
 | [flatten](https://lodash.com/docs/4.17.15#flatten)                     | ✅                    |
 | [flattenDeep](https://lodash.com/docs/4.17.15#flattenDeep)             | ✅                    |
 | [flattenDepth](https://lodash.com/docs/4.17.15#flattenDepth)           | ✅                    |
 | [fromPairs](https://lodash.com/docs/4.17.15#fromPairs)                 | ❌                    |
 | [head](https://lodash.com/docs/4.17.15#head)                           | ✅                    |
-| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ❌                    |
+| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ✅                    |
 | [initial](https://lodash.com/docs/4.17.15#initial)                     | ✅                    |
 | [intersection](https://lodash.com/docs/4.17.15#intersection)           | 📝                    |
 | [intersectionBy](https://lodash.com/docs/4.17.15#intersectionBy)       | 📝                    |
@@ -157,10 +157,10 @@ Even if a feature is marked "in review," it might already be under review to ens
 
 | Function Name                                                | Implementation Status |
 | ------------------------------------------------------------ | --------------------- |
-| [after](https://lodash.com/docs/4.17.15#after)               | ❌                    |
-| [ary](https://lodash.com/docs/4.17.15#ary)                   | ❌                    |
+| [after](https://lodash.com/docs/4.17.15#after)               | 📝                    |
+| [ary](https://lodash.com/docs/4.17.15#ary)                   | 📝                    |

----------------------------------------

File: docs/ko/bundle-size.md
Status: modified
Changes: +1 -2
Diff:
@@ -22,13 +22,12 @@ es-toolkit은 현대적인 구현을 가지고 있기 때문에, 다른 라이
 | [pick](./reference/object/pick.md)            | 657 bytes        | 3860 bytes        | -83.0% |
 | [zip](./reference/array/zip.md)               | 797 bytes        | 1790 bytes        | -55.5% |
 
-
 ## 번들 사이즈 측정 방법
 
 [esbuild 0.23.0](https://esbuild.github.io)로 번들 사이즈를 측정하고 있어요. 아래와 같은 코드를 사용해요.
 
 ```tsx

----------------------------------------

File: docs/ko/compatibility.md
Status: modified
Changes: +12 -12
Diff:
@@ -63,14 +63,14 @@ chunk([1, 2, 3, 4], 0);
 | [dropRightWhile](https://lodash.com/docs/4.17.15#dropRightWhile)       | 📝            |
 | [dropWhile](https://lodash.com/docs/4.17.15#dropWhile)                 | 📝            |
 | [fill](https://lodash.com/docs/4.17.15#fill)                           | ✅            |
-| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ❌            |
+| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ✅            |
 | [findLastIndex](https://lodash.com/docs/4.17.15#findIndex)             | ❌            |
 | [flatten](https://lodash.com/docs/4.17.15#flatten)                     | ✅            |
 | [flattenDeep](https://lodash.com/docs/4.17.15#flattenDeep)             | ✅            |
 | [flattenDepth](https://lodash.com/docs/4.17.15#flattenDepth)           | ✅            |
 | [fromPairs](https://lodash.com/docs/4.17.15#fromPairs)                 | ❌            |
 | [head](https://lodash.com/docs/4.17.15#head)                           | 📝            |
-| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ❌            |
+| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ✅            |
 | [initial](https://lodash.com/docs/4.17.15#initial)                     | ✅            |
 | [intersection](https://lodash.com/docs/4.17.15#intersection)           | 📝            |
 | [intersectionBy](https://lodash.com/docs/4.17.15#intersectionBy)       | 📝            |
@@ -158,10 +158,10 @@ chunk([1, 2, 3, 4], 0);
 
 | 함수 이름                                                    | 구현 상태 |
 | ------------------------------------------------------------ | --------- |
-| [after](https://lodash.com/docs/4.17.15#after)               | ❌        |
-| [ary](https://lodash.com/docs/4.17.15#ary)                   | ❌        |
+| [after](https://lodash.com/docs/4.17.15#after)               | 📝        |
+| [ary](https://lodash.com/docs/4.17.15#ary)                   | 📝        |

----------------------------------------

File: docs/ko/reference/array/difference.md
Status: modified
Changes: +1 -1
Diff:
@@ -37,4 +37,4 @@ const result = difference(array1, array2);
 |            | [번들 사이즈](../../bundle-size.md) | [성능](../../performance.md) |
 | ---------- | ----------------------------------- | ---------------------------- |
 | es-toolkit | 90 바이트 (92.4% 작음)              | 9,317,227 회 (85% 빠름)      |
-| lodash-es  | 7,958 바이트                        | 5,030,861 회                 |
\ No newline at end of file
+| lodash-es  | 7,958 바이트                        | 5,030,861 회                 |

----------------------------------------

File: docs/ko/reference/array/flatMap.md
Status: modified
Changes: +1 -5
Diff:
@@ -7,11 +7,7 @@ JavaScript 언어에 포함된 [Array#flat](https://developer.mozilla.org/en-US/
 ## 인터페이스
 
 ```typescript
-function flatMap<T, U, D extends number = 1>(
-  arr: T[],
-  iteratee: (item: T) => U,
-  depth?: D
-): Array<FlatArray<U[], D>>;
+function flatMap<T, U, D extends number = 1>(arr: T[], iteratee: (item: T) => U, depth?: D): Array<FlatArray<U[], D>>;

----------------------------------------

File: docs/ko/reference/array/forEachRight.md
Status: modified
Changes: +7 -7
Diff:
@@ -11,10 +11,10 @@ function forEachRight<T>(arr: T[], callback: (value: T, index: number, arr: T[])
 ### 파라미터
 
 - `arr`: (`T[]`): 순회할 배열.
-- `callback`: (`(value: T, index: number, arr: T[])`): 각 반복마다 호출될 함수예요. 
-    - `value`: 배열에서 처리 중인 현재 요소.
-    - `index`: 배열에서 처리 중인 현재 요소의 인덱스.
-    - `arr`: `forEachRight` 함수가 호출된 배열.
+- `callback`: (`(value: T, index: number, arr: T[])`): 각 반복마다 호출될 함수예요.
+  - `value`: 배열에서 처리 중인 현재 요소.

----------------------------------------

File: docs/ko/reference/array/sortBy.md
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+# sortBy
+
+주어진 조건 `criteria`에 따라서 객체로 이루어진 배열을 정렬해요.
+
+- 조건이 프로퍼티 이름이면, 해당하는 프로퍼티 값에 따라 정렬해요.
+- 조건이 함수이면, 함수가 반환하는 값에 따라 정렬해요.
+
+배열은 오름차순으로 정렬돼요. 조건에 따라 두 요소의 값이 같으면, 다음 조건으로 정렬해요.
+
+## 인터페이스
+
+```typescript
+function sortBy<T extends object>(arr: T[], criteria: Array<((item: T) => unknown) | keyof T>): T[];
+```

----------------------------------------

File: docs/ko/reference/array/without.md
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 # without
 
-배열에서 주어진 값을 제거한 새로운 배열을 만들어요. 
+배열에서 주어진 값을 제거한 새로운 배열을 만들어요.
 
 값이 같은지는 [SameValueZero](https://tc39.es/ecma262/multipage/abstract-operations.html#sec-samevaluezero) 기준으로 비교하기 때문에, `NaN`과도 사용할 수 있어요.
 

----------------------------------------

File: docs/ko/reference/array/zipObject.md
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 # zipObject
 
-두 배열을 하나의 객체로 결합해요. 첫 번째 배열은 프로퍼티 이름을 나타내고, 두 번째 배열은 값을 나타내요. 
+두 배열을 하나의 객체로 결합해요. 첫 번째 배열은 프로퍼티 이름을 나타내고, 두 번째 배열은 값을 나타내요.
 
 프로퍼티 이름을 나타내는 배열이 값을 나타내는 배열보다 길면, 값들은 `undefined`로 채워져요.
 

----------------------------------------

File: docs/ko/reference/compat/array/concat.md
Status: modified
Changes: +5 -3
Diff:
@@ -1,15 +1,17 @@
 # concat
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/array/find.md
Status: added
Changes: +119 -0
Diff:
@@ -0,0 +1,119 @@
+# find
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+배열이나 객체에서 조건에 맞는 첫 번째 값을 찾아요.
+
+조건은 여러 방법들로 명시할 수 있어요.
+
+- **검사 함수**: 각각의 요소에 대해서 검사하는 함수를 실행해요. 처음으로 `true`를 반환하게 하는 값이 선택돼요.
+- **부분 객체**: 주어진 객체와 부분적으로 일치하는 첫 번째 요소가 선택돼요.
+- **프로퍼티-값 쌍**: 해당 프로퍼티에 대해서 값이 일치하는 첫 번째 요소가 선택돼요.
+- **프로퍼티 이름**: 해당 프로퍼티에 대해서 참으로 평가되는 값을 가지는 첫 번째 요소가 선택돼요.
+
+## 인터페이스
+
+```typescript
+function find<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): T | undefined;
+function find<T>(arr: T[], doesMatch: Partial<T>): T | undefined;
+function find<T>(arr: T[], doesMatch: [keyof T, unknown]): T | undefined;
+function find<T>(arr: T[], doesMatch: string): T | undefined;
+
+function find<T extends Record<string, unknown>>(
+  object: T,
+  doesMatch: (item: T[keyof T], index: number, object: T) => unknown
+): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T, unknown]): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: string): T | undefined;
+```
+
+### 파라미터
+
+- `arr` (`T[]`) or `object` (`T`): 검색할 배열이나 객체.
+
+- `doesMatch`:

----------------------------------------

File: docs/ko/reference/compat/array/findIndex.md
Status: added
Changes: +75 -0
Diff:
@@ -0,0 +1,75 @@
+# findIndex
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+배열에서 조건에 맞는 첫 번째 값의 인덱스를 반환해요.
+
+조건은 여러 방법들로 명시할 수 있어요.
+
+- **검사 함수**: 각각의 요소에 대해서 검사하는 함수를 실행해요. 처음으로 `true`를 반환하게 하는 값이 선택돼요.
+- **부분 객체**: 주어진 객체와 부분적으로 일치하는 첫 번째 요소가 선택돼요.
+- **프로퍼티-값 쌍**: 해당 프로퍼티에 대해서 값이 일치하는 첫 번째 요소가 선택돼요.
+- **프로퍼티 이름**: 해당 프로퍼티에 대해서 참으로 평가되는 값을 가지는 첫 번째 요소가 선택돼요.
+
+## 인터페이스
+
+```typescript
+function findIndex<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): number;
+function findIndex<T>(arr: T[], doesMatch: Partial<T>): number;
+function findIndex<T>(arr: T[], doesMatch: [keyof T, unknown]): number;
+function findIndex<T>(arr: T[], doesMatch: string): number;

----------------------------------------

File: docs/ko/reference/compat/array/indexOf.md
Status: added
Changes: +36 -0
Diff:
@@ -0,0 +1,36 @@
+# indexOf
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+배열에서 주어진 요소가 첫 번째로 일치하는 인덱스를 찾아요.
+
+`Array.prototype.indexOf`와 거의 같게 동작하는데요, `NaN` 값을 찾을 수 있어요.

----------------------------------------

File: docs/ko/reference/compat/array/max.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # max
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/array/min.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # min
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/array/size.md
Status: modified
Changes: +4 -3
Diff:
@@ -1,14 +1,15 @@
 # size
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/array/zipObjectDeep.md
Status: modified
Changes: +11 -6
Diff:
@@ -1,10 +1,12 @@
 # zipObjectDeep
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 
-두 배열을 하나의 객체로 결합해요. 첫 번째 배열은 프로퍼티 경로를 나타내고, 두 번째 배열은 값을 나타내요. [zipObject](../../array/zipObject.md)와 다르게, 프로퍼티로 `a.b` 와 같은 경로를 지정할 수 있어요. 
+두 배열을 하나의 객체로 결합해요. 첫 번째 배열은 프로퍼티 경로를 나타내고, 두 번째 배열은 값을 나타내요. [zipObject](../../array/zipObject.md)와 다르게, 프로퍼티로 `a.b` 와 같은 경로를 지정할 수 있어요.

----------------------------------------

File: docs/ko/reference/compat/function/bind.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # bind
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/object/get.md
Status: modified
Changes: +65 -19
Diff:
@@ -1,7 +1,9 @@
 # get
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 
 객체에서 주어진 경로에 있는 값을 가져와요. 그 값이 `undefined` 라면, 기본값을 반환해요.
@@ -11,19 +13,59 @@
 ```typescript
 function get<T extends object, K extends keyof T>(object: T, path: K | [K]): T[K];
 function get<T extends object, K extends keyof T>(object: T | null | undefined, path: K | [K]): T[K] | undefined;
-function get<T extends object, K extends keyof T, D>(object: T | null | undefined, path: K | [K], defaultValue: D): Exclude<T[K], undefined> | D;
+function get<T extends object, K extends keyof T, D>(
+  object: T | null | undefined,
+  path: K | [K],
+  defaultValue: D
+): Exclude<T[K], undefined> | D;
 
 function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, path: [K1, K2]): T[K1][K2];
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(object: T | null | undefined, path: [K1, K2]): T[K1][K2] | undefined;
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], D>(object: T | null | undefined, path: [K1, K2], defaultValue: D): Exclude<T[K1][K2], undefined> | D;
-
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T, path: [K1, K2, K3]): T[K1][K2][K3];
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T | null | undefined, path: [K1, K2, K3]): T[K1][K2][K3] | undefined;
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], D>(object: T | null | undefined, path: [K1, K2, K3], defaultValue: D): Exclude<T[K1][K2][K3], undefined> | D;
-
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4];
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T | null | undefined, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4] | undefined;
-function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3], D>(object: T | null | undefined, path: [K1, K2, K3, K4], defaultValue: D): Exclude<T[K1][K2][K3][K4], undefined> | D;
+function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(
+  object: T | null | undefined,
+  path: [K1, K2]
+): T[K1][K2] | undefined;
+function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], D>(
+  object: T | null | undefined,
+  path: [K1, K2],
+  defaultValue: D

----------------------------------------

File: docs/ko/reference/compat/object/has.md
Status: added
Changes: +60 -0
Diff:
@@ -0,0 +1,60 @@
+# has
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+객체가 주어진 경로에 해당하는 프로퍼티를 가지는지 확인해요.
+
+경로로는 객체의 프로퍼티 이름, 프로퍼티 이름의 배열, 또는 깊은 경로를 나타내는 문자열을 쓸 수 있어요.
+
+만약에 경로가 인덱스를 나타내고, 객체가 배열 또는 `arguments` 객체라면, 그 인덱스가 유효한지 (0 이상이고 길이 미만인지) 확인해요. 그래서 모든 인덱스가 정의되어 있지 않은 희소 배열(Sparse array)에도 쓸 수 있어요.
+
+## 인터페이스
+
+```typescript
+function has(object: unknown, path: string | number | symbol | Array<string | number | symbol>): boolean;
+```

----------------------------------------

File: docs/ko/reference/compat/object/property.md
Status: modified
Changes: +6 -4
Diff:
@@ -1,20 +1,22 @@
 # property
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 
 객체에서 주어진 경로에 있는 값을 가져오는 함수를 만들어요. 값을 가져오기 위해서는 [`get`](./get.md) 함수를 사용해요.

----------------------------------------

File: docs/ko/reference/compat/object/set.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # set
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/predicate/isArguments.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # isArguments
 
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
 주어진 값이 `arguments` 객체인지 확인해요.

----------------------------------------

File: docs/ko/reference/compat/predicate/isArray.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # isArray
 
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
 주어진 값이 배열인지 확인해요.

----------------------------------------

File: docs/ko/reference/compat/predicate/isArrayLike.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # isArrayLike
 
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
 주어진 값이 유사 배열인지 확인해요.

----------------------------------------

File: docs/ko/reference/compat/predicate/isMatch.md
Status: modified
Changes: +7 -2
Diff:
@@ -1,7 +1,9 @@
 # isMatch
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/predicate/isObjectLike.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # isObjectLike
 
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
 주어진 값이 객체 같은지 확인해요.

----------------------------------------

File: docs/ko/reference/compat/predicate/matches.md
Status: modified
Changes: +4 -3
Diff:
@@ -1,10 +1,12 @@
 # matches
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/predicate/matchesProperty.md
Status: added
Changes: +45 -0
Diff:
@@ -0,0 +1,45 @@
+# matchesProperty
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+주어진 객체의 프로퍼티가 `source`의 모양 및 값과 일치하는지 확인하는 함수를 만들어요.
+
+반환된 함수는 `target` 객체를 받아서, 주어진 프로퍼티에 있는 값이 `source`와 일치하는지 확인해요.
+
+## 인터페이스
+

----------------------------------------

File: docs/ko/reference/compat/string/endsWith.md
Status: modified
Changes: +7 -5
Diff:
@@ -1,7 +1,9 @@
 # endsWith
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/compat/string/padEnd.md
Status: added
Changes: +35 -0
Diff:
@@ -0,0 +1,35 @@
+# padEnd
+
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
+문자열을 주어진 길이가 될 때까지 마지막에 글자를 추가해서 늘려요.
+
+이미 문자열이 충분히 길거나, 마지막에 추가할 글자가 빈 문자열이라면, 아무 동작도 하지 않아요.

----------------------------------------

File: docs/ko/reference/compat/string/padStart.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # padStart
 
+::: info
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
+:::
+
 문자열을 주어진 길이가 될 때까지 앞에 글자를 추가해서 늘려요.

----------------------------------------

File: docs/ko/reference/compat/string/startsWith.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # startsWith
 
 ::: info
-이 함수는 [lodash와 완전히 호환](../../../compatibility.md)돼요. `es-toolkit/compat` 라이브러리에서 쓸 수 있어요.
+이 함수는 호환성을 위한 `es-toolkit/compat` 에서만 가져올 수 있어요. 대체할 수 있는 네이티브 JavaScript API가 있거나, 아직 충분히 최적화되지 않았기 때문이에요.
+
+`es-toolkit/compat`에서 이 함수를 가져오면, [lodash와 완전히 똑같이 동작](../../../compatibility.md)해요.
 :::
 

----------------------------------------

File: docs/ko/reference/error/AbortError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# AbortError
+
+작업이 중단되거나 취소되었을 때 던져지는 에러예요.
+
+[debounce](../function/debounce.md)나 [delay](../promise/delay.md)와 같은 작업이 `AbortSignal`로 취소되었을 때 던져져요.
+
+## 인터페이스
+
+```typescript

----------------------------------------

File: docs/ko/reference/error/TimeoutError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# TimeoutError
+
+제한 시간이 지났을 때 던져지는 에러예요.
+
+[timeout](../promise/timeout.md)나 [withTimeout](../promise/withTimeout.md) 같은 작업의 제한 시간이 지났을 때 던져져요.
+
+## 인터페이스
+
+```typescript

----------------------------------------

File: docs/ko/reference/function/ary.md
Status: modified
Changes: +1 -4
Diff:
@@ -5,10 +5,7 @@
 ## 인터페이스
 
 ```typescript
-function ary<F extends (...args: any[]) => any>(
-  func: F,
-  n: number
-): (...args: any[]) => ReturnType<F>;
+function ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F>;
 ```

----------------------------------------

File: docs/ko/reference/function/memoize.md
Status: added
Changes: +89 -0
Diff:
@@ -0,0 +1,89 @@
+# memoize
+
+연산 결과를 캐싱하는 새로운 메모이제이션된 함수를 반환해요. 메모이제이션된 함수는 같은 인자에 대해서 중복해서 연산하지 않고, 캐시된 결과를 반환해요.
+
+인자를 0개 또는 1개만 받는 함수만 메모이제이션할 수 있어요. 2개 이상의 인자를 받는 함수를 메모이제이션하려면,
+여러 인자를 1개의 객체나 배열로 받도록 리팩토링하세요.
+
+인자가 배열이나 객체여서 원시 값이 아닌 경우, 올바르게 캐시 키를 계산할 수 있도록 `getCacheKey` 함수를 옵션으로 제공하세요.
+
+## 인터페이스
+
+```typescript
+function memoize<F extends (...args: any) => any>(
+  fn: F,
+  options: {
+    cache?: MemoizeCache<any, ReturnType<F>>;
+    getCacheKey?: (args: Parameters<F>[0]) => unknown;
+  } = {}
+): F & { cache: MemoizeCache<any, ReturnType<F>> };
+
+interface MemoizeCache<K, V> {
+  set(key: K, value: V): void;
+  get(key: K): V | undefined;
+  has(key: K): boolean;
+  delete(key: K): boolean | void;
+  clear(): void;
+  size: number;
+}
+```

----------------------------------------

File: docs/ko/reference/function/partial.md
Status: added
Changes: +47 -0
Diff:
@@ -0,0 +1,47 @@
+# partial
+
+미리 인자를 앞에서부터 제공한 함수를 만들어요.
+
+[bind](../compat/function/bind.md)와 동작이 비슷한데요, `this`를 고정하지 않는다는 차이가 있어요.
+
+Symbol 타입의 `partial.placeholder`를 쓰면, 미리 제공한 인자가 사용될 위치를 결정할 수 있어요.
+
+함수의 `length` 프로퍼티는 설정하지 않아요.
+
+## 인터페이스
+
+```typescript
+function partial<F extends (...args: any[]) => any>(func: F, ...partialArgs: any[]): F;
+

----------------------------------------

File: docs/ko/reference/function/partialRight.md
Status: added
Changes: +47 -0
Diff:
@@ -0,0 +1,47 @@
+# partialRight
+
+미리 인자를 뒤에서부터 제공한 함수를 만들어요.
+
+[partial](./partial.md)와 동작이 비슷한데요, 인자를 뒤에서부터 제공한다는 차이가 있어요.
+
+Symbol 타입의 `partialRight.placeholder`를 쓰면, 미리 제공한 인자가 사용될 위치를 결정할 수 있어요.
+
+함수의 `length` 프로퍼티는 설정하지 않아요.
+
+## 인터페이스
+
+```typescript
+function partialRight<F extends (...args: any[] => any)>(func: F, ...partialArgs: any[]): F;
+

----------------------------------------

File: docs/ko/reference/function/rest.md
Status: added
Changes: +38 -0
Diff:
@@ -0,0 +1,38 @@
+# rest
+
+주어진 함수 `func`에게 특정 인덱스부터 인자를 배열로 묶어서 전달하는 새로운 함수를 만들어요.
+특정 인덱스 전의 인자들은 개별로 전달되고, 이후 인자들은 배열로 한꺼번에 묶여서 전달돼요.
+
+## 인터페이스
+
+```typescript
+function rest<F extends (...args: any[]) => any>(func: F, startIndex: number): (...args: any[]) => ReturnType<F>;
+```
+
+### 파라미터

----------------------------------------

File: docs/ko/reference/object/flattenObject.md
Status: modified
Changes: +4 -4
Diff:
@@ -25,14 +25,14 @@ function flattenObject(object: object): Record<string, any>;
 const nestedObject = {
   a: {
     b: {
-      c: 1
-    }
+      c: 1,
+    },
   },
-  d: [2, 3]

----------------------------------------

File: docs/ko/reference/predicate/isString.md
Status: added
Changes: +31 -0
Diff:
@@ -0,0 +1,31 @@
+# isString
+
+주어진 값이 문자열(string)인지 확인해요.
+
+TypeScript의 타입 가드로 사용할 수 있어요. 파라미터로 주어진 값의 타입을 `string`으로 좁혀요.
+
+## 인터페이스
+
+```typescript

----------------------------------------

File: docs/reference/array/countBy.md
Status: modified
Changes: +2 -3
Diff:
@@ -5,7 +5,7 @@ Count the occurrences of each item in an array based on a `mapper` function.
 ## Signature
 
 ```typescript
-function countBy<T>(arr: T[], mapper: (item: T) => string): Record<string, number>
+function countBy<T>(arr: T[], mapper: (item: T) => string): Record<string, number>;
 ```
 
 ### Parameters
@@ -23,9 +23,8 @@ function countBy<T>(arr: T[], mapper: (item: T) => string): Record<string, numbe

----------------------------------------

File: docs/reference/array/difference.md
Status: modified
Changes: +1 -1
Diff:
@@ -38,4 +38,4 @@ const result = difference(array1, array2);
 |            | [Bundle Size](../../bundle-size.md) | [Performance](../../performance.md) |
 | ---------- | ----------------------------------- | ----------------------------------- |
 | es-toolkit | 90 bytes (92.4% smaller)            | 9,317,227 times (85% faster)        |
-| lodash-es  | 7,958 bytes                         | 5,030,861 times                     |
\ No newline at end of file
+| lodash-es  | 7,958 bytes                         | 5,030,861 times                     |

----------------------------------------

File: docs/reference/array/flatMap.md
Status: modified
Changes: +1 -5
Diff:
@@ -7,11 +7,7 @@ It works the same as if you called [Array#flat](https://developer.mozilla.org/en
 ## Signature
 
 ```typescript
-function flatMap<T, U, D extends number = 1>(
-  arr: T[],
-  iteratee: (item: T) => U,
-  depth?: D
-): Array<FlatArray<U[], D>>;
+function flatMap<T, U, D extends number = 1>(arr: T[], iteratee: (item: T) => U, depth?: D): Array<FlatArray<U[], D>>;

----------------------------------------

File: docs/reference/array/forEachRight.md
Status: modified
Changes: +6 -7
Diff:
@@ -2,7 +2,6 @@
 
 Iterates over elements of `arr` from right to left and invokes `callback` for each element.
 
-
 ## Signature
 
 ```ts
@@ -13,9 +12,9 @@ function forEachRight<T>(arr: T[], callback: (value: T, index: number, arr: T[])
 
 - `arr` (`T[]`): The array to iterate over.

----------------------------------------

File: docs/reference/array/sortBy.md
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+# sortBy
+
+Sorts an array of objects based on the given `criteria`.
+
+- If you provide keys, it sorts the objects by the values of those keys.
+- If you provide functions, it sorts based on the values returned by those functions.
+
+The function returns the array of objects sorted in ascending order. If two objects have the same value for the current criterion, it uses the next criterion to determine their order.
+
+## Signature
+
+```typescript
+function sortBy<T extends object>(arr: T[], criteria: Array<((item: T) => unknown) | keyof T>): T[];
+```

----------------------------------------

File: docs/reference/array/unzipWith.md
Status: modified
Changes: +1 -1
Diff:
@@ -15,7 +15,7 @@ function unzipWith<T, R>(target: T[][], iteratee: (...args: T[]) => R): R[];
 
 ### Returns
 
-(`R[]`): A new array of unzipped and transformed elements. 
+(`R[]`): A new array of unzipped and transformed elements.
 
 ## Examples
 

----------------------------------------

File: docs/reference/compat/array/concat.md
Status: modified
Changes: +5 -3
Diff:
@@ -1,15 +1,17 @@
 # concat
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/array/find.md
Status: added
Changes: +119 -0
Diff:
@@ -0,0 +1,119 @@
+# find
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Finds the first item in an array or object that meets the specified condition.
+
+You can specify the condition in several ways:
+
+- **Predicate function**: If you provide a predicate function, the function will be applied to each item. The first item that makes the predicate function return `true` will be selected.
+- **Partial object**: If you provide a partial object, the function will return the first item that matches the properties of the partial object.
+- **Property-value pair**: If you provide a property-value pair, the function will return the first item that matches the property and value from the pair.
+- **Property name**: If you provide a property name, the function will return the first item where the specified property has a truthy value.
+
+## Signature
+
+```typescript
+function find<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): T | undefined;
+function find<T>(arr: T[], doesMatch: Partial<T>): T | undefined;
+function find<T>(arr: T[], doesMatch: [keyof T, unknown]): T | undefined;
+function find<T>(arr: T[], doesMatch: string): T | undefined;
+
+function find<T extends Record<string, unknown>>(
+  object: T,
+  doesMatch: (item: T[keyof T], index: number, object: T) => unknown
+): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T, unknown]): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: string): T | undefined;
+```
+
+### Parameters
+
+- `arr` (`T[]`) or `object` (`T`): The array or object to search through.
+
+- `doesMatch`:

----------------------------------------

File: docs/reference/compat/array/findIndex.md
Status: added
Changes: +75 -0
Diff:
@@ -0,0 +1,75 @@
+# findIndex
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Returns the index of the first item in an array that meets the specified condition.
+
+You can specify the condition in several ways:
+
+- **Predicate function**: If you provide a predicate function, the function will be applied to each item. The first item that makes the predicate function return `true` will be selected.
+- **Partial object**: If you provide a partial object, the function will return the first item that matches the properties of the partial object.
+- **Property-value pair**: If you provide a property-value pair, the function will return the first item that matches the property and value from the pair.
+- **Property name**: If you provide a property name, the function will return the first item where the specified property has a truthy value.
+
+## Signature
+
+```typescript
+function findIndex<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): number;
+function findIndex<T>(arr: T[], doesMatch: Partial<T>): number;
+function findIndex<T>(arr: T[], doesMatch: [keyof T, unknown]): number;
+function findIndex<T>(arr: T[], doesMatch: string): number;

----------------------------------------

File: docs/reference/compat/array/indexOf.md
Status: added
Changes: +36 -0
Diff:
@@ -0,0 +1,36 @@
+# indexOf
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Finds the index of the first occurrence of a value in an array.
+
+This method is similar to `Array.prototype.indexOf`, but it also finds `NaN` values.

----------------------------------------

File: docs/reference/compat/array/max.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # max
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/array/min.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # min
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/array/size.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # size
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/array/zipObjectDeep.md
Status: modified
Changes: +11 -6
Diff:
@@ -1,7 +1,9 @@
 # zipObjectDeep
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 
 Creates a deeply nested object given arrays of paths and values.
@@ -13,7 +15,7 @@ Paths can be dot-separated strings or arrays of property names. If the `keys` ar
 ## Signature
 

----------------------------------------

File: docs/reference/compat/function/bind.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # bind
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/object/get.md
Status: modified
Changes: +59 -19
Diff:
@@ -1,7 +1,9 @@
 # get
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 
 Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
@@ -11,19 +13,53 @@ Retrieves the value at a given path from an object. If the resolved value is und
 ```typescript
 function get<T, K extends keyof T>(object: T, path: K | [K]): T[K];
 function get<T, K extends keyof T>(object: T | null | undefined, path: K | [K]): T[K] | undefined;
-function get<T, K extends keyof T, D>(object: T | null | undefined, path: K | [K], defaultValue: D): Exclude<T[K], undefined> | D;
+function get<T, K extends keyof T, D>(
+  object: T | null | undefined,
+  path: K | [K],
+  defaultValue: D
+): Exclude<T[K], undefined> | D;
 
 function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, path: [K1, K2]): T[K1][K2];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T | null | undefined, path: [K1, K2]): T[K1][K2] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], D>(object: T | null | undefined, path: [K1, K2], defaultValue: D): Exclude<T[K1][K2], undefined> | D;
-
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T, path: [K1, K2, K3]): T[K1][K2][K3];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T | null | undefined, path: [K1, K2, K3]): T[K1][K2][K3] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], D>(object: T | null | undefined, path: [K1, K2, K3], defaultValue: D): Exclude<T[K1][K2][K3], undefined> | D;
-
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T | null | undefined, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3], D>(object: T | null | undefined, path: [K1, K2, K3, K4], defaultValue: D): Exclude<T[K1][K2][K3][K4], undefined> | D;
+function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(
+  object: T | null | undefined,
+  path: [K1, K2]
+): T[K1][K2] | undefined;
+function get<T, K1 extends keyof T, K2 extends keyof T[K1], D>(
+  object: T | null | undefined,

----------------------------------------

File: docs/reference/compat/object/has.md
Status: added
Changes: +64 -0
Diff:
@@ -0,0 +1,64 @@
+# has
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Checks if a given path exists within an object.
+
+You can provide the path as a single property key, an array of property keys,
+or a string representing a deep path.
+
+If the path is an index and the object is an array or an arguments object,
+the function will verify if the index is valid and within the bounds of the array
+or arguments object, even if the array or arguments object is sparse
+(i.e., not all indexes are defined).
+
+## Signature
+

----------------------------------------

File: docs/reference/compat/object/property.md
Status: modified
Changes: +7 -5
Diff:
@@ -1,21 +1,23 @@
 # property
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 
-Creates a function that returns the value at a given path of an object. 

----------------------------------------

File: docs/reference/compat/object/set.md
Status: modified
Changes: +8 -2
Diff:
@@ -1,15 +1,21 @@
 # set
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/isArguments.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # isArguments
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/isArray.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # isArray
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/isArrayLike.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # isArrayLike
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/isMatch.md
Status: modified
Changes: +7 -2
Diff:
@@ -1,7 +1,9 @@
 # isMatch
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/isObjectLike.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # isObjectLike
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/matches.md
Status: modified
Changes: +3 -2
Diff:
@@ -1,7 +1,9 @@
 # matches
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/predicate/matchesProperty.md
Status: added
Changes: +46 -0
Diff:
@@ -0,0 +1,46 @@
+# matchesProperty
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Creates a function that checks if a given source object matches a specific property value.
+
+The returned function takes a source object and determines if the property at the
+specified path within the source object is equal to the given value.
+
+## Signature

----------------------------------------

File: docs/reference/compat/string/endsWith.md
Status: modified
Changes: +7 -5
Diff:
@@ -1,7 +1,9 @@
 # endsWith
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/compat/string/padEnd.md
Status: added
Changes: +36 -0
Diff:
@@ -0,0 +1,36 @@
+# padEnd
+
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
+Pads the end of a string with a given character until it reaches the specified length.
+
+If the length is less than or equal to the original string's length, or if the padding character is an empty string,

----------------------------------------

File: docs/reference/compat/string/padStart.md
Status: modified
Changes: +6 -0
Diff:
@@ -1,5 +1,11 @@
 # padStart
 
+::: info
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
+:::
+
 Pads the start of a string with a given character until it reaches the specified length.

----------------------------------------

File: docs/reference/compat/string/startsWith.md
Status: modified
Changes: +7 -5
Diff:
@@ -1,7 +1,9 @@
 # startsWith
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+This function is only available in `es-toolkit/compat` for compatibility reasons. It either has alternative native JavaScript APIs or isn’t fully optimized yet.
+
+When imported from `es-toolkit/compat`, it behaves exactly like lodash and provides the same functionalities, as detailed [here](../../../compatibility.md).
 :::
 

----------------------------------------

File: docs/reference/error/AbortError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# AbortError
+
+An error class representing an operation that was aborted.
+
+It occurs when operations like [debounce](../function/debounce.md) or [delay](../promise/delay.md) are aborted using `AbortSignal`s.
+
+## Interface
+
+```typescript

----------------------------------------

File: docs/reference/error/TimeoutError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# TimeoutError
+
+An error class representing an timeout.
+
+It occurs when operations like [timeout](../promise/timeout.md) or [withTimeout](../promise/withTimeout.md) have timed out.
+
+## Interface
+
+```typescript

----------------------------------------

File: docs/reference/function/ary.md
Status: modified
Changes: +1 -4
Diff:
@@ -5,10 +5,7 @@ Creates a function that invokes func, with up to n arguments, ignoring any addit
 ## Signature
 
 ```typescript
-function ary<F extends (...args: any[]) => any>(
-  func: F,
-  n: number
-): (...args: any[]) => ReturnType<F>;
+function ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F>;
 ```

----------------------------------------

File: docs/reference/function/memoize.md
Status: added
Changes: +93 -0
Diff:
@@ -0,0 +1,93 @@
+# memoize
+
+Creates a memoized version of the provided function. The memoized function caches
+results based on the argument it receives, so if the same argument is passed again,
+it returns the cached result instead of recomputing it.
+
+This works with functions that take zero or one argument. If your function takes
+multiple arguments, you should refactor it to accept a single object or array
+that combines those arguments.
+
+If the argument is not primitive (e.g., arrays or objects), provide a
+`getCacheKey` function to generate a unique cache key for proper caching.
+
+## Signature
+
+```typescript
+function memoize<F extends (...args: any) => any>(
+  fn: F,
+  options: {
+    cache?: MemoizeCache<any, ReturnType<F>>;
+    getCacheKey?: (args: Parameters<F>[0]) => unknown;
+  } = {}
+): F & { cache: MemoizeCache<any, ReturnType<F>> };
+
+interface MemoizeCache<K, V> {
+  set(key: K, value: V): void;
+  get(key: K): V | undefined;
+  has(key: K): boolean;
+  delete(key: K): boolean | void;
+  clear(): void;

----------------------------------------

File: docs/reference/function/partial.md
Status: added
Changes: +47 -0
Diff:
@@ -0,0 +1,47 @@
+# partial
+
+Creates a function that invokes `func` with `partialArgs` prepended to the arguments it receives.
+
+This method is like [bind](../compat/function/bind.md) except it does not alter the `this` binding.
+
+The `partial.placeholder` value, which defaults to a `symbol`, may be used as a placeholder for partially applied arguments.
+
+Note: This method doesn't set the `length` property of partially applied functions.
+
+## Signature
+
+```typescript
+function partial<F extends Function>(func: F, ...partialArgs: any[]): F;
+

----------------------------------------

File: docs/reference/function/partialRight.md
Status: added
Changes: +47 -0
Diff:
@@ -0,0 +1,47 @@
+# partialRight
+
+Creates a function that invokes `func` with `partialArgs` appended to the arguments it receives.
+
+This method is like [partial](./partial.md), except that partially applied arguments are appended to the arguments it receives.
+
+The `partialRight.placeholder` value, which defaults to a `symbol`, may be used as a placeholder for partially applied arguments.
+
+Note: This method doesn't set the `length` property of partially applied functions.
+
+## Signature
+
+```typescript
+function partialRight<F extends Function>(func: F, ...partialArgs: any[]): F;
+

----------------------------------------

File: docs/reference/function/rest.md
Status: added
Changes: +43 -0
Diff:
@@ -0,0 +1,43 @@
+# rest
+
+Creates a function that transforms the arguments of the provided function `func`.
+The transformed arguments are passed to `func` such that the arguments starting from a specified index
+are grouped into an array, while the previous arguments are passed as individual elements.
+
+## Signature
+
+```typescript
+function rest<F extends (...args: any[]) => any>(func: F, startIndex: number): (...args: any[]) => ReturnType<F>;
+```
+
+### Parameters

----------------------------------------

File: docs/reference/object/flattenObject.md
Status: modified
Changes: +4 -4
Diff:
@@ -25,14 +25,14 @@ function flattenObject(object: object): Record<string, any>;
 const nestedObject = {
   a: {
     b: {
-      c: 1
-    }
+      c: 1,
+    },
   },
-  d: [2, 3]

----------------------------------------

File: docs/reference/predicate/isString.md
Status: added
Changes: +31 -0
Diff:
@@ -0,0 +1,31 @@
+# isString
+
+Checks if the given value is a string.
+
+This function can also serve as a type predicate in TypeScript, narrowing the type of the argument to `string`.
+
+## Signature
+
+```typescript

----------------------------------------

File: docs/reference/promise/withTimeout.md
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 # withTimeout
 
-Executes an async function and enforces a timeout. 
+Executes an async function and enforces a timeout.
 
 If the promise does not resolve within the specified time,
 the timeout will trigger and the returned promise will be rejected.

----------------------------------------

File: docs/reference/string/kebabCase.md
Status: modified
Changes: +19 -19
Diff:
@@ -1,30 +1,30 @@
- # kebabCase
+# kebabCase
 
- Converts a string to kebab case.
+Converts a string to kebab case.
 
- Kebab case is the naming convention in which each word is written in lowercase and separated by an dash (\-) character. For example, `kebab-case`.
+Kebab case is the naming convention in which each word is written in lowercase and separated by an dash (\-) character. For example, `kebab-case`.
 
- ## Signature
+## Signature
 
- ```typescript
- function kebabCase(str: string): string;
- ```

----------------------------------------

File: docs/zh_hans/bundle-size.md
Status: modified
Changes: +2 -2
Diff:
@@ -27,10 +27,10 @@ description: es-toolkit提供的最小包体积
 我们的包体积是使用 [esbuild 0.23.0](https://esbuild.github.io) 测量的，通过分析如下代码的大小：
 
 ```tsx
-import { chunk } from 'es-toolkit'; 
+import { chunk } from 'es-toolkit';
 // 或 import { chunk } from 'lodash-es';
 
 console.log(chunk);
 ```

----------------------------------------

File: docs/zh_hans/compatibility.md
Status: modified
Changes: +11 -11
Diff:
@@ -62,14 +62,14 @@ chunk([1, 2, 3, 4], 0);
 | [dropRightWhile](https://lodash.com/docs/4.17.15#dropRightWhile)       | 📝         |
 | [dropWhile](https://lodash.com/docs/4.17.15#dropWhile)                 | 📝         |
 | [fill](https://lodash.com/docs/4.17.15#fill)                           | ✅         |
-| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ❌         |
+| [findIndex](https://lodash.com/docs/4.17.15#findIndex)                 | ✅         |
 | [findLastIndex](https://lodash.com/docs/4.17.15#findIndex)             | ❌         |
 | [flatten](https://lodash.com/docs/4.17.15#flatten)                     | ✅         |
 | [flattenDeep](https://lodash.com/docs/4.17.15#flattenDeep)             | ✅         |
 | [flattenDepth](https://lodash.com/docs/4.17.15#flattenDepth)           | ✅         |
 | [fromPairs](https://lodash.com/docs/4.17.15#fromPairs)                 | ❌         |
 | [head](https://lodash.com/docs/4.17.15#head)                           | 📝         |
-| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ❌         |
+| [indexOf](https://lodash.com/docs/4.17.15#indexOf)                     | ✅         |
 | [initial](https://lodash.com/docs/4.17.15#initial)                     | ✅         |
 | [intersection](https://lodash.com/docs/4.17.15#intersection)           | 📝         |
 | [intersectionBy](https://lodash.com/docs/4.17.15#intersectionBy)       | 📝         |
@@ -157,10 +157,10 @@ chunk([1, 2, 3, 4], 0);
 
 | 函数名称                                                     | 实现状态 |
 | ------------------------------------------------------------ | -------- |
-| [after](https://lodash.com/docs/4.17.15#after)               | ❌       |

----------------------------------------

File: docs/zh_hans/reference/array/compact.md
Status: modified
Changes: +1 -0
Diff:
@@ -21,3 +21,4 @@ function compact<T>(arr: T[]): Array<Exclude<T, false | null | 0 | '' | undefine
 ```typescript
 compact([0, 1, false, 2, '', 3, null, undefined, 4, NaN, 5]);
 // 返回: [1, 2, 3, 4, 5]
+```

----------------------------------------

File: docs/zh_hans/reference/array/countBy.md
Status: modified
Changes: +3 -3
Diff:
@@ -1,11 +1,11 @@
 # countBy
 
- 根据 `mapper` 函数统计数组中每个项目的出现次数。
+根据 `mapper` 函数统计数组中每个项目的出现次数。
 
 ## 签名
 
 ```typescript
-function countBy<T>(arr: T[], mapper: (item: T) => string): Record<string, number>

----------------------------------------

File: docs/zh_hans/reference/array/flatMap.md
Status: modified
Changes: +1 -5
Diff:
@@ -7,11 +7,7 @@
 ## 签名
 
 ```typescript
-function flatMap<T, U, D extends number = 1>(
-  arr: T[],
-  iteratee: (item: T) => U,
-  depth?: D
-): Array<FlatArray<U[], D>>;
+function flatMap<T, U, D extends number = 1>(arr: T[], iteratee: (item: T) => U, depth?: D): Array<FlatArray<U[], D>>;

----------------------------------------

File: docs/zh_hans/reference/array/forEachRight.md
Status: modified
Changes: +2 -2
Diff:
@@ -29,9 +29,9 @@ const array = [1, 2, 3];
 const result: number[] = [];
 
 // 使用 `forEachRight` 函数迭代数组，并将每个元素添加到结果数组中。
-forEachRight(array,  (value) => {
+forEachRight(array, value => {
   result.push(value);
 });
 
-console.log(result) // Output: [3, 2, 1];

----------------------------------------

File: docs/zh_hans/reference/array/isSubset.md
Status: modified
Changes: +1 -0
Diff:
@@ -31,3 +31,4 @@ const subset2 = ['a', 'd'];
 
 isSubset(superset2, subset2);
 // 返回 false
+```

----------------------------------------

File: docs/zh_hans/reference/array/sortBy.md
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+# sortBy
+
+根据给定的 `criteria` 对对象数组进行排序。
+
+- 如果提供的是键，它将根据这些键的值对对象进行排序。
+- 如果提供的是函数，它将根据这些函数返回的值进行排序。
+
+该函数返回按升序排列的对象数组。如果两个对象在当前标准下具有相同的值，它将使用下一个标准来确定它们的顺序。
+
+## 签名
+
+```typescript
+function sortBy<T extends object>(arr: T[], criteria: Array<((item: T) => unknown) | keyof T>): T[];
+```

----------------------------------------

File: docs/zh_hans/reference/compat/array/concat.md
Status: modified
Changes: +5 -2
Diff:
@@ -1,7 +1,10 @@
 # concat
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/array/find.md
Status: added
Changes: +120 -0
Diff:
@@ -0,0 +1,120 @@
+# find
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+查找数组或对象中第一个符合指定条件的项。
+
+您可以通过以下几种方式指定条件：
+
+- **谓词函数**：如果提供一个谓词函数，该函数将应用于每一项。返回 `true` 的第一个项将被选中。
+- **部分对象**：如果提供一个部分对象，该函数将返回第一个匹配部分对象属性的项。
+- **属性-值对**：如果提供一个属性-值对，该函数将返回第一个匹配该属性和值的项。
+- **属性名称**：如果提供一个属性名称，该函数将返回第一个指定属性具有真值的项。
+
+## 签名
+
+```typescript
+function find<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): T | undefined;
+function find<T>(arr: T[], doesMatch: Partial<T>): T | undefined;
+function find<T>(arr: T[], doesMatch: [keyof T, unknown]): T | undefined;
+function find<T>(arr: T[], doesMatch: string): T | undefined;
+
+function find<T extends Record<string, unknown>>(
+  object: T,
+  doesMatch: (item: T[keyof T], index: number, object: T) => unknown
+): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: Partial<T[keyof T]>): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: [keyof T, unknown]): T | undefined;
+function find<T extends Record<string, unknown>>(object: T, doesMatch: string): T | undefined;
+```
+
+### 参数
+
+- `arr` (`T[]`) 或 `object` (`T`): 要搜索的数组或对象。
+

----------------------------------------

File: docs/zh_hans/reference/compat/array/findIndex.md
Status: added
Changes: +76 -0
Diff:
@@ -0,0 +1,76 @@
+# findIndex
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+返回满足指定条件的数组中第一个项目的索引。
+
+您可以通过以下几种方式指定条件：
+
+- **谓词函数**：如果提供一个谓词函数，该函数将应用于每一项。返回 `true` 的第一个项将被选中。
+- **部分对象**：如果提供一个部分对象，该函数将返回第一个匹配部分对象属性的项。
+- **属性-值对**：如果提供一个属性-值对，该函数将返回第一个匹配该属性和值的项。
+- **属性名称**：如果提供一个属性名称，该函数将返回第一个指定属性具有真值的项。
+
+## 签名
+
+```typescript
+function findIndex<T>(arr: T[], doesMatch: (item: T, index: number, arr: T[]) => unknown): number;
+function findIndex<T>(arr: T[], doesMatch: Partial<T>): number;
+function findIndex<T>(arr: T[], doesMatch: [keyof T, unknown]): number;

----------------------------------------

File: docs/zh_hans/reference/compat/array/indexOf.md
Status: added
Changes: +37 -0
Diff:
@@ -0,0 +1,37 @@
+# indexOf
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+查找数组中第一个出现的值的索引。
+

----------------------------------------

File: docs/zh_hans/reference/compat/array/max.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # max
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/array/min.md
Status: modified
Changes: +3 -1
Diff:
@@ -1,7 +1,9 @@
 # min
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
 :::
 

----------------------------------------

File: docs/zh_hans/reference/compat/array/size.md
Status: modified
Changes: +3 -2
Diff:
@@ -1,14 +1,15 @@
 # size
 
 ::: info
-This function is fully compatible with lodash. You can find it in our [compatibility library](../../../compatibility.md), `es-toolkit/compat`.
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
 :::
 

----------------------------------------

File: docs/zh_hans/reference/compat/array/zipObjectDeep.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # zipObjectDeep
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/function/bind.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # bind
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/object/get.md
Status: modified
Changes: +60 -19
Diff:
@@ -1,7 +1,10 @@
 # get
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::
 
 从对象中获取给定路径的值。如果解析的值为 `undefined`，则返回 `defaultValue`。
@@ -11,19 +14,53 @@
 ```typescript
 function get<T, K extends keyof T>(object: T, path: K | [K]): T[K];
 function get<T, K extends keyof T>(object: T | null | undefined, path: K | [K]): T[K] | undefined;
-function get<T, K extends keyof T, D>(object: T | null | undefined, path: K | [K], defaultValue: D): Exclude<T[K], undefined> | D;
+function get<T, K extends keyof T, D>(
+  object: T | null | undefined,
+  path: K | [K],
+  defaultValue: D
+): Exclude<T[K], undefined> | D;
 
 function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, path: [K1, K2]): T[K1][K2];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(object: T | null | undefined, path: [K1, K2]): T[K1][K2] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], D>(object: T | null | undefined, path: [K1, K2], defaultValue: D): Exclude<T[K1][K2], undefined> | D;
-
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T, path: [K1, K2, K3]): T[K1][K2][K3];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(object: T | null | undefined, path: [K1, K2, K3]): T[K1][K2][K3] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], D>(object: T | null | undefined, path: [K1, K2, K3], defaultValue: D): Exclude<T[K1][K2][K3], undefined> | D;
-
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4];
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(object: T | null | undefined, path: [K1, K2, K3, K4]): T[K1][K2][K3][K4] | undefined;
-function get<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3], D>(object: T | null | undefined, path: [K1, K2, K3, K4], defaultValue: D): Exclude<T[K1][K2][K3][K4], undefined> | D;
+function get<T, K1 extends keyof T, K2 extends keyof T[K1]>(
+  object: T | null | undefined,
+  path: [K1, K2]
+): T[K1][K2] | undefined;
+function get<T, K1 extends keyof T, K2 extends keyof T[K1], D>(
+  object: T | null | undefined,

----------------------------------------

File: docs/zh_hans/reference/compat/object/has.md
Status: added
Changes: +62 -0
Diff:
@@ -0,0 +1,62 @@
+# has
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+检查给定路径在对象中是否存在。
+
+您可以提供路径作为单个属性键、属性键数组，或表示深层路径的字符串。
+
+如果路径是索引，且对象是数组或参数对象，函数将验证索引是否有效，并且在数组或参数对象的范围内，
+即使数组或参数对象是稀疏的（即，并非所有索引都被定义）。
+
+## 签名
+
+```typescript
+function has(object: unknown, path: string | number | symbol | Array<string | number | symbol>): boolean;

----------------------------------------

File: docs/zh_hans/reference/compat/object/property.md
Status: modified
Changes: +6 -3
Diff:
@@ -1,15 +1,18 @@
 # property
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/object/set.md
Status: modified
Changes: +9 -2
Diff:
@@ -1,15 +1,22 @@
 # set
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/isArguments.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # isArguments
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/isArray.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # isArray
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/isArrayLike.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # isArrayLike
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/isMatch.md
Status: modified
Changes: +8 -2
Diff:
@@ -1,7 +1,10 @@
 # isMatch
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/isObjectLike.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # isObjectLike
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/matches.md
Status: modified
Changes: +4 -1
Diff:
@@ -1,7 +1,10 @@
 # matches
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/predicate/matchesProperty.md
Status: added
Changes: +46 -0
Diff:
@@ -0,0 +1,46 @@
+# matchesProperty
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+创建一个函数，用于检查给定的源对象是否匹配特定的属性值。
+
+返回的函数接受一个源对象，并确定源对象中指定路径的属性是否等于给定的值。
+
+## 签名

----------------------------------------

File: docs/zh_hans/reference/compat/string/endsWith.md
Status: modified
Changes: +8 -5
Diff:
@@ -1,7 +1,10 @@
 # endsWith
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/compat/string/padEnd.md
Status: added
Changes: +36 -0
Diff:
@@ -0,0 +1,36 @@
+# padEnd
+
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+
+在字符串的末尾使用给定的字符进行填充，直到它达到指定的长度。
+

----------------------------------------

File: docs/zh_hans/reference/compat/string/padStart.md
Status: modified
Changes: +8 -0
Diff:
@@ -1,5 +1,12 @@
 # padStart
 
+::: info
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
+:::
+

----------------------------------------

File: docs/zh_hans/reference/compat/string/startsWith.md
Status: modified
Changes: +8 -5
Diff:
@@ -1,7 +1,10 @@
 # startsWith
 
 ::: info
-此函数与 lodash 完全兼容。您可以在我们的[兼容性库](../../../compatibility.md)中找到它，`es-toolkit/compat`。
+出于兼容性原因，此函数仅在 `es-toolkit/compat` 中提供。它可能具有替代的原生 JavaScript API，或者尚未完全优化。
+
+从 `es-toolkit/compat` 导入时，它的行为与 lodash 完全一致，并提供相同的功能，详情请见 [这里](../../../compatibility.md)。
+
 :::

----------------------------------------

File: docs/zh_hans/reference/error/AbortError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# AbortError
+
+一个表示操作被中止的错误类。
+
+当像 [debounce](../function/debounce.md) 或 [delay](../promise/delay.md) 这样的操作通过 `AbortSignal` 被中止时，会发生此错误。
+
+## 接口
+
+```typescript

----------------------------------------

File: docs/zh_hans/reference/error/TimeoutError.md
Status: added
Changes: +13 -0
Diff:
@@ -0,0 +1,13 @@
+# TimeoutError
+
+一个表示超时的错误类。
+
+当像 [timeout](../promise/timeout.md) 或 [withTimeout](../promise/withTimeout.md) 这样的操作超时时，会发生此错误。
+
+## 接口
+
+```typescript

----------------------------------------

File: docs/zh_hans/reference/function/memoize.md
Status: added
Changes: +88 -0
Diff:
@@ -0,0 +1,88 @@
+# memoize
+
+创建一个函数的备忘版本。备忘函数会基于接收到的参数缓存结果，因此如果再次传递相同的参数，它会返回缓存的结果，而不是重新计算。
+
+这个功能适用于接受零个或一个参数的函数。如果你的函数接受多个参数，你应该将其重构为接受一个组合了这些参数的对象或数组。
+
+如果参数不是原始类型（例如数组或对象），请提供一个 `getCacheKey` 函数来生成唯一的缓存键，以确保正确缓存。
+
+## 签名
+
+```typescript
+function memoize<F extends (...args: any) => any>(
+  fn: F,
+  options: {
+    cache?: MemoizeCache<any, ReturnType<F>>;
+    getCacheKey?: (args: Parameters<F>[0]) => unknown;
+  } = {}
+): F & { cache: MemoizeCache<any, ReturnType<F>> };
+
+interface MemoizeCache<K, V> {
+  set(key: K, value: V): void;
+  get(key: K): V | undefined;
+  has(key: K): boolean;
+  delete(key: K): boolean | void;
+  clear(): void;
+  size: number;
+}
+```

----------------------------------------

File: docs/zh_hans/reference/function/partial.md
Status: added
Changes: +47 -0
Diff:
@@ -0,0 +1,47 @@
+# partial
+
+创建一个函数，该函数会在调用时将 `partialArgs` 作为前置参数传递给 `func`。
+
+此方法类似于 [bind](../compat/function/bind.md)，但不会改变 `this` 绑定。
+
+`partial.placeholder` 的值默认是一个 `symbol`，可以用作附加的部分参数的占位符。
+
+**注意：** 这个方法不会设置部分应用函数的 `length` 属性。
+
+## 签名
+
+```typescript
+function partial<F extends Function>(func: F, ...partialArgs: any[]): F;
+

----------------------------------------

File: docs/zh_hans/reference/function/partialRight.md
Status: added
Changes: +45 -0
Diff:
@@ -0,0 +1,45 @@
+# partialRight
+
+此方法类似于 `partial`，但部分应用的参数会被附加到接收到的参数之后。
+
+`partialRight.placeholder` 的值默认是一个 `symbol`，可以用作附加的部分参数的占位符。
+
+**注意：** 这个方法不会设置部分应用函数的 `length` 属性。
+
+## 签名
+
+```typescript
+function partialRight<F extends Function>(func: F, ...partialArgs: any[]): F;
+
+namespace partialRight {

----------------------------------------

File: docs/zh_hans/reference/function/rest.md
Status: added
Changes: +42 -0
Diff:
@@ -0,0 +1,42 @@
+# rest
+
+创建一个函数，该函数会转换提供的函数 `func` 的参数。
+转换后的参数会传递给 `func`，使得从指定索引开始的参数被分组到一个数组中，而之前的参数则作为单独的元素传递。
+
+## 签名
+
+```typescript
+function rest<F extends (...args: any[]) => any>(func: F, startIndex: number): (...args: any[]) => ReturnType<F>;
+```
+
+### 参数
+

----------------------------------------

File: docs/zh_hans/reference/math/randomInt.md
Status: modified
Changes: +1 -1
Diff:
@@ -18,7 +18,7 @@ function randomInt(minimum: number, maximum: number): number;
 
 ### 返回值
 
-- (`number`):  指定范围内的随机整数。
+- (`number`): 指定范围内的随机整数。
 
 ## 示例
 

----------------------------------------

File: docs/zh_hans/reference/object/flattenObject.md
Status: modified
Changes: +5 -5
Diff:
@@ -25,18 +25,18 @@ function flattenObject(object: object): Record<string, any>;
 const nestedObject = {
   a: {
     b: {
-      c: 1
-    }
+      c: 1,
+    },
   },
-  d: [2, 3]

----------------------------------------

File: docs/zh_hans/reference/predicate/isString.md
Status: added
Changes: +31 -0
Diff:
@@ -0,0 +1,31 @@
+# isString
+
+检查给定的值是否是一个字符串。
+
+此函数还可以作为 TypeScript 中的类型谓词，将参数的类型缩小为 `string`。
+
+## 签名
+
+```typescript

----------------------------------------

File: jsr.json
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 {
   "name": "@es-toolkit/es-toolkit",
-  "version": "1.15.1",
+  "version": "1.16.0",
   "exports": {
     ".": "./src/index.ts",
     "./compat": "./src/compat/index.ts"

----------------------------------------

File: package.json
Status: modified
Changes: +1 -1
Diff:
@@ -1,7 +1,7 @@
 {
   "name": "es-toolkit",
   "description": "A state-of-the-art, high-performance JavaScript utility library with a small bundle size and strong type annotations.",
-  "version": "1.15.1",
+  "version": "1.16.0",
   "homepage": "https://es-toolkit.slash.page",
   "bugs": "https://github.com/toss/es-toolkit/issues",
   "repository": {

----------------------------------------

File: src/_internal/compareValues.ts
Status: added
Changes: +9 -0
Diff:
@@ -0,0 +1,9 @@
+export function compareValues(a: any, b: any, order: 'asc' | 'desc'): 0 | -1 | 1 {
+  if (a < b) {
+    return order === 'asc' ? -1 : 1;
+  }
+  if (a > b) {
+    return order === 'asc' ? 1 : -1;
+  }
+  return 0;
+}

----------------------------------------

File: src/array/countBy.spec.ts
Status: modified
Changes: +5 -5
Diff:
@@ -1,5 +1,5 @@
 import { describe, expect, it } from 'vitest';
-import {countBy} from "./countBy.ts";
+import { countBy } from './countBy.ts';
 
 describe('countBy', () => {
   it('should count the occurrences of each item in an array', () => {
@@ -16,11 +16,11 @@ describe('countBy', () => {
   });
   it('should count the occurrences of each item in an array that applied transformer', () => {

----------------------------------------

File: src/array/countBy.ts
Status: modified
Changes: +3 -3
Diff:
@@ -17,12 +17,12 @@
  */
 export function countBy<T>(arr: T[], mapper: (item: T) => string): Record<string, number> {
   const result: Record<string, number> = {};
-  
+
   for (const item of arr) {
     const key = mapper(item);
-    
+

----------------------------------------

File: src/array/flatMap.ts
Status: modified
Changes: +4 -1
Diff:
@@ -25,5 +25,8 @@ export function flatMap<T, U, D extends number>(
   iteratee: (item: T) => U,
   depth = 1 as D
 ): Array<FlatArray<U[], D>> {
-  return flatten(arr.map(item => iteratee(item)), depth);
+  return flatten(
+    arr.map(item => iteratee(item)),
+    depth
+  );
 }

----------------------------------------

File: src/array/forEachRight.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,23 +1,23 @@
 /**
  * Iterates over elements of 'arr' from right to left and invokes 'callback' for each element.
- * 
+ *
  * @template T - The type of elements in the array.
  * @param {T[]} arr - The array to iterate over.
  * @param {(value: T, index: number, arr: T[]) => void} callback - The function invoked per iteration.
  * The callback function receives three arguments:
  *  - 'value': The current element being processed in the array.

----------------------------------------

File: src/array/index.ts
Status: modified
Changes: +1 -0
Diff:
@@ -22,6 +22,7 @@ export { maxBy } from './maxBy.ts';
 export { minBy } from './minBy.ts';
 export { orderBy } from './orderBy.ts';
 export { partition } from './partition.ts';
+export { sortBy } from './sortBy.ts';
 export { sample } from './sample.ts';
 export { sampleSize } from './sampleSize.ts';
 export { shuffle } from './shuffle.ts';

----------------------------------------

File: src/array/orderBy.ts
Status: modified
Changes: +2 -10
Diff:
@@ -1,3 +1,5 @@
+import { compareValues } from '../_internal/compareValues';
+
 type Order = 'asc' | 'desc';
 
 /**
@@ -32,16 +34,6 @@ type Order = 'asc' | 'desc';
  * // ]
  */
 export function orderBy<T>(collection: T[], keys: Array<keyof T>, orders: Order[]): T[] {

----------------------------------------

File: src/array/sortBy.spec.ts
Status: added
Changes: +56 -0
Diff:
@@ -0,0 +1,56 @@
+import { describe, it, expect } from 'vitest';
+import { sortBy } from './sortBy';
+
+describe('sortBy', () => {
+  const users = [
+    { user: 'foo', age: 24 },
+    { user: 'bar', age: 7 },
+    { user: 'foo', age: 8 },
+    { user: 'bar', age: 29 },
+  ];
+
+  it('should stable sort objects by a single property in ascending order', () => {
+    expect(sortBy(users, ['user'])).toEqual([
+      { user: 'bar', age: 7 },
+      { user: 'bar', age: 29 },
+      { user: 'foo', age: 24 },
+      { user: 'foo', age: 8 },
+    ]);

----------------------------------------

File: src/array/sortBy.ts
Status: added
Changes: +53 -0
Diff:
@@ -0,0 +1,53 @@
+import { compareValues } from '../_internal/compareValues';
+
+/**
+ * Sorts an array of objects based on the given `criteria`.
+ *
+ * - If you provide keys, it sorts the objects by the values of those keys.
+ * - If you provide functions, it sorts based on the values returned by those functions.
+ *
+ * The function returns the array of objects sorted in ascending order.
+ * If two objects have the same value for the current criterion, it uses the next criterion to determine their order.
+ *
+ * @template T - The type of the objects in the array.
+ * @param {T[]} arr - The array of objects to be sorted.
+ * @param {Array<((item: T) => unknown) | keyof T>} criteria - The criteria for sorting. This can be an array of object keys or functions that return values used for sorting.
+ * @returns {T[]} - The sorted array.
+ *
+ * @example

----------------------------------------

File: src/array/unzipWith.ts
Status: modified
Changes: +1 -1
Diff:
@@ -5,7 +5,7 @@
  * @param {T[][]} target - The nested array to unzip. This is an array of arrays,
  * where each inner array contains elements to be unzipped.
  * @param {(...args: T[]) => R} iteratee - A function to transform the unzipped elements.
- * @returns {R[]} A new array of unzipped and transformed elements. 
+ * @returns {R[]} A new array of unzipped and transformed elements.
  *
  * @example
  * const nestedArray = [[1, 2], [3, 4], [5, 6]];

----------------------------------------

File: src/compat/_internal/LARGE_ARRAY_SIZE.ts
Status: modified
Changes: +1 -1
Diff:
@@ -1 +1 @@
-export const LARGE_ARRAY_SIZE = 200;
\ No newline at end of file
+export const LARGE_ARRAY_SIZE = 200;

----------------------------------------

File: src/compat/_internal/arrayViews.ts
Status: modified
Changes: +2 -5
Diff:
@@ -1,6 +1,3 @@
-import { typedArrays } from "./typedArrays";
+import { typedArrays } from './typedArrays';
 
-export const arrayViews = [
-  ...typedArrays,
-  'DataView'
-];
\ No newline at end of file
+export const arrayViews = [...typedArrays, 'DataView'];

----------------------------------------

File: src/compat/_internal/empties.ts
Status: modified
Changes: +2 -2
Diff:
@@ -1,3 +1,3 @@
-import { falsey } from "./falsey.ts";
+import { falsey } from './falsey.ts';
 
-export const empties = [[], {}].concat(falsey.slice(1));
\ No newline at end of file
+export const empties = [[], {}].concat(falsey.slice(1));

----------------------------------------

File: src/compat/_internal/getSymbols.ts
Status: modified
Changes: +5 -4
Diff:
@@ -1,4 +1,5 @@
-export function getSymbols(object: {}) {
-  return Object.getOwnPropertySymbols(object)
-    .filter(symbol => object.propertyIsEnumerable(symbol));
-}
\ No newline at end of file
+export function getSymbols(object: any) {
+  return Object.getOwnPropertySymbols(object).filter(symbol =>
+    Object.prototype.propertyIsEnumerable.call(object, symbol)
+  );

----------------------------------------

File: src/compat/_internal/identity.ts
Status: modified
Changes: +1 -1
Diff:
@@ -1,3 +1,3 @@
 export function identity<T>(x: T) {
   return x;
-}
\ No newline at end of file
+}

----------------------------------------

File: src/compat/_internal/isDeepKey.spec.ts
Status: modified
Changes: +10 -10
Diff:
@@ -1,16 +1,16 @@
-import { describe, expect, it } from "vitest";
-import { isDeepKey } from "./isDeepKey";
+import { describe, expect, it } from 'vitest';
+import { isDeepKey } from './isDeepKey';
 
-describe("isDeepKey function", () => {
-  it("returns true for deep keys", () => {
-    expect(isDeepKey("a.b")).toBe(true);
-    expect(isDeepKey("a[b]")).toBe(true);

----------------------------------------

File: src/compat/_internal/isIndex.ts
Status: modified
Changes: +2 -2
Diff:
@@ -1,4 +1,4 @@
-const IS_UNSIGNED_INTEGER = /^(?:0|[1-9]\d*)$/
+const IS_UNSIGNED_INTEGER = /^(?:0|[1-9]\d*)$/;
 
 export function isIndex(value: PropertyKey) {
   switch (typeof value) {
@@ -12,4 +12,4 @@ export function isIndex(value: PropertyKey) {
       return IS_UNSIGNED_INTEGER.test(value);
     }
   }

----------------------------------------

File: src/compat/_internal/numberProto.ts
Status: modified
Changes: +1 -1
Diff:
@@ -1 +1 @@
-export const numberProto: any = Number.prototype;
\ No newline at end of file
+export const numberProto: any = Number.prototype;

----------------------------------------

File: src/compat/_internal/stubZero.ts
Status: added
Changes: +3 -0
Diff:
@@ -0,0 +1,3 @@
+export const stubZero = function () {
+  return 0;
+};

----------------------------------------

File: src/compat/_internal/tags.ts
Status: modified
Changes: +2 -2
Diff:
@@ -12,7 +12,7 @@ export const functionTag = '[object Function]';
 export const arrayBufferTag = '[object ArrayBuffer]';
 export const objectTag = '[object Object]';
 export const errorTag = '[object Error]';
-export const dataViewTag = '[object DataView]'
+export const dataViewTag = '[object DataView]';
 export const uint8ArrayTag = '[object Uint8Array]';
 export const uint8ClampedArrayTag = '[object Uint8ClampedArray]';
 export const uint16ArrayTag = '[object Uint16Array]';
@@ -23,4 +23,4 @@ export const int16ArrayTag = '[object Int16Array]';

----------------------------------------

File: src/compat/_internal/toKey.spec.ts
Status: added
Changes: +22 -0
Diff:
@@ -0,0 +1,22 @@
+import { describe, expect, it } from 'vitest';
+import { toKey } from './toKey';
+
+describe('toKey', () => {
+  it('converts strings to strings', () => {
+    expect(toKey('asd')).toBe('asd');
+  });
+
+  it('converts symbols to symbols', () => {

----------------------------------------

File: src/compat/_internal/toKey.ts
Status: added
Changes: +20 -0
Diff:
@@ -0,0 +1,20 @@
+import { isSymbol } from '../predicate/isSymbol';
+
+/**
+ * Converts `value` to a string key if it's not a string or symbol.
+ *
+ * @private
+ * @param {*} value The value to inspect.
+ * @returns {string|symbol} Returns the key.
+ */

----------------------------------------

File: src/compat/_internal/toPath.spec.ts
Status: modified
Changes: +24 -24
Diff:
@@ -1,49 +1,49 @@
-import { describe, expect, it } from "vitest";
-import { toPath } from "./toPath";
+import { describe, expect, it } from 'vitest';
+import { toPath } from './toPath';
 
-describe("toPath function", () => {
-  it("converts dot-separated keys correctly", () => {
-    const result = toPath("a.b.c");
-    expect(result).toEqual(["a", "b", "c"]);
+describe('toPath function', () => {
+  it('converts dot-separated keys correctly', () => {
+    const result = toPath('a.b.c');
+    expect(result).toEqual(['a', 'b', 'c']);
   });
 
-  it("converts bracket notation keys correctly", () => {
-    const result = toPath("a[b][c]");
-    expect(result).toEqual(["a", "b", "c"]);
+  it('converts bracket notation keys correctly', () => {
+    const result = toPath('a[b][c]');
+    expect(result).toEqual(['a', 'b', 'c']);
   });
 

----------------------------------------

File: src/compat/array/compact.spec.ts
Status: modified
Changes: +3 -3
Diff:
@@ -1,6 +1,6 @@
-import { describe, expect, it } from "vitest";
-import { compact } from "../../array/compact";
-import { falsey } from "../_internal/falsey";
+import { describe, expect, it } from 'vitest';
+import { compact } from '../../array/compact';
+import { falsey } from '../_internal/falsey';
 
 /**
  * @see https://github.com/lodash/lodash/blob/6a2cc1dfcf7634fea70d1bc5bd22db453df67b42/test/compact.spec.js#L1

----------------------------------------

File: src/compat/array/difference.spec.ts
Status: modified
Changes: +6 -7
Diff:
@@ -1,13 +1,12 @@
-import { describe, expect, it } from "vitest";
-import { difference } from "./difference";
-import { LARGE_ARRAY_SIZE } from "../_internal/LARGE_ARRAY_SIZE";
-import { range } from "../../math/range";
+import { describe, expect, it } from 'vitest';
+import { difference } from './difference';
+import { LARGE_ARRAY_SIZE } from '../_internal/LARGE_ARRAY_SIZE';
+import { range } from '../../math/range';
 
 /**
  * @see https://github.com/lodash/lodash/blob/6a2cc1dfcf7634fea70d1bc5bd22db453df67b42/test/difference-methods.spec.js#L1

----------------------------------------

File: src/compat/array/difference.ts
Status: modified
Changes: +1 -1
Diff:
@@ -6,4 +6,4 @@ export function difference<T>(arr: readonly T[], ...values: Array<readonly T[]>)
   const arr2 = flatten(values);
 
   return differenceToolkit(arr1, arr2);
-}
\ No newline at end of file
+}

----------------------------------------

File: src/compat/array/find.spec.ts
Status: added
Changes: +78 -0
Diff:
@@ -0,0 +1,78 @@
+import { describe, expect, it } from 'vitest';
+import { empties } from '../_internal/empties';
+import { find } from './find';
+import { slice } from '../_internal/slice';
+
+describe('find', () => {
+  const objects = [
+    { a: 0, b: 0 },
+    { a: 1, b: 1 },
+    { a: 2, b: 2 },
+  ];
+
+  it(`should return the found value`, () => {
+    expect(find(objects, object => object.a)).toEqual(objects[1]);
+  });
+
+  it(`should return undefined if value is not found`, () => {
+    expect(find(objects, object => object.a === 3)).toEqual(undefined);
+  });
+
+  it(`find should work with \`matches\` shorthands`, () => {
+    expect(find(objects, { b: 2 })).toBe(objects[2]);
+  });
+
+  it(`find should work with \`matchesProperty\` shorthands`, () => {

----------------------------------------

File: src/compat/array/find.ts
Status: added
Changes: +186 -0
Diff:
@@ -0,0 +1,186 @@
+import { property } from '../object/property.ts';
+import { matches } from '../predicate/matches.ts';
+import { matchesProperty } from '../predicate/matchesProperty.ts';
+
+/**
+ * Finds the first item in an array that matches the given predicate function.
+ *
+ * @template T
+ * @param {T[]} arr - The array to search through.
+ * @param {(item: T, index: number, arr: T[]) => unknown} doesMatch - A function that takes an item, its index, and the array, and returns a truthy value if the item matches the criteria.
+ * @returns {T | undefined} - The first item that matches the predicate, or `undefined` if no match is found.
+ *
+ * @example
+ * // Using a predicate function
+ * const items = [1, 2, 3, 4, 5];
+ * const result = find(items, (item) => item > 3);
+ * console.log(result); // 4
+ */
+export function find<T>(
+  arr: readonly T[],
+  doesMatch: (item: T, index: number, arr: readonly T[]) => unknown
+): T | undefined;
+
+/**
+ * Finds the first item in an array that matches the given partial object.
+ *
+ * @template T
+ * @param {readonly T[]} arr - The array to search through.
+ * @param {Partial<T>} doesMatch - A partial object that specifies the properties to match.
+ * @returns {T | undefined} - The first item that matches the partial object, or `undefined` if no match is found.
+ *
+ * @example
+ * // Using a partial object
+ * const items = [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];
+ * const result = find(items, { name: 'Bob' });
+ * console.log(result); // { id: 2, name: 'Bob' }
+ */
+export function find<T>(arr: readonly T[], doesMatch: Partial<T>): T | undefined;
+
+/**
+ * Finds the first item in an array that matches a property with a specific value.
+ *
+ * @template T
+ * @param {readonly T[]} arr - The array to search through.
+ * @param {[keyof T, unknown]} doesMatchProperty - An array where the first element is the property key and the second element is the value to match.
+ * @returns {T | undefined} - The first item that has the specified property value, or `undefined` if no match is found.
+ *
+ * @example
+ * // Using a property-value pair
+ * const items = [{ id: 1, name: 'Alice' }, { id: 2, name: 'Bob' }];
+ * const result = find(items, ['name', 'Alice']);
+ * console.log(result); // { id: 1, name: 'Alice' }
+ */
+export function find<T>(arr: readonly T[], doesMatchProperty: [keyof T, unknown]): T | undefined;
+
+/**
+ * Finds the first item in an array that has a specific property, where the property name is provided as a string.
+ *
+ * @template T
+ * @param {readonly T[]} arr - The array to search through.
+ * @param {string} propertyToCheck - The property name to check.

----------------------------------------

File: src/compat/array/findIndex.spec.ts
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+import { describe, expect, it } from 'vitest';
+import { empties } from '../_internal/empties';
+import { findIndex } from './findIndex';
+import { slice } from '../_internal/slice';
+
+describe('findIndex', () => {
+  const objects = [
+    { a: 0, b: 0 },
+    { a: 1, b: 1 },
+    { a: 2, b: 2 },
+  ];
+
+  it(`should return the found value`, () => {
+    expect(findIndex(objects, object => object.a)).toEqual(1);

----------------------------------------

File: src/compat/array/findIndex.ts
Status: added
Changes: +94 -0
Diff:
@@ -0,0 +1,94 @@
+import { property } from '../object/property.ts';
+import { matches } from '../predicate/matches.ts';
+import { matchesProperty } from '../predicate/matchesProperty.ts';
+
+/**
+ * Finds the index of the first item in an array that matches the given predicate function.
+ *
+ * @template T
+ * @param {T[]} arr - The array to search through.
+ * @param {(item: T, index: number, arr: T[]) => unknown} doesMatch - A function that takes an item, its index, and the array, and returns a truthy value if the item matches the criteria.
+ * @returns {number} - The index of the first item that matches the predicate, or `undefined` if no match is found.
+ *
+ * @example
+ * // Using a predicate function
+ * const items = [1, 2, 3, 4, 5];
+ * const result = find(items, (item) => item > 3);
+ * console.log(result); // 4
+ */
+export function findIndex<T>(
+  arr: readonly T[],
+  doesMatch: (item: T, index: number, arr: readonly T[]) => unknown
+): number;
+
+/**
+ * Finds the index of the first item in an array that matches the given partial object.
+ *
+ * @template T
+ * @param {readonly T[]} arr - The array to search through.
+ * @param {Partial<T>} doesMatch - A partial object that specifies the properties to match.
+ * @returns {number} - The index of the first item that matches the partial object, or `undefined` if no match is found.

----------------------------------------

File: src/compat/array/indexOf.spec.ts
Status: added
Changes: +72 -0
Diff:
@@ -0,0 +1,72 @@
+import { describe, expect, it } from 'vitest';
+import { indexOf } from './indexOf';
+import { falsey } from '../_internal/falsey';
+import { stubZero } from '../_internal/stubZero';
+
+/**
+ * @see https://github.com/lodash/lodash/blob/6a2cc1dfcf7634fea70d1bc5bd22db453df67b42/test/indexOf.spec.js
+ */
+describe('indexOf', () => {
+  const array = [1, 2, 3, 1, 2, 3];
+
+  it('should return the index of the first matched value', () => {
+    expect(indexOf(array, 3)).toBe(2);
+  });
+
+  it('should work with a positive `fromIndex`', () => {
+    expect(indexOf(array, 1, 2)).toBe(3);
+  });
+
+  it('should work with a `fromIndex` >= `length`', () => {
+    const values = [6, 8, 2 ** 32, Infinity];
+    const expected = values.map(() => [-1, -1, -1]);
+

----------------------------------------

File: src/compat/array/indexOf.ts
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+/**
+ * Finds the index of the first occurrence of a value in an array.
+ *
+ * This method is similar to `Array.prototype.indexOf`, but it also finds `NaN` values.
+ * It uses strict equality (`===`) to compare elements.
+ *
+ * @template T - The type of elements in the array.
+ * @template U - The type of the value to search for.
+ * @param {T[] | null | undefined} array - The array to search.
+ * @param {T} searchElement - The value to search for.
+ * @param {number} [fromIndex] - The index to start the search at.
+ * @returns {number} The index (zero-based) of the first occurrence of the value in the array, or `-1` if the value is not found.
+ *
+ * @example

----------------------------------------

File: src/compat/array/zipObjectDeep.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,13 +1,13 @@
-import { zip } from "../../array/zip.ts";
-import { set } from "../object/set.ts";
+import { zip } from '../../array/zip.ts';
+import { set } from '../object/set.ts';
 
 /**
  * Creates a deeply nested object given arrays of paths and values.
  *
  * This function takes two arrays: one containing arrays of property paths, and the other containing corresponding values.

----------------------------------------

File: src/compat/function/ary.ts
Status: modified
Changes: +7 -2
Diff:
@@ -5,10 +5,15 @@ import { ary as aryToolkit } from '../../function/ary.ts';
  *
  * @template F - The type of the function.
  * @param {F} func - The function to cap arguments for.
+ * @param guard
  * @param {number} n - The arity cap.
  * @returns {(...args: any[]) => ReturnType<F>} Returns the new capped function.
  */
-export function ary<F extends (...args: any[]) => any>(func: F, n: number = func.length, guard?: unknown): ((...args: any[]) => ReturnType<F>) {
+export function ary<F extends (...args: any[]) => any>(

----------------------------------------

File: src/compat/function/bind.spec.ts
Status: modified
Changes: +4 -3
Diff:
@@ -2,6 +2,7 @@ import { describe, it, expect } from 'vitest';
 import { bind } from './bind';
 import { isEqual } from '../../predicate/isEqual';
 
+// eslint-disable-next-line
 function fn(this: any, ..._: any[]) {
   const result = [this];
   // eslint-disable-next-line prefer-rest-params
@@ -79,7 +80,7 @@ describe('bind', () => {
 
   it('should create a function with a `length` of `0`', () => {

----------------------------------------

File: src/compat/function/bind.ts
Status: modified
Changes: +4 -2
Diff:
@@ -8,6 +8,8 @@
  * @param {(...args: any[]) => any} func  The function to bind.
  * @param {any} thisArg  The `this` binding of `func`.
  * @param {any[]} partials  The arguments to be partially applied.
+ * @param thisObj
+ * @param {...any} partialArgs
  * @returns {(...args: any[]) => any} Returns the new bound function.
  *
  * @example
@@ -23,7 +25,7 @@

----------------------------------------

File: src/compat/function/rest.spec.ts
Status: added
Changes: +50 -0
Diff:
@@ -0,0 +1,50 @@
+import { describe, it, expect } from 'vitest';
+import { rest } from './rest';
+
+describe('rest', () => {
+  // eslint-disable-next-line @typescript-eslint/no-unused-vars
+  function fn(_a: unknown, _b: unknown, _c: unknown) {
+    // eslint-disable-next-line prefer-rest-params
+    return Array.from(arguments);
+  }
+
+  it('should apply a rest parameter to `func`', () => {
+    const restFn = rest(fn);
+    expect(restFn(1, 2, 3, 4)).toEqual([1, 2, [3, 4]]);
+  });
+
+  it('should work with `start`', () => {

----------------------------------------

File: src/compat/function/rest.ts
Status: added
Changes: +44 -0
Diff:
@@ -0,0 +1,44 @@
+import { rest as restToolkit } from '../../function/rest.ts';
+
+/**
+ * Creates a function that transforms the arguments of the provided function `func`.
+ * The transformed arguments are passed to `func` such that the arguments starting from a specified index
+ * are grouped into an array, while the previous arguments are passed as individual elements.
+ *
+ * @template F - The type of the function being transformed.
+ * @param {F} func - The function whose arguments are to be transformed.
+ * @param {number} [startIndex=func.length - 1] - The index from which to start grouping the remaining arguments into an array.
+ *                                            Defaults to `func.length - 1`, grouping all arguments after the last parameter.
+ * @returns {(...args: any[]) => ReturnType<F>} A new function that, when called, returns the result of calling `func` with the transformed arguments.
+ *
+ * The transformed arguments are:

----------------------------------------

File: src/compat/index.ts
Status: modified
Changes: +8 -0
Diff:
@@ -28,19 +28,24 @@ export { chunk } from './array/chunk.ts';
 export { concat } from './array/concat.ts';
 export { difference } from './array/difference.ts';
 export { fill } from './array/fill.ts';
+export { find } from './array/find.ts';
+export { findIndex } from './array/findIndex.ts';
 export { flatten } from './array/flatten.ts';
 export { flattenDeep } from './array/flattenDeep.ts';
 export { flattenDepth } from './array/flattenDepth.ts';
 export { orderBy } from './array/orderBy.ts';
 export { size } from './array/size.ts';
 export { zipObjectDeep } from './array/zipObjectDeep.ts';
 export { head as first } from '../array/head.ts';

----------------------------------------

File: src/compat/math/min.spec.ts
Status: modified
Changes: +2 -3
Diff:
@@ -1,6 +1,5 @@
-import { describe, expect, it } from "vitest";
-import { min } from "./min";
-
+import { describe, expect, it } from 'vitest';
+import { min } from './min';
 
 describe('min', () => {
   it('should return the largest value from a collection', () => {

----------------------------------------

File: src/compat/object/cloneDeep.ts
Status: modified
Changes: +1 -2
Diff:
@@ -78,9 +78,8 @@ export function cloneDeep<T>(obj: T): T {
       return result as T;
     }
 
-
     default: {
       return cloneDeepToolkit(obj);
     }
   }
-}

----------------------------------------

File: src/compat/object/get.ts
Status: modified
Changes: +98 -57
Diff:
@@ -1,192 +1,233 @@
-import { isDeepKey } from "../_internal/isDeepKey.ts";
-import { toPath } from "../_internal/toPath.ts";
-import type { Get } from "./get.types.ts";
+import { isDeepKey } from '../_internal/isDeepKey.ts';
+import { toKey } from '../_internal/toKey.ts';
+import { toPath } from '../_internal/toPath.ts';
+import type { Get } from './get.types.ts';
 
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K - The type of the key in the object.
  * @template D - The type of the default value.
- * 
+ *
  * @param {T} object - The object to query.
  * @param {K | [K]} path - The path of the property to get.
  * @returns {T[K]} - Returns the resolved value.
  */
 export function get<T extends object, K extends keyof T>(object: T, path: K | [K]): T[K];
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K - The type of the key in the object.
- * 
+ *
  * @param {T | null | undefined} object - The object to query.
  * @param {K | [K]} path - The path of the property to get.
  * @returns {T[K] | undefined} - Returns the resolved value.
  */
 export function get<T extends object, K extends keyof T>(object: T | null | undefined, path: K | [K]): T[K] | undefined;
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K - The type of the key in the object.
  * @template D - The type of the default value.
- * 
+ *
  * @param {T | null | undefined} object - The object to query.
  * @param {K | [K]} path - The path of the property to get.
  * @param {D} defaultValue - The value returned if the resolved value is undefined.
  * @returns {Exclude<T[K], undefined> | D} - Returns the resolved value.
  */
-export function get<T extends object, K extends keyof T, D>(object: T | null | undefined, path: K | [K], defaultValue: D): Exclude<T[K], undefined> | D;
+export function get<T extends object, K extends keyof T, D>(
+  object: T | null | undefined,
+  path: K | [K],
+  defaultValue: D
+): Exclude<T[K], undefined> | D;
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K1 - The type of the first key in the object.
  * @template K2 - The type of the second key in the object.
- * 
+ *
  * @param {T} object - The object to query.
  * @param {[K1, K2]} path - The path of the property to get.
  * @returns {T[K1][K2]} - Returns the resolved value.
  */
 export function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(object: T, path: [K1, K2]): T[K1][K2];
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K1 - The type of the first key in the object.
  * @template K2 - The type of the second key in the object.
- * 
+ *
  * @param {T | null | undefined} object - The object to query.
  * @param {[K1, K2]} path - The path of the property to get.
  * @returns {T[K1][K2] | undefined} - Returns the resolved value.
  */
-export function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(object: T | null | undefined, path: [K1, K2]): T[K1][K2] | undefined;
+export function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1]>(
+  object: T | null | undefined,
+  path: [K1, K2]
+): T[K1][K2] | undefined;
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K1 - The type of the first key in the object.
  * @template K2 - The type of the second key in the object.
  * @template D - The type of the default value.
- * 
+ *
  * @param {T | null | undefined} object - The object to query.
  * @param {[K1, K2]} path - The path of the property to get.
  * @param {D} defaultValue - The value returned if the resolved value is undefined.
  * @returns {Exclude<T[K1][K2], undefined> | D} - Returns the resolved value.
  */
-export function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], D>(object: T | null | undefined, path: [K1, K2], defaultValue: D): Exclude<T[K1][K2], undefined> | D;
+export function get<T extends object, K1 extends keyof T, K2 extends keyof T[K1], D>(
+  object: T | null | undefined,
+  path: [K1, K2],
+  defaultValue: D
+): Exclude<T[K1][K2], undefined> | D;
 /**
  * Retrieves the value at a given path from an object. If the resolved value is undefined, the defaultValue is returned instead.
- * 
+ *
  * @template T - The type of the object.
  * @template K1 - The type of the first key in the object.
  * @template K2 - The type of the second key in the object.
  * @template K3 - The type of the third key in the object.
- * 
+ *

----------------------------------------

File: src/compat/object/get.types.ts
Status: modified
Changes: +22 -26
Diff:
@@ -4,35 +4,31 @@
 type GetIndexedField<T, K> = K extends keyof T
   ? T[K]
   : K extends `${number}`
-  ? 'length' extends keyof T
-  ? number extends T['length']
-  ? number extends keyof T
-  ? T[number]
-  : undefined
-  : undefined
-  : undefined
-  : undefined;
+    ? 'length' extends keyof T
+      ? number extends T['length']
+        ? number extends keyof T
+          ? T[number]
+          : undefined
+        : undefined
+      : undefined

----------------------------------------

File: src/compat/object/has.spec.ts
Status: added
Changes: +207 -0
Diff:
@@ -0,0 +1,207 @@
+import { describe, expect, it } from 'vitest';
+import { toArgs } from '../_internal/toArgs';
+import { has } from './has';
+import { stubTrue } from '../_internal/stubTrue';
+import { range } from '../../math/range';
+import { args } from '../_internal/args';
+import { symbol } from '../_internal/symbol';
+import { stubFalse } from '../_internal/stubFalse';
+
+describe('has', () => {
+  it(`should check for own properties`, () => {
+    const object = { a: 1 };
+
+    ['a', ['a']].forEach(path => {
+      expect(has(object, path)).toBe(true);
+    });
+  });
+
+  it(`should not use the \`hasOwnProperty\` method of \`object\``, () => {
+    const object = { hasOwnProperty: null, a: 1 };
+    expect(has(object, 'a')).toBe(true);
+  });
+
+  it(`should support deep paths`, () => {
+    const object = { a: { b: 2 } };
+
+    ['a.b', ['a', 'b']].forEach(path => {
+      expect(has(object, path)).toBe(true);
+    });
+
+    ['a.a', ['a', 'a']].forEach(path => {
+      expect(has(object, path)).toBe(false);
+    });
+  });
+
+  it(`should coerce \`path\` to a string`, () => {
+    function fn() {}
+    fn.toString = () => 'fn';
+
+    const object = { null: 1, undefined: 2, fn: 3, '[object Object]': 4 };
+    const paths: any[] = [null, undefined, fn, {}];
+    const expected = paths.map(stubTrue);
+
+    range(2).forEach(index => {
+      const actual = paths.map(path => has(object, index ? [path] : path));
+
+      expect(actual).toEqual(expected);
+    });
+  });
+
+  it(`should work with \`arguments\` objects`, () => {
+    expect(has(args, 1)).toBe(true);
+  });
+
+  it(`should work with a non-string \`path\``, () => {
+    const array = [1, 2, 3];
+
+    [1, [1]].forEach(path => {
+      expect(has(array, path)).toBe(true);
+    });
+  });
+
+  it(`should preserve the sign of \`0\``, () => {
+    const object = { '-0': 'a', 0: 'b' };
+    const props = [-0, Object(-0), 0, Object(0)];
+    const expected = props.map(stubTrue);
+
+    const actual = props.map(key => has(object, key));

----------------------------------------

File: src/compat/object/has.ts
Status: added
Changes: +70 -0
Diff:
@@ -0,0 +1,70 @@
+import { isDeepKey } from '../_internal/isDeepKey.ts';
+import { isIndex } from '../_internal/isIndex.ts';
+import { toPath } from '../_internal/toPath.ts';
+import { isArguments } from '../predicate/isArguments.ts';
+
+/**
+ * Checks if a given path exists within an object.
+ *
+ * You can provide the path as a single property key, an array of property keys,
+ * or a string representing a deep path.
+ *
+ * If the path is an index and the object is an array or an arguments object, the function will verify
+ * if the index is valid and within the bounds of the array or arguments object, even if the array or
+ * arguments object is sparse (i.e., not all indexes are defined).
+ *
+ * @param {object} object - The object to query.
+ * @param {PropertyKey | PropertyKey[]} path - The path to check. This can be a single property key,
+ *        an array of property keys, or a string representing a deep path.
+ * @returns {boolean} Returns `true` if the path exists in the object, `false` otherwise.
+ *
+ * @example
+ *

----------------------------------------

File: src/compat/object/mapValues.spec.ts
Status: modified
Changes: +1 -2
Diff:
@@ -1,4 +1,3 @@
-
 import { describe, expect, it } from 'vitest';
 import { mapValues } from './mapValues';
 import { isEqual } from '../../predicate/isEqual';
@@ -7,7 +6,6 @@ describe('mapValues', () => {
   const array = [1, 2];
   const object = { a: 1, b: 2 };
 
-

----------------------------------------

File: src/compat/object/merge.spec.ts
Status: modified
Changes: +7 -6
Diff:
@@ -71,10 +71,10 @@ describe('merge', () => {
   });
 
   it('should treat sparse array sources as dense', () => {
-    var array = [1];
+    const array = [1];
     array[2] = 3;
 
-    var actual = merge([], array),
+    const actual = merge([], array),
       expected: any = array.slice();
 
     expected[1] = undefined;
@@ -250,17 +250,17 @@ describe('merge', () => {

----------------------------------------

File: src/compat/object/merge.ts
Status: modified
Changes: +1 -6
Diff:
@@ -1,12 +1,6 @@
 import { noop } from '../../function/noop.ts';
 import { mergeWith } from './mergeWith.ts';
 
-declare var Buffer:
-  | {
-      isBuffer: (a: any) => boolean;
-    }
-  | undefined;
-

----------------------------------------

File: src/compat/object/mergeWith.spec.ts
Status: modified
Changes: +1 -0
Diff:
@@ -35,6 +35,7 @@ describe('mergeWith', () => {
     mergeWith({}, { a: { b: 2 } }, function () {
       // eslint-disable-next-line
       // @ts-ignore
+      // eslint-disable-next-line
       actual = last(arguments);
     });
 

----------------------------------------

File: src/compat/object/mergeWith.ts
Status: modified
Changes: +7 -3
Diff:
@@ -5,7 +5,7 @@ import { isPlainObject } from '../predicate/isPlainObject.ts';
 import { isTypedArray } from '../predicate/isTypedArray.ts';
 import { cloneDeep } from './cloneDeep.ts';
 
-declare var Buffer:
+declare let Buffer:
   | {
       isBuffer: (a: any) => boolean;
     }
@@ -33,6 +33,7 @@ declare var Buffer:
  *
  * @param {T} target - The target object into which the source object properties will be merged. This object is modified in place.
  * @param {S} source - The first source object whose properties will be merged into the target object.
+ * @param merge
  * @returns {T & S} The updated target object with properties from the source object(s) merged in.
  *
  * @template T - Type of the target object.
@@ -89,6 +90,7 @@ export function mergeWith<T, S>(
  * @param {O} object - The target object into which the source object properties will be merged. This object is modified in place.

----------------------------------------

File: src/compat/object/property.ts
Status: modified
Changes: +4 -4
Diff:
@@ -1,4 +1,4 @@
-import { get } from "./get.ts";
+import { get } from './get.ts';
 
 /**
  * Creates a function that returns the value at a given path of an object.
@@ -10,7 +10,7 @@ import { get } from "./get.ts";
  * const getObjectValue = property('a.b.c');
  * const result = getObjectValue({ a: { b: { c: 3 } } });
  * console.log(result); // => 3

----------------------------------------

File: src/compat/object/set.ts
Status: modified
Changes: +3 -7
Diff:
@@ -1,5 +1,5 @@
-import { isIndex } from "../_internal/isIndex.ts";
-import { toPath } from "../_internal/toPath.ts";
+import { isIndex } from '../_internal/isIndex.ts';
+import { toPath } from '../_internal/toPath.ts';
 
 /**
  * Sets the value at the specified path of the given object. If any part of the path does not exist, it will be created.
@@ -30,11 +30,7 @@ import { toPath } from "../_internal/toPath.ts";
  */

----------------------------------------

File: src/compat/predicate/isArray.spec.ts
Status: modified
Changes: +3 -3
Diff:
@@ -10,16 +10,16 @@ describe('isArray', function () {
 
   it('returns false if value is not an array', () => {
     expect(isArray('abc')).toBe(false);
-    expect(isArray(() => { })).toBe(false);
+    expect(isArray(() => {})).toBe(false);
   });
 
   it('can be used with TypeScript as a type predicate', () => {
-    const arr1 = ['abc', () => { }, [1, 2, 3]];

----------------------------------------

File: src/compat/predicate/isArrayLike.spec.ts
Status: modified
Changes: +2 -2
Diff:
@@ -20,8 +20,8 @@ describe('isArrayLike', () => {
     expect(actual).toEqual(expected);
 
     const slice = Array.prototype.slice;
-    const asyncFunc = async function () { };
-    const genFunc = function* () { };
+    const asyncFunc = async function () {};
+    const genFunc = function* () {};
     const symbol = Symbol ? Symbol('a') : undefined;
 

----------------------------------------

File: src/compat/predicate/isArrayLike.ts
Status: modified
Changes: +2 -3
Diff:
@@ -1,4 +1,4 @@
-import { isLength } from "../../predicate/isLength.ts";
+import { isLength } from '../../predicate/isLength.ts';
 
 /**
  * Checks if `value` is array-like.
@@ -15,6 +15,5 @@ import { isLength } from "../../predicate/isLength.ts";
  * isArrayLike(undefined); // false
  */
 export function isArrayLike(value: unknown): value is ArrayLike<unknown> {

----------------------------------------

File: src/compat/predicate/isBoolean.spec.ts
Status: modified
Changes: +2 -2
Diff:
@@ -14,9 +14,9 @@ describe('isBoolean', () => {
   });
 
   it('should return `false` for non-booleans', () => {
-    const expected = falsey.map((value) => value === false);
+    const expected = falsey.map(value => value === false);
 
-    const actual = falsey.map((value, index) => isBoolean(value));
+    const actual = falsey.map(value => isBoolean(value));
 

----------------------------------------

File: src/compat/predicate/isBoolean.ts
Status: modified
Changes: +1 -2
Diff:
@@ -1,5 +1,4 @@
-import { getTag } from "../_internal/getTag.ts";
-
+import { getTag } from '../_internal/getTag.ts';
 
 /**
  * Checks if the given value is boolean.

----------------------------------------

File: src/compat/predicate/isEqual.spec.ts
Status: modified
Changes: +43 -84
Diff:
@@ -1,9 +1,9 @@
-import { describe, expect, it } from "vitest";
-import { noop } from "../../function/noop";
-import { stubFalse } from "../_internal/stubFalse";
-import { isEqual } from "es-toolkit/compat";
-import { args } from "../_internal/args";
-import { arrayViews } from "../_internal/arrayViews";
+import { describe, expect, it } from 'vitest';
+import { noop } from '../../function/noop';
+import { stubFalse } from '../_internal/stubFalse';
+import { isEqual } from 'es-toolkit/compat';
+import { args } from '../_internal/args';
+import { arrayViews } from '../_internal/arrayViews';
 
 describe('isEqual', () => {
   const symbol1 = Symbol ? Symbol('a') : true;
@@ -55,9 +55,9 @@ describe('isEqual', () => {
       [undefined, '', false],
     ];
 
-    const expected = pairs.map((pair) => pair[2]);
+    const expected = pairs.map(pair => pair[2]);
 
-    const actual = pairs.map((pair) => isEqual(pair[0], pair[1]));
+    const actual = pairs.map(pair => isEqual(pair[0], pair[1]));
 
     expect(actual).toEqual(expected);
   });
@@ -82,24 +82,8 @@ describe('isEqual', () => {
 
     expect(isEqual(array1, array2)).toBe(true);
 
-    array1 = [
-      Object(1),
-      false,
-      Object('a'),
-      /x/,
-      new Date(2012, 4, 23),
-      ['a', 'b', [Object('c')]],
-      { a: 1 },
-    ];
-    array2 = [
-      1,
-      Object(false),
-      'a',
-      /x/,
-      new Date(2012, 4, 23),
-      ['a', Object('b'), ['c']],
-      { a: 1 },
-    ];
+    array1 = [Object(1), false, Object('a'), /x/, new Date(2012, 4, 23), ['a', 'b', [Object('c')]], { a: 1 }];
+    array2 = [1, Object(false), 'a', /x/, new Date(2012, 4, 23), ['a', Object('b'), ['c']], { a: 1 }];
 
     expect(isEqual(array1, array2)).toBe(true);
 
@@ -127,7 +111,7 @@ describe('isEqual', () => {
       array1.some =
       array1.reduce =
       array1.reduceRight =
-      null;
+        null;
 
     array2.concat =
       array2.join =
@@ -138,7 +122,7 @@ describe('isEqual', () => {
       array2.sort =
       array2.splice =
       array2.unshift =
-      null;
+        null;
 
     expect(isEqual(array1, array2)).toBe(true);
 
@@ -431,12 +415,16 @@ describe('isEqual', () => {
 
   it('should compare `arguments` objects', () => {
     const args1 = (function () {
+      // eslint-disable-next-line
       return arguments;
     })();
     const args2 = (function () {

----------------------------------------

File: src/compat/predicate/isMatch.spec.ts
Status: modified
Changes: +7 -7
Diff:
@@ -22,7 +22,7 @@ describe('isMatch', () => {
     }
 
     interface FooConstructor {
-      new(): Foo;
+      new (): Foo;
     }
 
     const Foo = function Foo(this: Foo) {
@@ -42,7 +42,7 @@ describe('isMatch', () => {
     }
 
     interface FooConstructor {
-      new(): Foo;
+      new (): Foo;
     }
 
     const Foo = function Foo(this: Foo) {

----------------------------------------

File: src/compat/predicate/isMatch.ts
Status: modified
Changes: +1 -1
Diff:
@@ -6,7 +6,7 @@ import { isSetMatch } from '../_internal/isSetMatch.ts';
 /**
  * Checks if the target matches the source by comparing their structures and values.
  * This function supports deep comparison for objects, arrays, maps, and sets.
- * 
+ *
  * @param {unknown} target - The target value to match against.
  * @param {unknown} source - The source value to match with.
  * @returns {boolean} - Returns `true` if the target matches the source, otherwise `false`.

----------------------------------------

File: src/compat/predicate/isObjectLike.ts
Status: modified
Changes: +1 -1
Diff:
@@ -1,6 +1,6 @@
 /**
  * Checks if the given value is object-like.
- * 
+ *
  * A value is object-like if its type is object and it is not null.
  *
  * This function can also serve as a type predicate in TypeScript, narrowing the type of the argument to an object-like value.

----------------------------------------

File: src/compat/predicate/isString.spec.ts
Status: added
Changes: +32 -0
Diff:
@@ -0,0 +1,32 @@
+import { describe, expect, it } from 'vitest';
+import { isString } from './isString';
+import { falsey } from '../_internal/falsey';
+import { args } from '../_internal/args';
+import { slice } from '../_internal/slice';
+import { symbol } from '../_internal/symbol';
+
+describe('isString', () => {
+  it('returns true if the value is string', () => {
+    expect(isString('a')).toBe(true);

----------------------------------------

File: src/compat/predicate/isString.ts
Status: added
Changes: +31 -0
Diff:
@@ -0,0 +1,31 @@
+import { getTag } from '../_internal/getTag';
+
+/**
+ * Checks if a given value is stirng.
+ *
+ * This function can also serve as a type predicate in TypeScript, narrowing the type of the argument to `string`.
+ *
+ * @param {unknown} value The value to check if it is string.
+ * @returns {value is string} Returns `true` if `value` is a stirng, else `false`.

----------------------------------------

File: src/compat/predicate/matches.ts
Status: modified
Changes: +1 -1
Diff:
@@ -3,7 +3,7 @@ import { isMatch } from './isMatch.ts';
 
 /**
  * Creates a function that performs a deep comparison between a given target and the source object.
- * 
+ *
  * @param {unknown} source - The source object to create the matcher from.
  * @returns {(target: unknown) => boolean} - Returns a function that takes a target object and returns `true` if the target matches the source, otherwise `false`.
  *

----------------------------------------

File: src/compat/predicate/matchesProperty.spec.ts
Status: added
Changes: +414 -0
Diff:
@@ -0,0 +1,414 @@
+import { describe, expect, it } from 'vitest';
+import { matchesProperty } from './matchesProperty';
+import { stubTrue } from '../_internal/stubTrue';
+import { range } from '../../math/range';
+import { stubFalse } from '../_internal/stubFalse';
+import { noop } from '../../function/noop';
+import { numberProto } from '../_internal/numberProto';
+import { cloneDeep } from '../object/cloneDeep';
+
+describe('matchesProperty', () => {
+  it('should create a function that performs a deep comparison between a property value and `srcValue`', () => {
+    let object: any = { a: 1, b: 2, c: 3 };
+    let matches = matchesProperty('a', 1);
+
+    expect(matches.length).toBe(1);
+    expect(matches(object)).toBe(true);
+
+    matches = matchesProperty('b', 3);
+    expect(matches(object)).toBe(false);
+
+    matches = matchesProperty('a', { a: 1, c: 3 });
+    expect(matches({ a: object })).toBe(true);
+
+    matches = matchesProperty('a', { c: 3, d: 4 });
+    expect(matches(object)).toBe(false);
+
+    object = { a: { b: { c: 1, d: 2 }, e: 3 }, f: 4 };
+    matches = matchesProperty('a', { b: { c: 1 } });
+
+    expect(matches(object)).toBe(true);
+  });
+
+  it('should support deep paths', () => {
+    const object = { a: { b: 2 } };
+
+    ['a.b', ['a', 'b']].forEach(path => {
+      const matches = matchesProperty(path, 2);
+      expect(matches(object)).toBe(true);
+    });
+  });
+
+  it('should work with a non-string `path`', () => {
+    const array = [1, 2, 3];
+
+    [1, [1]].forEach(path => {
+      const matches = matchesProperty(path, 2);
+      expect(matches(array)).toBe(true);
+    });
+  });
+
+  it('should preserve the sign of `0`', () => {
+    const object1 = { '-0': 'a' };
+    const object2 = { 0: 'b' };
+    const pairs = [
+      [object1, object2],
+      [object1, object2],
+      [object2, object1],
+      [object2, object1],
+    ];
+    const props = [-0, Object(-0), 0, Object(0)];
+    const values = ['a', 'a', 'b', 'b'];
+    const expected = props.map(() => [true, false]);
+
+    const actual = props.map((key, index) => {
+      const matches = matchesProperty(key, values[index]);
+      const pair = pairs[index];
+
+      return [matches(pair[0]), matches(pair[1])];
+    });
+
+    expect(actual).toEqual(expected);
+  });
+
+  it('should coerce `path` to a string', () => {
+    function fn() {}
+    fn.toString = () => 'fn';
+
+    const object: any = { null: 1, undefined: 2, fn: 3, '[object Object]': 4 };
+    const paths: any[] = [null, undefined, fn, {}];
+    const expected = paths.map(stubTrue);
+
+    range(2).forEach(index => {
+      const actual = paths.map(path => {
+        const matches = matchesProperty(index ? [path] : path, object[path]);
+        return matches(object);
+      });
+
+      expect(actual).toEqual(expected);
+    });
+  });
+
+  it('should match a key over a path', () => {
+    const object = { 'a.b': 1, a: { b: 2 } };
+
+    ['a.b', ['a.b']].forEach(path => {
+      const matches = matchesProperty(path, 1);
+      expect(matches(object)).toBe(true);
+    });
+  });
+
+  it('should return `false` when `object` is nullish', () => {
+    // eslint-disable-next-line
+    const values = [, null, undefined];
+    const expected = values.map(stubFalse);
+
+    ['constructor', ['constructor']].forEach(path => {
+      const matches = matchesProperty(path, 1);
+
+      const actual = values.map((value, index) => {
+        try {
+          return index ? matches(value) : matches();
+          // eslint-disable-next-line
+        } catch (e) {}
+      });
+
+      expect(actual).toEqual(expected);
+    });
+  });
+
+  it('should return `false` for deep paths when `object` is nullish', () => {
+    // eslint-disable-next-line
+    const values = [, null, undefined];
+    const expected = values.map(stubFalse);
+
+    ['constructor.prototype.valueOf', ['constructor', 'prototype', 'valueOf']].forEach(path => {
+      const matches = matchesProperty(path, 1);
+
+      const actual = values.map((value, index) => {
+        try {
+          return index ? matches(value) : matches();
+          // eslint-disable-next-line
+        } catch (e) {}
+      });
+
+      expect(actual).toEqual(expected);
+    });
+  });

----------------------------------------

File: src/compat/predicate/matchesProperty.ts
Status: added
Changes: +52 -0
Diff:
@@ -0,0 +1,52 @@
+import { toKey } from '../_internal/toKey.ts';
+import { cloneDeep } from '../object/cloneDeep.ts';
+import { get } from '../object/get.ts';
+import { has } from '../object/has.ts';
+import { isMatch } from './isMatch.ts';
+
+/**
+ * Creates a function that checks if a given target object matches a specific property value.
+ *
+ * The returned function takes a target object and determines if the property at the
+ * specified path within the target object is equal to the given value.
+ *
+ * @param {PropertyKey | PropertyKey[]} property - The property path to check within the target object.
+ *     This can be a single property key or an array of property keys.
+ * @param {unknown} source - The value to compare against the property value in the target object.
+ *

----------------------------------------

File: src/compat/string/padEnd.spec.ts
Status: added
Changes: +36 -0
Diff:
@@ -0,0 +1,36 @@
+import { describe, it, expect } from 'vitest';
+import { padEnd } from './padEnd';
+
+describe('padEnd', () => {
+  it('should return the original string if no length and char is provided', () => {
+    expect(padEnd('abc')).toBe('abc');
+  });
+
+  it('should pad a string on the right side if it is shorter than the length', () => {
+    expect(padEnd('abc', 6)).toBe('abc   ');
+  });

----------------------------------------

File: src/compat/string/padEnd.ts
Status: added
Changes: +21 -0
Diff:
@@ -0,0 +1,21 @@
+/**
+ * Pads the end of a string with a given character until it reaches the specified length.
+ *
+ * If the length is less than or equal to the original string's length, or if the padding character is an empty string,
+ * the original string is returned unchanged.
+ *
+ * @param {string} str - The string to pad.
+ * @param {number} [length] - The length of the resulting string once padded.
+ * @param {string} [chars] - The character(s) to use for padding.

----------------------------------------

File: src/compat/string/padStart.ts
Status: modified
Changes: +3 -3
Diff:
@@ -1,11 +1,11 @@
 /**
  * Pads the start of a string with a given character until it reaches the specified length.
- * 
+ *
  * If the length is less than or equal to the original string's length, or if the padding character is an empty string,
  * the original string is returned unchanged.
  *
  * @param {string} str - The string to pad.
- * @param {number} [length] - The length of the resulting string once padded. 

----------------------------------------

File: src/function/ary.ts
Status: modified
Changes: +2 -2
Diff:
@@ -7,8 +7,8 @@
  * @param {any} guard - Enables use as an iteratee for methods like `map`.
  * @returns {(...args: any[]) => ReturnType<F>} Returns the new capped function.
  */
-export function ary<F extends (...args: any[]) => any>(func: F, n: number): ((...args: any[]) => ReturnType<F>) {
+export function ary<F extends (...args: any[]) => any>(func: F, n: number): (...args: any[]) => ReturnType<F> {
   return function (this: any, ...args: Parameters<F>) {
     return func.apply(this, args.slice(0, n));
   };
-};

----------------------------------------

File: src/function/debounce.ts
Status: modified
Changes: +1 -1
Diff:
@@ -56,7 +56,7 @@ export function debounce<F extends (...args: any[]) => void>(
     timeoutId = setTimeout(() => {
       func(...args);
       timeoutId = null;
-    }, debounceMs) ;
+    }, debounceMs);
   } as F & { cancel: () => void };
 
   const onAbort = function () {

----------------------------------------

File: src/function/index.ts
Status: modified
Changes: +4 -0
Diff:
@@ -5,5 +5,9 @@ export { noop } from './noop.ts';
 export { once } from './once.ts';
 export { throttle } from './throttle.ts';
 export { negate } from './negate.ts';
+export { memoize, type MemoizeCache } from './memoize.ts';
 export { ary } from './ary.ts';
 export { unary } from './unary.ts';
+export { partial } from './partial.ts';
+export { partialRight } from './partialRight.ts';
+export { rest } from './rest.ts';

----------------------------------------

File: src/function/memoize.spec.ts
Status: added
Changes: +139 -0
Diff:
@@ -0,0 +1,139 @@
+import { describe, expect, it, vi } from 'vitest';
+import { memoize } from './memoize';
+
+describe('memoize', () => {
+  it('should memoize results of an unary function', () => {
+    const add10 = vi.fn((x: number) => x + 10);
+
+    const memoizedAdd10 = memoize(add10);
+    expect(memoizedAdd10(5)).toBe(15);
+    expect(memoizedAdd10(5)).toBe(15);
+
+    expect(add10).toBeCalledTimes(1);
+
+    const now = () => Date.now();
+    const memoizedNow = memoize(now);
+
+    expect(memoizedNow()).toBe(memoizedNow());
+  });
+
+  it('should memoize results using a custom resolver function', () => {
+    const sum = vi.fn(function sum(arr: number[]) {
+      return arr.reduce((x, y) => x + y, 0);
+    });
+
+    const memoizedSum = memoize(sum, {
+      getCacheKey: x => x.join(','),
+    });
+
+    expect(memoizedSum([1, 2, 3])).toBe(6);
+    expect(memoizedSum([1, 2, 3])).toBe(6);
+
+    expect(sum).toBeCalledTimes(1);
+  });
+
+  it('should use `this` context for resolver function', () => {
+    const fn = function (a: number) {
+      // @ts-expect-error: this is not defined
+      return (a + this.b + this.c) as number;
+    };
+    const memoized = memoize(fn);
+    const object = { memoized: memoized, b: 2, c: 3 };
+    expect(object.memoized(1)).toBe(6); // {1: 6}
+    object.b = 3;
+    object.c = 5;
+    expect(object.memoized(1)).toBe(6); // {1: 6}

----------------------------------------

File: src/function/memoize.ts
Status: added
Changes: +107 -0
Diff:
@@ -0,0 +1,107 @@
+/**
+ * Creates a memoized version of the provided function. The memoized function caches
+ * results based on the argument it receives, so if the same argument is passed again,
+ * it returns the cached result instead of recomputing it.
+ *
+ * This function works with functions that take zero or just one argument. If your function
+ * originally takes multiple arguments, you should refactor it to take a single object or array
+ * that combines those arguments.
+ *
+ * If the argument is not primitive (e.g., arrays or objects), provide a
+ * `getCacheKey` function to generate a unique cache key for proper caching.
+ *
+ * @param {F} fn - The function to be memoized. It should accept a single argument and return a value.
+ * @param {MemoizeOptions<Parameters<F>[0], ReturnType<F>>} [options={}] - Optional configuration for the memoization.
+ * @param {MemoizeCache<any, V>} [options.cache] - The cache object used to store results. Defaults to a new `Map`.
+ * @param {(args: A) => unknown} [options.getCacheKey] - An optional function to generate a unique cache key for each argument.
+ *
+ * @returns {F & { cache: MemoizeCache<any, ReturnType<F>> }} - The memoized function with an additional `cache` property that exposes the internal cache.
+ *
+ * @example
+ * // Example using the default cache
+ * const add = (x: number) => x + 10;
+ * const memoizedAdd = memoize(add);
+ *
+ * console.log(memoizedAdd(5)); // 15
+ * console.log(memoizedAdd(5)); // 15 (cached result)
+ * console.log(memoizedAdd.cache.size); // 1
+ *
+ * @example
+ * // Example using a custom resolver
+ * const sum = (arr: number[]) => arr.reduce((x, y) => x + y, 0);
+ * const memoizedSum = memoize(sum, { getCacheKey: (arr: number[]) => arr.join(',') });
+ * console.log(memoizedSum([1, 2])); // 3
+ * console.log(memoizedSum([1, 2])); // 3 (cached result)
+ * console.log(memoizedSum.cache.size); // 1

----------------------------------------

File: src/function/negate.spec.ts
Status: modified
Changes: +5 -5
Diff:
@@ -2,9 +2,9 @@ import { describe, it, expect } from 'vitest';
 import { negate } from './negate';
 
 describe('negate', () => {
-    it('should negate the given predicate function', () => {
-        expect(typeof negate(() => true)).toBe('function');
-        expect(negate(() => true)()).toBe(false);
-        expect(negate(() => false)()).toBe(true);
-    });
+  it('should negate the given predicate function', () => {

----------------------------------------

File: src/function/negate.ts
Status: modified
Changes: +1 -1
Diff:
@@ -6,5 +6,5 @@
  * @returns {F} The new negated function, which negates the boolean result of `func`.
  */
 export function negate<F extends (...args: unknown[]) => boolean>(func: F): F {
-    return ((...args: any[]) => !func(...args)) as F;
+  return ((...args: any[]) => !func(...args)) as F;
 }

----------------------------------------

File: src/function/partial.spec.ts
Status: added
Changes: +84 -0
Diff:
@@ -0,0 +1,84 @@
+import { describe, it, expect } from 'vitest';
+import { partial } from './partial';
+
+function identity(arg?: any): any {
+  return arg;
+}
+
+describe('partial', () => {
+  const { placeholder } = partial;
+  it('partial partially applies arguments', () => {
+    const par = partial(identity, 'a');
+    expect(par()).toBe('a');
+  });
+
+  it('partial creates a function that can be invoked with additional arguments', () => {
+    const fn = function (a?: string, b?: string) {
+      return [a, b];
+    };
+    const par = partial(fn, 'a');
+    expect(par('b')).toEqual(['a', 'b']);
+  });
+
+  it('partial works when there are no partially applied arguments and the created function is invoked without additional arguments', () => {
+    const fn = function () {
+      return arguments.length;
+    };
+    const par = partial(fn);

----------------------------------------

File: src/function/partial.ts
Status: added
Changes: +50 -0
Diff:
@@ -0,0 +1,50 @@
+/**
+ * Creates a function that invokes `func` with `partialArgs` prepended to the arguments it receives. This method is like `bind` except it does not alter the `this` binding.
+ *
+ * The partial.placeholder value, which defaults to a `symbol`, may be used as a placeholder for partially applied arguments.
+ *
+ * Note: This method doesn't set the `length` property of partially applied functions.
+ *
+ * @template F The type of the function to partially apply.
+ * @param {F} func The function to partially apply arguments to.
+ * @param {any[]} partialArgs The arguments to be partially applied.
+ * @returns {F} Returns the new partially applied function.
+ *
+ * @example
+ * function greet(greeting, name) {
+ *   return greeting + ' ' + name;
+ * }

----------------------------------------

File: src/function/partialRight.spec.ts
Status: added
Changes: +85 -0
Diff:
@@ -0,0 +1,85 @@
+import { describe, it, expect } from 'vitest';
+import { partialRight } from './partialRight';
+
+function identity(arg?: any): any {
+  return arg;
+}
+
+describe('partialRight', () => {
+  const { placeholder } = partialRight;
+  it('partialRight partially applies arguments', () => {
+    const par = partialRight(identity, 'a');
+    expect(par()).toBe('a');
+  });
+
+  it('partialRight creates a function that can be invoked with additional arguments', () => {
+    const fn = function (a?: string, b?: string) {
+      return [a, b];
+    };
+    const par = partialRight(fn, 'a');
+    expect(par('b')).toEqual(['b', 'a']);
+  });
+
+  it('partialRight works when there are no partially applied arguments and the created function is invoked without additional arguments', () => {
+    const fn = function () {
+      return arguments.length;
+    };
+    const par = partialRight(fn);

----------------------------------------

File: src/function/partialRight.ts
Status: added
Changes: +51 -0
Diff:
@@ -0,0 +1,51 @@
+/**
+ * This method is like `partial` except that partially applied arguments are appended to the arguments it receives.
+ *
+ * The partialRight.placeholder value, which defaults to a `symbol`, may be used as a placeholder for partially applied arguments.
+ *
+ * Note: This method doesn't set the `length` property of partially applied functions.
+ *
+ * @template F The type of the function to partially apply.
+ * @param {F} func The function to partially apply arguments to.
+ * @param {any[]} partialArgs The arguments to be partially applied.
+ * @returns {F} Returns the new partially applied function.
+ *
+ * @example
+ * function greet(greeting, name) {
+ *   return greeting + ' ' + name;
+ * }

----------------------------------------

File: src/function/rest.spec.ts
Status: added
Changes: +35 -0
Diff:
@@ -0,0 +1,35 @@
+import { describe, it, expect } from 'vitest';
+import { rest } from './rest';
+
+describe('rest', () => {
+  // eslint-disable-next-line @typescript-eslint/no-unused-vars
+  function fn(_a: unknown, _b: unknown, _c: unknown) {
+    // eslint-disable-next-line prefer-rest-params
+    return Array.from(arguments);
+  }
+
+  it('should apply a rest parameter to `func`', () => {

----------------------------------------

File: src/function/rest.ts
Status: added
Changes: +43 -0
Diff:
@@ -0,0 +1,43 @@
+/**
+ * Creates a function that transforms the arguments of the provided function `func`.
+ * The transformed arguments are passed to `func` such that the arguments starting from a specified index
+ * are grouped into an array, while the previous arguments are passed as individual elements.
+ *
+ * @template F - The type of the function being transformed.
+ * @param {F} func - The function whose arguments are to be transformed.
+ * @param {number} [startIndex=func.length - 1] - The index from which to start grouping the remaining arguments into an array.
+ *                                            Defaults to `func.length - 1`, grouping all arguments after the last parameter.
+ * @returns {(...args: any[]) => ReturnType<F>} A new function that, when called, returns the result of calling `func` with the transformed arguments.
+ *
+ * The transformed arguments are:
+ * - The first `start` arguments as individual elements.

----------------------------------------

File: src/function/unary.ts
Status: modified
Changes: +2 -2
Diff:
@@ -7,6 +7,6 @@ import { ary } from './ary.ts';
  * @param {F} func - The function to cap arguments for.
  * @returns {(...args: any[]) => ReturnType<F>} Returns the new capped function.
  */
-export function unary<F extends (...args: any[]) => any>(func: F): ((...args: any[]) => ReturnType<F>) {
+export function unary<F extends (...args: any[]) => any>(func: F): (...args: any[]) => ReturnType<F> {
   return ary(func, 1);
-};
+}

----------------------------------------

File: src/math/round.spec.ts
Status: modified
Changes: +1 -3
Diff:
@@ -55,8 +55,6 @@ describe('round function', () => {
   it('handles edge cases where precision is not integer', () => {
     const value = 1.2345;
     const precision = 3.1;
-    expect(() => round(value, precision)).toThrow(
-      'Precision must be an integer.'
-    );
+    expect(() => round(value, precision)).toThrow('Precision must be an integer.');
   });
 });

----------------------------------------

File: src/object/clone.ts
Status: modified
Changes: +1 -1
Diff:
@@ -61,7 +61,7 @@ export function clone<T>(obj: T): T {
 
   if (typeof obj === 'object') {
     const prototype = Object.getPrototypeOf(obj);
-    const result = Object.create(prototype)
+    const result = Object.create(prototype);
     return Object.assign(result, obj);
   }
   return obj;

----------------------------------------

File: src/object/cloneDeep.spec.ts
Status: modified
Changes: +3 -3
Diff:
@@ -32,7 +32,7 @@ describe('cloneDeep', () => {
 
     expect(cloned).toEqual(arr);
     expect(cloned).not.toBe(arr);
-  })
+  });
 
   it('should clone arrays with nested objects', () => {
     const arr = [{ a: 1 }, { b: 2 }, { c: 3 }];
@@ -337,7 +337,7 @@ describe('cloneDeep', () => {

----------------------------------------

File: src/object/flattenObject.spec.ts
Status: modified
Changes: +43 -43
Diff:
@@ -1,17 +1,17 @@
-import { describe, expect, it } from "vitest"
-import { flattenObject } from "./flattenObject";
+import { describe, expect, it } from 'vitest';
+import { flattenObject } from './flattenObject';
 
 describe('flattenObject', function () {
   it('flattens primitive values correctly', () => {
     const result1 = flattenObject({
       a: {
-        b: 'yay'
-      }
+        b: 'yay',
+      },
     });
 
     expect(result1).toEqual({
-      'a.b': 'yay'
-    })
+      'a.b': 'yay',
+    });
 
     const date = new Date();
 
@@ -24,9 +24,9 @@ describe('flattenObject', function () {
           null: null,
           undefined: undefined,
           date: date,
-        }
-      }
-    })
+        },
+      },
+    });
 
     expect(result2).toEqual({
       'a.b.string': 'hello world',
@@ -35,8 +35,8 @@ describe('flattenObject', function () {
       'a.b.null': null,
       'a.b.undefined': undefined,
       'a.b.date': date,
-    })
-  })
+    });
+  });
 
   it('flattens multiple keys', () => {
     const date = new Date();
@@ -49,96 +49,96 @@ describe('flattenObject', function () {
         d: {
           e: {
             f: {
-              g: date
-            }
-          }
-        }
+              g: date,
+            },
+          },

----------------------------------------

File: src/object/flattenObject.ts
Status: modified
Changes: +6 -6
Diff:
@@ -1,11 +1,11 @@
-import { isPlainObject } from "../predicate/isPlainObject.ts";
+import { isPlainObject } from '../predicate/isPlainObject.ts';
 
 /**
  * Flattens a nested object into a single level object with dot-separated keys.
- * 
+ *
  * @param {object} object - The object to flatten.
  * @returns {Record<string, any>} - The flattened object.
- * 

----------------------------------------

File: src/object/index.ts
Status: modified
Changes: +1 -0
Diff:
@@ -9,4 +9,5 @@ export { mapKeys } from './mapKeys.ts';
 export { mapValues } from './mapValues.ts';
 export { cloneDeep } from './cloneDeep.ts';
 export { merge } from './merge.ts';
+export { toMerged } from './toMerged.ts';
 export { mergeWith } from './mergeWith.ts';

----------------------------------------

File: src/object/invert.ts
Status: modified
Changes: +1 -1
Diff:
@@ -20,7 +20,7 @@ export function invert<K extends PropertyKey, V extends PropertyKey>(obj: Record
   const result = {} as { [key in V]: K };
 
   const keys = Object.keys(obj) as K[];
-  
+
   for (let i = 0; i < keys.length; i++) {
     const key = keys[i];
     const value = obj[key];

----------------------------------------

File: src/predicate/index.ts
Status: modified
Changes: +1 -0
Diff:
@@ -10,3 +10,4 @@ export { isTypedArray } from './isTypedArray.ts';
 export { isPrimitive } from './isPrimitive.ts';
 export { isBoolean } from './isBoolean.ts';
 export { isSymbol } from './isSymbol.ts';
+export { isString } from './isString.ts';

----------------------------------------

File: src/predicate/isEqual.spec.ts
Status: modified
Changes: +2 -2
Diff:
@@ -99,7 +99,7 @@ describe('isEqual', () => {
     const buffer2 = new Uint8Array([1, 2, 3]).buffer;
 
     expect(isEqual(buffer1, buffer2)).toBe(true);
-  })
+  });
 
   it('should return false for different array buffers', () => {
     const buffer1 = new Uint8Array([1, 2, 3]).buffer;
@@ -111,5 +111,5 @@ describe('isEqual', () => {

----------------------------------------

File: src/predicate/isEqual.ts
Status: modified
Changes: +42 -16
Diff:
@@ -1,12 +1,40 @@
-
-import { argumentsTag, arrayBufferTag, arrayTag, bigInt64ArrayTag, bigUint64ArrayTag, booleanTag, dataViewTag, dateTag, errorTag, float32ArrayTag, float64ArrayTag, functionTag, int16ArrayTag, int32ArrayTag, int8ArrayTag, mapTag, numberTag, objectTag, regexpTag, setTag, stringTag, symbolTag, uint16ArrayTag, uint32ArrayTag, uint8ArrayTag, uint8ClampedArrayTag } from "../compat/_internal/tags.ts";
-import { getSymbols } from "../compat/_internal/getSymbols.ts";
-import { getTag } from "../compat/_internal/getTag.ts";
-import { isPlainObject } from "./isPlainObject.ts";
-
-declare var Buffer: {
-  isBuffer: (a: any) => boolean;
-} | undefined;
+import {
+  argumentsTag,
+  arrayBufferTag,
+  arrayTag,
+  bigInt64ArrayTag,
+  bigUint64ArrayTag,
+  booleanTag,
+  dataViewTag,
+  dateTag,
+  errorTag,
+  float32ArrayTag,
+  float64ArrayTag,
+  functionTag,
+  int16ArrayTag,
+  int32ArrayTag,
+  int8ArrayTag,
+  mapTag,
+  numberTag,
+  objectTag,
+  regexpTag,
+  setTag,
+  stringTag,
+  symbolTag,

----------------------------------------

File: src/predicate/isPlainObject.spec.ts
Status: modified
Changes: +3 -3
Diff:
@@ -1,5 +1,5 @@
-import { describe, expect, it } from "vitest";
-import { isPlainObject } from "./isPlainObject";
+import { describe, expect, it } from 'vitest';
+import { isPlainObject } from './isPlainObject';
 
 describe('isPlainObject', () => {
   it('returns true for plain objects', () => {
@@ -15,4 +15,4 @@ describe('isPlainObject', () => {
     expect(isPlainObject(Buffer.from('123123'))).toBe(false);

----------------------------------------

File: src/predicate/isPlainObject.ts
Status: modified
Changes: +3 -3
Diff:
@@ -1,9 +1,9 @@
 /**
  * Checks if a given value is a plain object.
- * 
+ *
  * @param {object} object - The value to check.
  * @returns {boolean} - True if the value is a plain object, otherwise false.
- * 
+ *
  * @example

----------------------------------------

File: src/predicate/isString.spec.ts
Status: added
Changes: +24 -0
Diff:
@@ -0,0 +1,24 @@
+import { describe, expect, it } from 'vitest';
+import { isString } from './isString';
+
+describe('isStirng', () => {
+  it('returns true if the value is string', () => {
+    expect(isString('abc')).toBe(true);
+  });
+
+  it('returns false if the value is not string', () => {

----------------------------------------

File: src/predicate/isString.ts
Status: added
Changes: +21 -0
Diff:
@@ -0,0 +1,21 @@
+/**
+ * Checks if a given value is stirng.
+ *
+ * This function can also serve as a type predicate in TypeScript, narrowing the type of the argument to `string`.
+ *
+ * @param {unknown} value The value to check if it is string.
+ * @returns {value is string} Returns `true` if `value` is a stirng, else `false`.
+ *
+ * @example

----------------------------------------

File: src/promise/withTimeout.ts
Status: modified
Changes: +3 -3
Diff:
@@ -1,13 +1,13 @@
 import { timeout } from './timeout.ts';
 
 /**
- * Executes an async function and enforces a timeout. 
- * 
+ * Executes an async function and enforces a timeout.
+ *
  * If the promise does not resolve within the specified time,
  * the timeout will trigger and the returned promise will be rejected.

----------------------------------------

File: src/string/camelCase.spec.ts
Status: modified
Changes: +21 -23
Diff:
@@ -1,42 +1,40 @@
-import { describe, expect, it } from "vitest";
-import { camelCase } from "./camelCase";
+import { describe, expect, it } from 'vitest';
+import { camelCase } from './camelCase';
 
-describe("camelCase", () => {
-  it("should change camel case to camel case", async () => {
-    expect(camelCase("camelCase")).toEqual("camelCase");
+describe('camelCase', () => {
+  it('should change camel case to camel case', async () => {
+    expect(camelCase('camelCase')).toEqual('camelCase');
   });
 
-  it("should change space to camel case", async () => {
-    expect(camelCase("some whitespace")).toEqual("someWhitespace");
+  it('should change space to camel case', async () => {
+    expect(camelCase('some whitespace')).toEqual('someWhitespace');
   });
 
-  it("should change hyphen to camel case", async () => {

----------------------------------------

File: src/string/camelCase.ts
Status: modified
Changes: +4 -5
Diff:
@@ -1,5 +1,5 @@
-import { capitalize } from "./capitalize.ts";
-import { getWords } from "./_internal/getWords.ts";
+import { capitalize } from './capitalize.ts';
+import { getWords } from './_internal/getWords.ts';
 
 /**
  * Converts a string to camel case.
@@ -20,11 +20,10 @@ export function camelCase(str: string): string {
   const words = getWords(str);

----------------------------------------

File: tests/utils/createPackageTarball.ts
Status: modified
Changes: +2 -2
Diff:
@@ -13,5 +13,5 @@ export async function createPackageTarball() {
 
   return {
     path: tarballPath,
-  }
-}
\ No newline at end of file
+  };
+}

----------------------------------------

File: tests/utils/createTmpDir.ts
Status: modified
Changes: +1 -1
Diff:
@@ -8,4 +8,4 @@ export async function createTmpDir() {
   await fs.promises.mkdir(tmpdir, { recursive: true });
 
   return tmpdir;
-}
\ No newline at end of file
+}

----------------------------------------

File: tests/utils/parseTar.ts
Status: modified
Changes: +1 -1
Diff:
@@ -27,4 +27,4 @@ export async function* parseTar(tgz: Buffer) {
     yield it;
     it.resume();
   }
-}
\ No newline at end of file
+}

----------------------------------------

File: vitest.config.mts
Status: modified
Changes: +1 -1
Diff:
@@ -8,7 +8,7 @@ export default defineConfig({
     coverage: {
       provider: 'istanbul',
       include: ['src/**/*'],
-      exclude: ['src/compat/_internal/**/*']
+      exclude: ['src/compat/_internal/**/*'],
     },
   },
 });

----------------------------------------

